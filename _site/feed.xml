<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-01-29T09:08:17-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Swiftjective-C</title><subtitle>Swiftjective-C is a periodical over modern iOS software engineering. It houses tactful discussions over Swift, Objective-C and developing high quality apps while peering into various frameworks to see what makes them tick.
</subtitle><author><name>Jordan Morgan</name></author><entry><title type="html">CollectionDifference</title><link href="http://localhost:4000/CollectionDifference/" rel="alternate" type="text/html" title="CollectionDifference" /><published>2020-01-29T00:00:00-06:00</published><updated>2020-01-29T00:00:00-06:00</updated><id>http://localhost:4000/CollectionDifference</id><content type="html" xml:base="http://localhost:4000/CollectionDifference/">&lt;p&gt;In the not so distant past, it was a foregone conclusion that developers would eventually fall back to the jackhammer when it came to table or collection views: &lt;code class=&quot;highlighter-rouge&quot;&gt;reloadData&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The reasons why were simple:&lt;/p&gt;

&lt;p&gt;1) Getting a diff of what’s changed in your data was hard, and &lt;br /&gt;
2) Mapping that with the right index paths was even harder.&lt;/p&gt;

&lt;p&gt;But the payoff was always worth it, a buttery smooth batch reload in your interface. And hey - you can’t make an omelet without crackin’ a few eggs.&lt;/p&gt;

&lt;p&gt;Fast forward to today, and we can thankfully say that WWDC 2019 mercifully addressed both pain points. Today, let’s take a look at &lt;code class=&quot;highlighter-rouge&quot;&gt;CollectionDifference&lt;/code&gt;, a lightweight way to calculate the once elusive diff mentioned in reason #1 above.&lt;/p&gt;

&lt;h3 id=&quot;the-little-struct-that-could&quot;&gt;The Little Struct That Could&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CollectionDifference&lt;/code&gt; arrived in Swift 5.1 by way of &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0240-ordered-collection-diffing.md&quot;&gt;SE-0240&lt;/a&gt;. Authors Scott Perry and Kyle Macomber wanted a way to “provide an interchange format for diffs as well as diffing/patching functionality for appropriate collection types.”&lt;/p&gt;

&lt;p&gt;Perhaps the most telling part of their proposal, though, is where they state the following:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Representing, manufacturing, and applying transactions between states today requires writing a lot of error-prone code.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You don’t say.&lt;/p&gt;

&lt;p&gt;Thankfully, they took the problem to task and what we arrive at is &lt;code class=&quot;highlighter-rouge&quot;&gt;CollectionDifference&lt;/code&gt; - a struct that houses insertions and removals that describe the delta between two ordered collections:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CollectionDifference&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ChangeElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Perhaps the highest compliment I can extend it is that the API is easy on the eyes (uncommon for diffing libraries). As we’ll see, it’s typically a one or two line affair to get a diff and apply it, context depending.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Keep in mind this diffing capability is for &lt;em&gt;ordered&lt;/em&gt; collections only. In Swift, this is any collection conforming &lt;a href=&quot;https://developer.apple.com/documentation/swift/bidirectionalcollection&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BidirectionalCollection&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Performance-wise, the worst you can expect is O(n * m) - where &lt;em&gt;n&lt;/em&gt; represents the count of the first collection, and &lt;em&gt;m&lt;/em&gt; the other. You do have some influence here. If your elements conform to &lt;code class=&quot;highlighter-rouge&quot;&gt;Hashable&lt;/code&gt; (and why the heck wouldn’t they - we got diffable data source this year which requires it) or the collection share many common elements, expect the diff to perform better.&lt;/p&gt;

&lt;p&gt;Either way, since Swift is an ever-mutating project, the diffing performance has &lt;a href=&quot;https://github.com/apple/swift/pull/25808&quot;&gt;already been improved&lt;/a&gt; from its first incarnation by utilizing the &lt;a href=&quot;http://www.xmailserver.org/diff2.pdf&quot;&gt;Myers algorithm&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;diffin&quot;&gt;Diffin’&lt;/h3&gt;
&lt;p&gt;As an API consumer, if one simply needs to diff something and move about their day, then there are two essential functions to know about which are invoked from the collections themselves:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;difference(from:)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;applying(_)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;One to generate a diff (giving us a &lt;code class=&quot;highlighter-rouge&quot;&gt;CollectionDifference&lt;/code&gt;) and one to get the result of the diff by passing it in as a parameter:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;firstDraft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;It was the best of times...&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;secondDraft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;It was the worst of times...&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondDraft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;difference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstDraft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;finalDraft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstDraft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;applying&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;It was the worst of times...&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Or, reverse that&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstDraft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;difference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secondDraft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;finalDraft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secondDraft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;applying&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;It was the best of times...&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Also note that if you need to finely tune the diff, you can also supply a closure to return a boolean based on your own equality standards:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;difference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newNum&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The flow is identifying what you want to compare, and then getting the results of the diff into a data structure to operate on. If that’s all you need from &lt;code class=&quot;highlighter-rouge&quot;&gt;CollectionDifference&lt;/code&gt;, then you can hang it up and call it a day. For the curious among us, let’s look a little deeper.&lt;/p&gt;

&lt;h3 id=&quot;change-enum&quot;&gt;Change Enum&lt;/h3&gt;
&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;CollectionDifference&lt;/code&gt; houses changes as represented by the &lt;code class=&quot;highlighter-rouge&quot;&gt;Change&lt;/code&gt; enum. And, since Swift’s enums are drunk with power, they house three important parts of the diff:&lt;/p&gt;

&lt;p&gt;1) An &lt;code class=&quot;highlighter-rouge&quot;&gt;offset&lt;/code&gt; Int. &lt;br /&gt;
2) The &lt;code class=&quot;highlighter-rouge&quot;&gt;element&lt;/code&gt; itself. &lt;br /&gt;
3) An optional Int, &lt;code class=&quot;highlighter-rouge&quot;&gt;associatedWith&lt;/code&gt;, that helps you track moves.&lt;/p&gt;

&lt;p&gt;The last one is both interesting and important. In the diff, if it moved an existing element - that’s actually a two-step dance. It’s first a removal, and then an insertion. What &lt;code class=&quot;highlighter-rouge&quot;&gt;associatedWith&lt;/code&gt; does it track the relationship between the two. This opens up some very nice UIKit-y scenarios.&lt;/p&gt;

&lt;p&gt;This, however, requires a bit more work from a performance standpoint - thus the optional Int. We don’t get very many free lunches in programming, and doubly so when it comes to diffing. So, if we want the associations, we ask for them by invoking &lt;code class=&quot;highlighter-rouge&quot;&gt;inferringMoves&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, notice the association (represented by &lt;code class=&quot;highlighter-rouge&quot;&gt;move&lt;/code&gt;) is nil in the following print statements:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;difference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Removed &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; at idx &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; and moved to &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;describing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Inserted &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; at idx &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; from &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;describing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* Prints
Removed A at idx 0 and moved to nil
Inserted A at idx 1 from nil
*/&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;baz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;applying&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [&quot;Z&quot;, &quot;A&quot;, &quot;C&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The diff simply tells us that “A” at index 0 was removed, and “A” was inserted at index 1. But it doesn’t tell us about any potential moves, just the end result. This makes sense because we’re left with the true, and accurate, diff - so from an API perspective we shouldn’t opt in to that extra work if it’s not needed.&lt;/p&gt;

&lt;p&gt;If we do need it, notice how we get the associations by way of &lt;code class=&quot;highlighter-rouge&quot;&gt;inferringMoves&lt;/code&gt;. Consider the exact code above, just with one changes in the for-loop:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inferringMoves&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* code */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* Now prints
Moved A at idx 0 and moved to 1
Inserted A at idx 1 from 0
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now, we can safely program against the moves.&lt;/p&gt;

&lt;h3 id=&quot;applications&quot;&gt;Applications&lt;/h3&gt;
&lt;p&gt;While playing around with diffing, I toyed with a few applications for UIKit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Batch Updates&lt;/strong&gt;&lt;br /&gt;
If you’re unable to move to &lt;a href=&quot;http://localhost:4000/Diffable-Datasource-Empty-View&quot;&gt;diffable data source&lt;/a&gt;, or you’re just a complete glutton for pain - you can reasonably backport a diffing function with a little legwork for table and collection views. Since we know a non-nil association represents a move, we can map these over to index paths.&lt;/p&gt;

&lt;p&gt;For a single section table view, something like this works to produce a batch update:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;deletes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inserts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;moves&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inferringMoves&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;moves&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;deletes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// If there's no move, it's a true insertion and not the result of a move.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;inserts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;performBatchUpdates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;applying&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deleteRows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deletes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insertRows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inserts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;moves&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;moveRow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Trying that out on a little demo app, sure enough - I was treated to batch reloads. This process was painless compared to the hoops you had to ceremoniously jump through before, and then crash on edges cases while devolving back into our burn-it-all-down ways of &lt;code class=&quot;highlighter-rouge&quot;&gt;reloadData&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lozad rounded center-img&quot; data-src=&quot;../assets/images/batch.gif&quot; role=&quot;presentation&quot; srcset=&quot;../assets/images/batch.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fresh Interfaces&lt;/strong&gt;&lt;br /&gt;
Another way to give your interface a dash of that &lt;em&gt;je ne sais quoi&lt;/em&gt; is to accurately represent the changes occuring with interface data. Think of an inbox type scenario where the user has seen X items, but Y items just came in from a network hit:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;currentItems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;newItems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newItems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;difference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;newCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newCount&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; new items.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3 new items&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newCount&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; new items to view.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h3&gt;
&lt;p&gt;Swift continues to benefit from a lot of talented engineers lending their handy work to the language. There is no denying that Cupertino &amp;amp; Friends’© open-source initiative has led to brilliant work from engineers outside their walls to be enjoyed by the masses. &lt;code class=&quot;highlighter-rouge&quot;&gt;CollectionDifference&lt;/code&gt; is a textbook example.&lt;/p&gt;

&lt;p&gt;Now, go forth and serve up diffs with a newfound level of equanimity as you do so.&lt;/p&gt;

&lt;p&gt;Until next time ✌️.&lt;/p&gt;</content><author><name>Jordan Morgan</name></author><category term="Swift" /><summary type="html">In the not so distant past, it was a foregone conclusion that developers would eventually fall back to the jackhammer when it came to table or collection views: reloadData.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/logo.png" /><media:content medium="image" url="http://localhost:4000/assets/images/logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Empty View With Diffable Datasource</title><link href="http://localhost:4000/Diffable-Datasource-Empty-View/" rel="alternate" type="text/html" title="Empty View With Diffable Datasource" /><published>2020-01-22T00:00:00-06:00</published><updated>2020-01-22T00:00:00-06:00</updated><id>http://localhost:4000/Diffable-Datasource-Empty-View</id><content type="html" xml:base="http://localhost:4000/Diffable-Datasource-Empty-View/">&lt;p&gt;Among my favorite APIs introduced at W.W.D.C. is without a doubt the new diffable data source for both &lt;a href=&quot;https://developer.apple.com/documentation/uikit/views_and_controls/collection_views/&quot; target=&quot;_blank&quot;&gt;table and collection views&lt;/a&gt;. Replacing a decade old protocol, it brings about a robust way of expressing what should show when, where the truth is and, &lt;em&gt;finally&lt;/em&gt;, a way to forgo the death trap that is batch updates.&lt;/p&gt;

&lt;p&gt;While rewriting the list view of Spend Stack, I immediately become aware of its benefits:&lt;/p&gt;

&lt;div class=&quot;jekyll-twitter-plugin&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Diffable data source is just bonkers. Literally ripping out 100s of lines of code I had to do batch updates.&lt;br /&gt;&lt;br /&gt;Just look at the before and after code, look at it 😆! Free beers for &lt;a href=&quot;https://twitter.com/_breeno?ref_src=twsrc%5Etfw&quot;&gt;@_breeno&lt;/a&gt; and friends next dub dub 🍻 &lt;a href=&quot;https://t.co/Du17rdxM3t&quot;&gt;pic.twitter.com/Du17rdxM3t&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jordan Morgan (@JordanMorgan10) &lt;a href=&quot;https://twitter.com/JordanMorgan10/status/1217622139718774784?ref_src=twsrc%5Etfw&quot;&gt;January 16, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;As far as user experience, batch updates are far superior to the sledgehammer approach of &lt;code class=&quot;highlighter-rouge&quot;&gt;reloadData&lt;/code&gt;, so this is a needed step forward. But, that’s only part of it. I’m personally a believer in showing “empty view” states, and if you peek into Apple’s stock apps - they are too. Here’s an example of a bag with no items in the Apple Store app:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lozad rounded center-img&quot; data-src=&quot;../assets/images/empty.jpeg&quot; role=&quot;presentation&quot; srcset=&quot;../assets/images/empty.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Previously, I used associated objects and the &lt;a href=&quot;https://gist.github.com/DreamingInBinary/e4218c00dbeff815e26426af402ca2ad&quot; target=&quot;_blank&quot;&gt;Objective-C Funtime to do the same thing&lt;/a&gt; in Spend Stack:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lozad rounded center-img&quot; data-src=&quot;../assets/images/emptySS.jpeg&quot; role=&quot;presentation&quot; srcset=&quot;../assets/images/emptySS.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But hey - I’m being all &lt;em&gt;swifty&lt;/em&gt; now, right? So I’ve been thinking about how to do the same with my new bestie, diffable data source while forgoing swizzling. Here’s what I’ve got so far:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createSubscriptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NotificationCenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Other subs..&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// The one when a list is mutated&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tvAnim&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SSTableViewBatchUpdateAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;listCRUD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;publisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listCRUD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compactMap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SSList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;debounce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;milliseconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tvAnim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scheduler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RunLoop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sink&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;unowned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;showEmptyViewIfNeeded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;subscriptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listCRUD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This function runs when I initialize my subclassed diffable data source (to provide for things like &lt;code class=&quot;highlighter-rouge&quot;&gt;tableView(_ tableView: UITableView, moveRowAt sourceIndexPath:, to:)&lt;/code&gt;). When Combine fires off the closure, I simply check if the data is empty:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showEmptyViewIfNeeded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emptyView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;shouldShow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;snapshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itemIdentifiers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;superview&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shouldShow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;vc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;closestViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;constraints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emptyViewConstraints&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remakeConstraints&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;constraints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeFromSuperview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This all works, but there are some things that need to improve. Notably, there are two core properties on my data source that need to be abstracted out in some fashion:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Properties on data source object&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;emptyView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;emptyViewConstraints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ConstraintMaker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)?&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Then later on, when initializing in a view controller or something similar&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emptyView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SSEmptyStateView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;stateText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ss_Localized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;list.vc.empty&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emptyViewConstraints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;unowned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;safeAreaLayoutGuide&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toolBar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;centerX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;centerX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Currently, the empty data view only works with this particular instance. I already know I’ll need it for the rest of the app, too. As I mentioned above, in Objective-C I have an &lt;code class=&quot;highlighter-rouge&quot;&gt;EmptyDataSetDelegate&lt;/code&gt; protocol which is tacked onto any collection or table view via associated objects.&lt;/p&gt;

&lt;p&gt;I &lt;em&gt;could&lt;/em&gt; do something similar, I suppose. Here are some thoughts so far.&lt;/p&gt;

&lt;p&gt;I could use a protocol so other types could do something similar:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EmptyDataViewProviding&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;emptyView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;emptyViewConstraints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ConstraintMaker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showEmptyDataView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Plus, with protocol extensions I could vend a default implementation.&lt;/p&gt;

&lt;p&gt;Next, I could simply extend the type. But without associated objects, I’d lose the two properties I need that describe the view and how it should be constrained.&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewDiffableDataSource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showEmptyView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;snapshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itemIdentifiers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Do stuff&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At first, I attempted this route by trying to include the properties using a property wrapper implementation, but that’s not allowed in extensions as far as I can tell:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewDiffableDataSource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@AssociatedObject&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emptyView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@AssociatedObject&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;emptyViewConstraints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ConstraintMaker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)?&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showEmptyView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;snapshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itemIdentifiers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Do stuff&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or, perhaps plain old object oriented programming is the answer? Simply a base type that others extend. &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2015/408/&quot;&gt;Krusty&lt;/a&gt; would be so disappointed in me though.&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BaseDiffable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewDiffableDataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SSListTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SSListItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;emptyView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;emptyViewConstraints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ConstraintMaker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)?&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;snapshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSDiffableDataSourceSnapshot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SSListTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SSListItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animatingDifferences&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snapshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animatingDifferences&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animatingDifferences&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snapshot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itemIdentifiers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Show empty view&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I can’t decide which I like the most. In the end, my existing Objective-C solution bridges over fine, but if I can avoid swizzling batch updates, I will.&lt;/p&gt;

&lt;p&gt;I’ll follow up on Twitter with where I end up.&lt;/p&gt;

&lt;p&gt;Until next time ✌️.&lt;/p&gt;</content><author><name>Jordan Morgan</name></author><category term="Tech Notes" /><summary type="html">Among my favorite APIs introduced at W.W.D.C. is without a doubt the new diffable data source for both table and collection views. Replacing a decade old protocol, it brings about a robust way of expressing what should show when, where the truth is and, finally, a way to forgo the death trap that is batch updates.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/logo.png" /><media:content medium="image" url="http://localhost:4000/assets/images/logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">A Best In Class App: Spend Stack Checkup</title><link href="http://localhost:4000/Spend-Stack-Best-In-Class/" rel="alternate" type="text/html" title="A Best In Class App: Spend Stack Checkup" /><published>2020-01-15T00:00:00-06:00</published><updated>2020-01-15T00:00:00-06:00</updated><id>http://localhost:4000/Spend-Stack-Best-In-Class</id><content type="html" xml:base="http://localhost:4000/Spend-Stack-Best-In-Class/">&lt;p&gt;Previously, I’ve written about this notion of what it looks like to be a &lt;a href=&quot;http://localhost:4000/A-Best-in-Class-App&quot; target=&quot;_blank&quot;&gt;best in class iOS app&lt;/a&gt;. I wanted a tangible, written down list that I could reference to gauge whether or not I was being a good platform citizen with my own apps.&lt;/p&gt;

&lt;p&gt;Now, months later - how am I doing by my own definition? Let’s take a look at where I stand. The grades below have been pulled from the Best in Class post, but some have been altered, added or left out to only include items that can be answered with a yes or no answer as it pertains to Spend Stack.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;With each subsequent release, I’ll be updating my progress.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;infoContainer&quot;&gt;
    &lt;small&gt;So far, Spend Stack is...&lt;/small&gt;
    &lt;b style=&quot;font-size: calc(36px + 1.5vw);&quot;&gt;55%&lt;/b&gt;
    &lt;small&gt;...of the way towards a best in class app (48/87).&lt;/small&gt;
    &lt;div class=&quot;centerFlex&quot;&gt;
        &lt;div class=&quot;smallInfoContainer&quot;&gt;
            &lt;b&gt;Accessibility&lt;/b&gt;
            &lt;small&gt;47% (9/19)&lt;/small&gt;
        &lt;/div&gt;
        &lt;div class=&quot;smallInfoContainer&quot;&gt;
            &lt;b&gt;Platform&lt;/b&gt;
            &lt;small&gt;39% (11/28)&lt;/small&gt;
        &lt;/div&gt;
        &lt;div class=&quot;smallInfoContainer&quot;&gt;
            &lt;b&gt;U.X.&lt;/b&gt;
            &lt;small&gt;80% (16/20)&lt;/small&gt;
        &lt;/div&gt;
        &lt;div class=&quot;smallInfoContainer&quot;&gt;
            &lt;b&gt;Design&lt;/b&gt;
            &lt;small&gt;77% (10/13)&lt;/small&gt;
        &lt;/div&gt;
        &lt;div class=&quot;smallInfoContainer&quot;&gt;
            &lt;b&gt;App Store&lt;/b&gt;
            &lt;small&gt;50% (2/4)&lt;/small&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;accessibility&quot;&gt;Accessibility&lt;/h3&gt;
&lt;p&gt;◎ Voice Over fully supported. &lt;br /&gt;
◎ Voice Control fully supported. &lt;br /&gt;
◎ Voice Over Gestures supported where needed (Magic tap, escape, etc.) &lt;br /&gt;
◎ &lt;code class=&quot;highlighter-rouge&quot;&gt;accessibilityIgnoresInvertColors&lt;/code&gt; where needed. &lt;br /&gt;
◉ Respects reduced motion and blurring where needed. &lt;br /&gt;
◉ Adaptive to all content sizes (i.e. dynamic type). &lt;br /&gt;
◉ Uses &lt;code class=&quot;highlighter-rouge&quot;&gt;readableContentGuide&lt;/code&gt; for view that are predominantly text based. &lt;br /&gt;
◎ Color contrast is 7:1 or better. &lt;br /&gt;
◉ Supported smart color inversion elegantly. &lt;br /&gt;
◉ Bar button items supply a crisp landscape and large content size image. &lt;br /&gt;
◉ Glyphs have their &lt;code class=&quot;highlighter-rouge&quot;&gt;adjustsImageSizeForAccessibilityContentSizeCategory&lt;/code&gt; set. &lt;br /&gt;
◉ Includes closed captions and audio descriptions, all images and icons have alternative text set. &lt;br /&gt;
◎ Leading and trailing margins are used for constraints to support left to right languages.  &lt;br /&gt;
◎ The User Interface appears flawlessly when tested using Double Length Pseudo-languages.  &lt;br /&gt;
◉ Using &lt;code class=&quot;highlighter-rouge&quot;&gt;NSShowNonLocalizedStrings&lt;/code&gt; yields no results.  &lt;br /&gt;
◎ If you support drag and drop, &lt;code class=&quot;highlighter-rouge&quot;&gt;UIAccessibilityLocationDescriptors&lt;/code&gt; are all set.  &lt;br /&gt;
◎ Magic taps are supported for the app’s most common functionality.  &lt;br /&gt;
◉ It uses &lt;code class=&quot;highlighter-rouge&quot;&gt;CFBundleSpokenName&lt;/code&gt; if the app’s name could potentially be mispronounced by the system (i..e CoolApp23 would be “CoolApp Twenty Three”).  &lt;br /&gt;
◎ Lastly, running the entire app through Accessibility Inspector produced no warnings and turning on Screen Curtain to navigate the app works flawlessly.  &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Accessibility: 9/19 - 47%&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;platform-technology&quot;&gt;Platform Technology&lt;/h3&gt;
&lt;p&gt;◉ Contextual interactions supported (Control previews, home shortcuts, quick actions and interaction delegate for unique experiences). &lt;br /&gt;
◎ Spotlight search and indexing support. &lt;br /&gt;
◉ Effective energy management (i.e. supports low power mode and reacts to it) &lt;br /&gt;
◎ Keyboard shortcuts have been added. The app could be used almost, or completely, with solely the use of a keyboard. &lt;br /&gt;
◎ It supports handoff on Mac (if applicable). &lt;br /&gt;
◎ Meaningful extensions are included with the app, whether it’s via a share extension, action extension, etc.&lt;br /&gt;
◎ Callback urls are supplied and documented so other apps may integrate with it (x-callback-url)/. &lt;br /&gt;
◎ Siri Intent support, when plausible: &lt;br /&gt;
◎ Siri Shortcuts also include intent phrases to help coach users &lt;br /&gt;
◎ Alternate app names are included when appropriate &lt;br /&gt;
◎ Watchface support &lt;br /&gt;
◎ If it makes sense, document sharing is supported via the file provider. &lt;br /&gt;
◉ Drag and drop has first class support: &lt;br /&gt;
    ◎ A fully fleshed out NSItemProvider exists for custom objects. &lt;br /&gt;
    ◉ Purposeful external and internal app drag support. &lt;br /&gt;
    ◉ This is used for reordering, should the app support it. &lt;br /&gt;
◎ If it makes sense, data can be shared via AirDrop. &lt;br /&gt;
◉ All tab bar images are vector .pdf images or have each corresponding size included to ensure they adapt correctly and are vended to accessibility modals properly. &lt;br /&gt;
◎ Any displayed Live Photo will animate when force touched and utilize PHLivePhotoImageView for playback. &lt;br /&gt;
    ◎ Each image also shows their system badge if available (i.e. live photo badges). &lt;br /&gt;
◉ Supports printing via &lt;code class=&quot;highlighter-rouge&quot;&gt;UIPrintInteractionController&lt;/code&gt;. &lt;br /&gt;
◎ Has Siri Shortcuts supported or donated. &lt;br /&gt;
    ◎ Rich Siri Shortcuts support with parameters.
◎ Running the Analyze function in Xcode yields no errors, warnings or suggestions. &lt;br /&gt;
◉ There are no calls to&lt;code class=&quot;highlighter-rouge&quot;&gt; UIGraphicsBeginImageContextWithOptions&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;UIGraphicsImageRenderer&lt;/code&gt; is used instead. &lt;br /&gt;
◎ Universal Links are supported, especially if your app’s content is available online. &lt;br /&gt;
◉ Modern multitasking is supported (slide over, split view and PiP). &lt;br /&gt;
◉ Multiple windows is supported on iPadOS. &lt;br /&gt;
◉ If it can be dragged, it can make a new window. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Platform Technology: 11/28 - 39%&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;user-experience&quot;&gt;User Experience&lt;/h3&gt;
&lt;p&gt;◉ Supports native “undo” and “redo” actions, typically from shaking or from the iOS 13 gestures. &lt;br /&gt;
◉ The content type of all text views and text fields is included, and the correct keyboard type is used for the current context. 
◉ The keyboard’s language identifier is integrated correctly. &lt;br /&gt;
◎  Handles the keyboard being undocked on the iPad, if views are constrained to it via an inputAccessoryView. &lt;br /&gt;
◉ It’s localized and internationalized for all territories it’s released in. &lt;br /&gt;
◉ Text tends to not truncate and it never clips but rather it’s always readable. &lt;br /&gt;
◉ All tappable interface elements are at least 44 by 44 points. &lt;br /&gt;
◉ The entire app binary is under 30 megabytes. (No source here, this is based off a multitude of data points.) &lt;br /&gt;
◉ Delete actions always are followed by a confirmation prompt. &lt;br /&gt;
◎ If your app stores rich information files like a Keynote presentation, it uses the Quick Look API to preview it. &lt;br /&gt;
◎ State restoration is implemented via &lt;code class=&quot;highlighter-rouge&quot;&gt;NSUserActivity&lt;/code&gt; APIs for scenes. &lt;br /&gt;
◉ It uses the correct audio settings, if audio can be played at all within it. &lt;br /&gt;
◉ Custom edit options are supported when text or an image is selected, if appropriate. &lt;br /&gt;
◉ The user is provided ample time to form an opinion about your app before you request a rating for it. &lt;br /&gt;
◉ The launch screen is branding free and closely resembles the first screen of the app. &lt;br /&gt;
◎ Before opening a link that could lead to another app in a web view or &lt;code class=&quot;highlighter-rouge&quot;&gt;SFSafariViewController&lt;/code&gt;, try calling &lt;code class=&quot;highlighter-rouge&quot;&gt;UIApplication’s openURL:&lt;/code&gt; with the &lt;code class=&quot;highlighter-rouge&quot;&gt;UIApplicationOpenURLOptionUniversalLinksOnlyoption&lt;/code&gt; first. &lt;br /&gt;
◉ Table views deselect selected rows in &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidAppear&lt;/code&gt; when popping back to them.&lt;br /&gt;
◎ &lt;code class=&quot;highlighter-rouge&quot;&gt;UITextInputAssistantItem&lt;/code&gt; items are used to support common tasks on iPad that are at home within the shortcuts bar. &lt;br /&gt;
◉ When performing CRUD operations on a table or collection view, you opt to use &lt;code class=&quot;highlighter-rouge&quot;&gt;performBatchUpdates:&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; instead of &lt;/code&gt;reloadData`. &lt;br /&gt;
◉ Testing for leaks and freed memory is part of your workflow, as consuming an unnecessary amount of memory and power hampers everyone. &lt;br /&gt;
◉ Navigation is clear and foolproof: 
    - Modality is used sparingly, and clearly brings them back to where they were when dismissed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;User Experience: 16/20 - 74%&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;design&quot;&gt;Design&lt;/h3&gt;
&lt;p&gt;◉ Correct system margins are used throughout the app, and no hard coded ones are used (i.e. layoutMarginsGuide, safeAreaLayoutGuide, etc.)  &lt;br /&gt;
◉ Haptic feedback is used throughout the system to complement user interactions, and they are not overdone.  &lt;br /&gt;
◉ Controller transitions feel natural and fluid. Great examples are Calendar and Photos.  &lt;br /&gt;
◉ You opt for vector assets to combat the differing resolutions and avoid any blurry assets.  &lt;br /&gt;
◉ Your content is always the focus, and you constantly challenge if that’s true throughout the development cycles.  &lt;br /&gt;
◉ No segment controls are used in toolbars.  &lt;br /&gt;
◉ There are no toolbars and tab bars in the same screen.  &lt;br /&gt;
◉ Destructive actions are the last choice in action sheets.  &lt;br /&gt;
◉ Alerts, if used, ideally have to two choices and titles have no punctuation.  &lt;br /&gt;
◎ Alerts avoid using Yes and No as choices.  &lt;br /&gt;
◉ Switches are exclusively used within a table row.  &lt;br /&gt;
◎ You aspire to ship on all of Apple’s platforms (iOS iPhone + iPad, watchOS, tvOS and macOS).  &lt;br /&gt;
◎ Lastly, your app is “jank” free. You know what this means for you.  &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Design: 10/13 - 77%&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;app-store-presence&quot;&gt;App Store Presence&lt;/h3&gt;
&lt;p&gt;◎ An App Store preview video is used. &lt;br /&gt;
◎ Its keywords and category were carefully researched. &lt;br /&gt;
◉ The app icon follows the golden grid. &lt;br /&gt;
◉ The icon follows your brand’s primary color as well. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;App Store Presence: 2/4 - 50%&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h3&gt;
&lt;p&gt;No app is perfect, and no app can check off all of the boxes you want. But it’s motivating to have a goal to shoot for, and this list is mine. When it’s all done, I’ll feel extremely proud to have my name behind Spend Stack.&lt;/p&gt;

&lt;p&gt;Here’s to creating quality software, and this list being completely checked off sooner rather than later!&lt;/p&gt;

&lt;p&gt;Until next time ✌️.&lt;/p&gt;</content><author><name>Jordan Morgan</name></author><category term="The Indie Dev Diaries" /><summary type="html">Previously, I’ve written about this notion of what it looks like to be a best in class iOS app. I wanted a tangible, written down list that I could reference to gauge whether or not I was being a good platform citizen with my own apps.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/logo.png" /><media:content medium="image" url="http://localhost:4000/assets/images/logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Xcode Preview Snips</title><link href="http://localhost:4000/Xcode-Preview-Snips/" rel="alternate" type="text/html" title="Xcode Preview Snips" /><published>2020-01-08T00:00:00-06:00</published><updated>2020-01-08T00:00:00-06:00</updated><id>http://localhost:4000/Xcode-Preview-Snips</id><content type="html" xml:base="http://localhost:4000/Xcode-Preview-Snips/">&lt;p&gt;For years, web developers have lamented how some of their workflows required them to hit two keys on macOS:&lt;/p&gt;

&lt;p&gt;Command + R&lt;/p&gt;

&lt;p&gt;And that was the only inconvenience in their path to see what the fruits of their labor would yield. Over on mobile, we’ve longed for such a minor roadblock to be the only thing in our path to refreshing our U.I. The pain was staggering - change one constraint in your layout code and then:&lt;/p&gt;

&lt;p&gt;1) Build &lt;br /&gt;
2) Run &lt;br /&gt;
3) Xcode says that your device is locked (it’s probably not) &lt;br /&gt;
4) Clean the project &lt;br /&gt;
5) You change the constant of the layout anchor, and Source Kit crashes &lt;br /&gt;
6) Throw your mac out the window &lt;br /&gt;
7) Pick your mac back up, apologize to it and start back at 1 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Look, you know where I’m going with this. If you’ve adopted SwiftUI (or even if you haven’t - view controllers apply here too) then you know Xcode Previews are more than a time saver. They are a fork in the road. There’s no going back once you get hooked on that instant feedback.&lt;/p&gt;

&lt;p&gt;Today, I’ll share a few quick snips of my go-to previews. Some of these are already well known, tweeted and blogged about - but my topic for this post is &lt;em&gt;my favorite&lt;/em&gt; things to use with &lt;code class=&quot;highlighter-rouge&quot;&gt;PreviewProvider&lt;/code&gt;, so I’ve included them anyways for posterity’s sake. Let’s take a look.&lt;/p&gt;

&lt;h3 id=&quot;previewlayout&quot;&gt;PreviewLayout&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;What does it do?&lt;/b&gt; Force a size on the given container.&lt;br /&gt;
&lt;b&gt;What’s it good for?&lt;/b&gt; Making your preview mimic a certain size that’s realistic for your view, such as in a List scenario (i.e. cells in &lt;code class=&quot;highlighter-rouge&quot;&gt;UIKit&lt;/code&gt; parlance). &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;For example, suppose we were crafting a cell type of &lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt; for our app. SwiftUI will post it up on the selected device by default (a sensible choice for the majority of development) but we can leverage &lt;code class=&quot;highlighter-rouge&quot;&gt;PreviewLayout&lt;/code&gt; to put it into a more reasonable canvas size. Notice the left versus right:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lozad rounded center-img&quot; data-src=&quot;../assets/images/pl1.jpg&quot; role=&quot;presentation&quot; srcset=&quot;../assets/images/pl1.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Further, one can impose a fixed size in addition to &lt;code class=&quot;highlighter-rouge&quot;&gt;.sizeThatFits&lt;/code&gt;, or just take the device. But since Xcode Previews is drunk with power, why not show them all?&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ContentView_Previews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PreviewProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;previews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Group&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;ContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;previewLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sizeThatFits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;previewDisplayName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.sizeThatFits&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;ContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;previewLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;320&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;previewDisplayName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.fixed(width: 320, height: 44)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;ContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;previewLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;previewDisplayName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.device&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img class=&quot;lozad rounded center-img&quot; data-src=&quot;../assets/images/pl2.png&quot; role=&quot;presentation&quot; srcset=&quot;../assets/images/pl2.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Why &lt;code class=&quot;highlighter-rouge&quot;&gt;Group&lt;/code&gt; here? &lt;code class=&quot;highlighter-rouge&quot;&gt;PreviewLayout&lt;/code&gt; doesn’t conform to &lt;code class=&quot;highlighter-rouge&quot;&gt;CaseIterable&lt;/code&gt; currently, which, as we’ll see, lends itself perfectly to &lt;code class=&quot;highlighter-rouge&quot;&gt;ForEach&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, let’s hit on some pertinent environment values to preview against.&lt;/p&gt;

&lt;h3 id=&quot;contentsizecategory&quot;&gt;ContentSizeCategory&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;What does it do?&lt;/b&gt; Specifies a content size for the preview, which drives the system’s font sizes among other things. &lt;br /&gt;
&lt;b&gt;What’s it good for?&lt;/b&gt; Ensuring your app shines with dynamic type settings. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Dynamic type, at this point, shouldn’t be a “nice to have” - I truly feel it’s a “need to have”. A cornerstone of an exceptional accessibility experience, testing for it used to be a chore - no more:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ContentView_Previews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PreviewProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;previews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;ForEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ContentSizeCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allCases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentSize&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;ContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;previewLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sizeThatFits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;previewDisplayName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contentSize&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sizeCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img class=&quot;lozad rounded center-img&quot; data-src=&quot;../assets/images/cs1.png&quot; role=&quot;presentation&quot; srcset=&quot;../assets/images/cs1.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Previews going a bit slow? Make sure you aren’t going crazy in &lt;code class=&quot;highlighter-rouge&quot;&gt;didFinishLaunchingWithOptions&lt;/code&gt; since Xcode will indeed invoke this when firing up Xcode Previews and kicking off the dynamic replacement dance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I haven’t found an elegant way to do this yet, but you can also ensure flipping from an &lt;code class=&quot;highlighter-rouge&quot;&gt;HStack&lt;/code&gt; to a &lt;code class=&quot;highlighter-rouge&quot;&gt;VStack&lt;/code&gt; in an accessibility setting (in terms of font size) looks fine, too:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@Environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sizeCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sizeCat&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//📏🐈 amirite?&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sizeCat&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;accessibility&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// VStack&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// HStack&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;colorscheme&quot;&gt;ColorScheme&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;What does it do?&lt;/b&gt; Reports the current system color scheme, or the overridden value. &lt;br /&gt;
&lt;b&gt;What’s it good for?&lt;/b&gt; Your app either Dark Modes or it doesn’t Dark Mode, this is an easy way to confirm it. &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ContentView_Previews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PreviewProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;previews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;ForEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ColorScheme&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allCases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;ContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;previewLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sizeThatFits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;previewDisplayName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colorScheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img class=&quot;lozad rounded center-img&quot; data-src=&quot;../assets/images/cscheme1.png&quot; role=&quot;presentation&quot; srcset=&quot;../assets/images/cscheme1.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;layoutdirection&quot;&gt;LayoutDirection&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;What does it do?&lt;/b&gt; Reports the system layout direction. &lt;br /&gt;
&lt;b&gt;What’s it good for?&lt;/b&gt; Does your app act a fool in right-to-left languages? Find out by piping this environment value into a preview.&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ContentView_Previews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PreviewProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;previews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;ForEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;LayoutDirection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allCases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;direction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;ContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;previewLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sizeThatFits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;previewDisplayName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layoutDirection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img class=&quot;lozad rounded center-img&quot; data-src=&quot;../assets/images/ld1.png&quot; role=&quot;presentation&quot; srcset=&quot;../assets/images/ld1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Luckily, this one is trivial to get right if your app is mostly architected with SwiftUI. But, most aren’t. So it is in 2020, some of us forgot to constrain labels to their leading and trailing edges instead of their right or left sides.&lt;/p&gt;

&lt;p&gt;Being able to inject environment variables can claim back a mountain of previously lost productivity. This truly is a feedback loop that heretofore took one to many build and runs. So, in the name of Xcode, why not inject whatever outlandish requirement that might come your way.&lt;/p&gt;

&lt;p&gt;Need to know if your app works in Sri Lanka, with dark mode on and accessibility bold text enabled? In the stone age we’d take a few trip to Settings.app but in our new age of enlightenment it’s just a few quick lines of code:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ContentView_Previews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PreviewProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;previews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;ContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;previewLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sizeThatFits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Locale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;si_LK&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legibilityWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colorScheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Some accessibility traits can’t be overriden within previews as far as I know. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;public var accessibilityInvertColors: Bool { get }&lt;/code&gt; can’t be a writable key path due to its read only nature.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;view-models&quot;&gt;View Models&lt;/h3&gt;
&lt;p&gt;View models can boost your workflow for all sorts of reasons. Separations of concerns, easier unit testing and in our case, an easy way to mock real data. We’ve all been bitten by our pixel perfect designs in Sketch that get trounced by the diversity in our user base once it’s out in the wild, so let Xcode Previews be a shield against it.&lt;/p&gt;

&lt;p&gt;Simply throw together a simple view model to reflect your actual data:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MorganFamViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Identifiable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Hashable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;twitterHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;assetName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TestData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MorganFamViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*View Model array from .plist, json, etc*/&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ContentView_Previews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PreviewProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;previews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;ForEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MorganFamViewModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;TestData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;morgan&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;ContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;morgan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;previewLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sizeThatFits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img class=&quot;lozad rounded center-img&quot; data-src=&quot;../assets/images/morgansxc.png&quot; role=&quot;presentation&quot; srcset=&quot;../assets/images/morgansxc.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;bonus-round&quot;&gt;Bonus Round&lt;/h3&gt;
&lt;p&gt;Here are a few other possibilities that didn’t quite make it in, but are helpful in their own right:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Testing selection states.&lt;/li&gt;
  &lt;li&gt;Toggling edit mode.&lt;/li&gt;
  &lt;li&gt;Popping in your vanilla &lt;code class=&quot;highlighter-rouge&quot;&gt;UIKit&lt;/code&gt; views or controllers. (Mattt wrote an excellent &lt;a href=&quot;https://nshipster.com/swiftui-previews/&quot;&gt;entry&lt;/a&gt; on this.)&lt;/li&gt;
  &lt;li&gt;Or simply remembering that you can run the app itself within previews.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, while perhaps tangentially related, remember that you can fire up &lt;a href=&quot;https://twitter.com/JordanMorgan10/status/1185565237510070272?s=20&quot;&gt;SwiftUI within Playgrounds on your iPad&lt;/a&gt;. The perfect cure for those late night spurts of creativity which used to require a trip to your mac.&lt;/p&gt;

&lt;h3 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h3&gt;
&lt;p&gt;If Xcode Previews were a car, it would be a Tesla Roadster. Blazingly efficient, fast and once you experience it you don’t want anything else. I mean, this the &lt;em&gt;the car&lt;/em&gt;. But like any vehicle or tool, you learn the ins. You learn the outs. The quirks, the hacks.&lt;/p&gt;

&lt;p&gt;And Xcode Previews has all of those things.&lt;/p&gt;

&lt;p&gt;But the time investment is minuscule in comparison to the time you save. We can lament about how they fail to refresh every now and then, toss up a painfully ambiguous error or what have you but remember - almost all of those things take less time to fix than it does for more most mature projects to build. So, harness your favorite previewing workflows (or steal the ones I’ve mentioned) and profit.&lt;/p&gt;

&lt;p&gt;Until next time ✌️.&lt;/p&gt;</content><author><name>Jordan Morgan</name></author><category term="SwiftUI" /><summary type="html">For years, web developers have lamented how some of their workflows required them to hit two keys on macOS:</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/logo.png" /><media:content medium="image" url="http://localhost:4000/assets/images/logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">On Forming Habits</title><link href="http://localhost:4000/On-Forming-Habits/" rel="alternate" type="text/html" title="On Forming Habits" /><published>2020-01-01T00:00:00-06:00</published><updated>2020-01-01T00:00:00-06:00</updated><id>http://localhost:4000/On-Forming-Habits</id><content type="html" xml:base="http://localhost:4000/On-Forming-Habits/">&lt;p&gt;Ah, the New Year 🎉!&lt;/p&gt;

&lt;p&gt;I think &lt;a href=&quot;https://www.youtube.com/watch?v=2MwhxdGAnic&quot;&gt;Death Cab for Cutie&lt;/a&gt; put it best:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;So this is the New Year / And I don’t feel any different.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ve danced with the whole “new year, new you!” concept more times than I care to count. Now, at age 31, I feel like I’ve finally arrived at a point where I can actually reflect on my year and make changes to get things done that I want to accomplish.&lt;/p&gt;

&lt;p&gt;This is big as an indie dev, because without a system in place &lt;a href=&quot;http://localhost:4000/Introducing-Spend-Stack&quot;&gt;Spend Stack&lt;/a&gt; simply would not exist. Why? Because I have three kids under six, am married, have a full time job, an indie app, a blog and, well, my own hobbies. I used to think time was too short, or there simply wasn’t enough of it. However, with some tweaks, I truly believe there is enough time in the day to live the lives that we want if we have the right habits to support it.&lt;/p&gt;

&lt;p&gt;After many mistakes, I know that if my day doesn’t have structure produced by some recurring habits, it gets lost in life’s many responsibilities. Today, I’ll share the system I have in place, and the apps that help support it, that have helped me form good habits.&lt;/p&gt;

&lt;h3 id=&quot;forgetting-goals&quot;&gt;Forgetting Goals&lt;/h3&gt;
&lt;p&gt;Years ago, if someone had told me to forget setting goals in the name of productivity, I’d call them mad. But I’ve since changed my thinking on them. As evidenced by books such as &lt;a href=&quot;https://www.amazon.com/Irresistible-Addictive-Technology-Business-Keeping/dp/1594206643&quot;&gt;Irresistible&lt;/a&gt;, &lt;a href=&quot;https://www.amazon.com/Make-Time-Focus-Matters-Every/dp/0525572422&quot;&gt;Make Time&lt;/a&gt; and &lt;a href=&quot;https://jamesclear.com/atomic-habits&quot;&gt;Atomic Habits&lt;/a&gt;, the problem I’ve found with goals is that you stay on the hamster wheel.&lt;/p&gt;

&lt;p&gt;Accomplish one, then another immediately follows.&lt;/p&gt;

&lt;p&gt;For me, I need a smooth, constant feeling of accomplishment, and goals give me peaks and valleys. I’ve certainly found I admire goals much more than I enjoy them, so I’ve taken their good aspects and tossed out the rest instead of following another hackneyed goal system I might come up with.&lt;/p&gt;

&lt;p&gt;These days, I’m all about forming a system in my life to become the person who would accomplish the goals I want to.&lt;/p&gt;

&lt;p&gt;👨🏻‍💻 Is shipping Spend Stack a goal? Then become an indie dev.&lt;br /&gt;
🏃🏻‍♂️ Is getting in shape a goal? Then become athletic.&lt;br /&gt;
📖 Is delivering conference talks a goal? Become a speaker.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;And so on.&lt;/p&gt;

&lt;p&gt;But in 2020, talk is still cheap. I need concrete methods to carry out a plan because hearing it and doing it are two different things. To that end, I’ve found that if I discover who I want to be and what major themes I want to accomplish - I can then formulate smaller goals from that information.&lt;/p&gt;

&lt;p&gt;At that point, I mostly disregard them and come up with a system to help me become the person who would be likely to routinely do those things.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The TL;DR - For me it’s less about setting goals, and more about working backward from those goals to become the kind of person who would do those things by getting “1%” better as often as I can.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here’s how it works for me.&lt;/p&gt;

&lt;h3 id=&quot;the-journal-aspect&quot;&gt;The Journal Aspect&lt;/h3&gt;
&lt;p&gt;The first step is laying the foundation. Who am I, what am I about? What’s important to me, and what do I want to be known for? To help answer those kinds of things, I have an evergreen journal entry in Day One that I read each morning to set my frame of reference:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lozad rounded center-img&quot; data-src=&quot;../assets/images/dayone.png&quot; role=&quot;presentation&quot; srcset=&quot;../assets/images/dayone.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The information in the rest of that entry simply states things I’d like to do at a more finite level. The key is that I may or may not do some of these things, as I’ve written a generous amount of tasks down. So, the idea here is that having them front and center will help me remember the person I’m trying to be. This way, I avoid only thinking in terms of arbitrary boxes I’m trying to tick off in 2020 which would only lead to yet another set of boxes to check off.&lt;/p&gt;

&lt;p&gt;To get to this quickly, I’ve set up a trivial Shortcut that opens its respective URL:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lozad rounded center-img&quot; data-src=&quot;../assets/images/dayoneURL.jpeg&quot; role=&quot;presentation&quot; srcset=&quot;../assets/images/dayoneURL.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If I read a simple document written by myself to give me that North Star (a concept I’ve talked a lot &lt;a href=&quot;http://localhost:4000/Can-You-Learn-Design&quot;&gt;about&lt;/a&gt;) for my life, I feel centered and my mind is a bit less cluttered.&lt;/p&gt;

&lt;p&gt;Once I’ve read the “big idea” though, it’s time to shift my focus to the day to day things.&lt;/p&gt;

&lt;h3 id=&quot;foundational-habits&quot;&gt;Foundational Habits&lt;/h3&gt;
&lt;p&gt;Things I need to do every single day are what I call foundational habits. This is the part where it becomes easy to make things far too ambiguous, so I’ve sectioned off foundational habits on an app by app basis, each one representing different domains of my life.&lt;/p&gt;

&lt;p&gt;Streaks is what I use to remind myself to do certain things each day of my life. I even order them in the same way I typically go about my day:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lozad rounded center-img&quot; data-src=&quot;../assets/images/streaksFH.png&quot; role=&quot;presentation&quot; srcset=&quot;../assets/images/streaksFH.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There’s a reason this has snagged one of the coveted Apple Design Awards - it’s simple to use, engaging and does one thing well. So I lean into it and try not to make it anything other than what it’s trying to do. An app that helps me do six things daily.&lt;/p&gt;

&lt;p&gt;So, ask yourself, based on the “big ideas” you have for your life - what things should you be doing, or want to do, daily?&lt;/p&gt;

&lt;h3 id=&quot;highlight-tasks&quot;&gt;Highlight Tasks&lt;/h3&gt;
&lt;p&gt;However, daily tasks are stringent by nature. We all have those moon shot goals in mind. Or, we simply have a bigger highlight (a term coined by the aforementioned Make Time book) that we want to tackle over one or more days.&lt;/p&gt;

&lt;p&gt;For this, I turn to Things 3. Here are some examples of things I’ve recently put in Things (zing!):&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lozad rounded center-img&quot; data-src=&quot;../assets/images/things.png&quot; role=&quot;presentation&quot; srcset=&quot;../assets/images/things.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clean out the entry closet, take items to Good Will or shoot hoops with my son - these are all great things that support who I want to be but aren’t likely to repetitive daily items. So, that kind of item goes here.&lt;/p&gt;

&lt;p&gt;With daily tasks and highlights accounted for, we now get into the menial tasks.&lt;/p&gt;

&lt;h3 id=&quot;familylifehusbanddadindie-tasks&quot;&gt;Family/Life/Husband/Dad/Indie Tasks&lt;/h3&gt;
&lt;p&gt;Life has so many responsibilities, and for the “remember to take out the trash” or “pay my personal property tax by December 31st” kind of things I use Reminders. The key here is that these kinds of entries are either family-related or just plain “adulting” tasks:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lozad rounded center-img&quot; data-src=&quot;../assets/images/reminders.png&quot; role=&quot;presentation&quot; srcset=&quot;../assets/images/reminders.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since its iOS 13 overhaul, I’ve found Reminders to be even more component. I’ve always been a fan, but with its new features (such as grouped tasks) I’ve been able to lean on it even more.&lt;/p&gt;

&lt;p&gt;Further, this is the &lt;em&gt;only&lt;/em&gt; tool I use for side project or Spend Stack action items.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;Because it’s beautifully limiting. With so much happening in life, I found that if I opened up super tools (such as Github Issues, Asana or something similar) I would write a novel and likely not ever return to read it again. But Reminders is short and unforgivably terse.&lt;/p&gt;

&lt;p&gt;This is a perfect set of restrictions for me, and I’d imagine it’s the same reason a lot of creative folks produce breakthroughs under a certain level of rigidity or constraints. It forces only important ideas out. For the higher-level stuff, I use Notion. For the Do X and Y stuff, I use Reminders and love it.&lt;/p&gt;

&lt;h3 id=&quot;app-recap&quot;&gt;App Recap&lt;/h3&gt;
&lt;p&gt;For reference, here’s a recap of the apps I’ve mentioned:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dayoneapp.com&quot;&gt;Day One&lt;/a&gt;: Journaling and “big picture” stuff.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://streaksapp.com&quot;&gt;Streaks&lt;/a&gt;: Foundational, every single day things.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://culturedcode.com/things/&quot;&gt;Things 3&lt;/a&gt;: “Highlight”-esque tasks.&lt;/li&gt;
  &lt;li&gt;Reminders in iOS: Family, adulting or Spend Stack centric tasks.&lt;/li&gt;
  &lt;li&gt;Shortcuts: To quickly open Day One entries.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.notion.so&quot;&gt;Notion&lt;/a&gt;: For big picture ideas and documents related to Spend Stack.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Depending on your personality type, my system may sound like the most stressful thing since taking the ACT. That’s ok, my wife fits into this category. She’s a more of a “go with the flow” gal, and she balances me out in many ways.&lt;/p&gt;

&lt;p&gt;But, if you’re laughably Type-A like yours truly, having everything in its place and place for everything is simply invigorating and habit forming. While this may appear on the surface as too many tools to use - they each are serving a simple purpose. And that removes any ambiguity from my head, which helps me form the habits I want to.&lt;/p&gt;

&lt;h3 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h3&gt;
&lt;p&gt;Over the years, I’ve discovered one truth when it comes to habits and the likelihood that I’ll achieve them - it’s about the 1% wins. As James Clear noted, the same way that investing in your 20s leads to riches through the magic of compound interest, so to do 1% habits in your day to day lead to compounded results over time.&lt;/p&gt;

&lt;p&gt;In the end, that’s all my little system does. 1% wins help me learn from the past, produce in the present and prepare for the future. If my goal is to write a book, I don’t write that down as the thing I want to do. Instead, I need to figure out what to do to become a writer. May you have an amazing 2020 in accomplishing all of your aspirations, and heres to better habits 🍻!&lt;/p&gt;

&lt;p&gt;Until next time ✌️.&lt;/p&gt;</content><author><name>Jordan Morgan</name></author><category term="The Indie Dev Diaries" /><summary type="html">Ah, the New Year 🎉!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/logo.png" /><media:content medium="image" url="http://localhost:4000/assets/images/logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Can You Learn Design?</title><link href="http://localhost:4000/Can-You-Learn-Design/" rel="alternate" type="text/html" title="Can You Learn Design?" /><published>2019-12-07T00:00:00-06:00</published><updated>2019-12-07T00:00:00-06:00</updated><id>http://localhost:4000/Can-You-Learn-Design</id><content type="html" xml:base="http://localhost:4000/Can-You-Learn-Design/">&lt;p&gt;Did you know that the version of Spend Stack I released a few short months ago is actually… &lt;em&gt;not&lt;/em&gt; the first version?&lt;/p&gt;

&lt;p&gt;It’s true that I did take &lt;a href=&quot;http://localhost:4000/Introducing-Spend-Stack&quot; target=&quot;_blank&quot;&gt;many years to design and develop it&lt;/a&gt;, and it’s also true that was due to a variety of reasons (having three kids, married, job - life stuff). But another important reason was that I was teaching myself design. If I had to guess, that’s where more than half of those years went.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;Well, because &lt;em&gt;this thing&lt;/em&gt; is how the first version of Spend Stack looked:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lozad rounded center-img&quot; data-src=&quot;../assets/images/fugly.png&quot; role=&quot;presentation&quot; srcset=&quot;../assets/images/fugly.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For real - I’m dead serious! I even had a good friend whip up a promo trailer for it:&lt;/p&gt;

&lt;style&gt;
.embed-container {
    position: relative;
    padding-bottom: 56.25%;
    height: 0;
    overflow: hidden;
    max-width: 100%;
}

.embed-container iframe,
.embed-container object,
.embed-container embed {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}
&lt;/style&gt;

&lt;div class=&quot;embed-container&quot;&gt;
	&lt;iframe src=&quot;https://player.vimeo.com/video/101882671&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This might strike you as quite surprising if you’ve ever used or have seen Spend Stack, because this is how it looks today:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lozad rounded center-img&quot; data-src=&quot;../assets/images/headerSS.jpeg&quot; role=&quot;presentation&quot; srcset=&quot;../assets/images/headerSS.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Given that, the obvious question becomes:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How did I go from something that was objectively bad design, to making the design become a strength of the app?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Today, I’m going to lay out eight core lessons I learned over the years which helped me appreciate design. They each will help answer the question of “How can indie devs learn about design?”   While I still wouldn’t consider myself a designer, I’d submit to you that it’s nearly undeniable how much better Spend Stack looks, works and functions today in comparison to what it did five years ago.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A small sidebar before we continue - what follows below lays squarely in the “this is my opinion” category. Simply put, these are the things that helped me out. Design has objective truths, but can also have many subjective opinions. My goal here is to shed light on some design practices for those indie devs out there who might be stuck with it as I was. Let me tell you, I have not figured out design. I still see a million things wrong in Spend Stack today, but I’m getting there.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That said, without further ado here are the lessons I’ve learned, and the order in which I learned them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#syci&quot;&gt;1. Something You Can’t Ignore&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#swams&quot;&gt;2. Start with a Mission Statement&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#wif&quot;&gt;3. Who’s It For?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#nswt&quot;&gt;4. Never Start with Technology&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#fnsa&quot;&gt;5. Find North Star Apps&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#aay&quot;&gt;6. Always Ask Yourself&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#hdadt&quot;&gt;7. How Does Apple Do This?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dcm&quot;&gt;8. Design Centric Materials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;syci&quot;&gt;Lesson 1: Something You Can’t Ignore&lt;/h3&gt;
&lt;p&gt;The first thing I realized about Spend Stack of yore was that the idea of the app was validated, but the design made your eyes bleed. As such, the app’s idea or functionality (which are intrinsically tied to its design) didn’t matter much.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In this lesson, when I say “design” I’m more pertaining to the “smell test”/judge-a-book-by-its-cover bits of design. Design is a function of many things - how it works, what it does and how it does it, not just how it looks. But in this lesson, it’s all about the looks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It could solve a problem, it could save you money. Nay, it could just &lt;em&gt;print&lt;/em&gt; money. It could cure diseases!&lt;/p&gt;

&lt;p&gt;But if the design sucks, nobody will care. Because this is the App Store, and not really a B.2.B. market where a terminal U.I. can still win contracts. Realizing this, I had a little saying that was in my Notion workspace for all things Spend Stack, and it simply said the following:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Design isn’t everything, but it is the only thing that matters.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And you can debate it however you want.&lt;/p&gt;

&lt;p&gt;Functionality and user experience are paramount. But to me, those are a byproduct of good design. Marketing, validating your idea, having an incredible app that does one thing well - all of those things matter. But if the app doesn’t look and feel right, people won’t give it a chance.&lt;/p&gt;

&lt;p&gt;Of course, nothing I am saying here is gospel. There are exceptions to every rule. But playing the averages, the numbers say that an ugly app that does a thing well will probably sell far less than a beautiful app that’s not really giving you much.&lt;/p&gt;

&lt;p&gt;You have to take design seriously, you have to learn things about it and you have to be critical of your own apps and figure out why or why not its design works.&lt;/p&gt;

&lt;p&gt;To make this abstract idea and make it more concrete, consider this view in the first Spend Stack that was used to create a list:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lozad rounded center-img&quot; data-src=&quot;../assets/images/fuglier.png&quot; role=&quot;presentation&quot; srcset=&quot;../assets/images/fuglier.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Why do I consider it poor design? Here are a few reasons:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1)&lt;/strong&gt; The hints at the top are already an issue. As they say, user interfaces are like a joke in that if you have to explain them, they aren’t funny (i.e. functional). &lt;br /&gt;
&lt;strong&gt;2)&lt;/strong&gt; Those hints are there because to create the new list, you had to swipe down. The gesture was hidden. &lt;br /&gt;
&lt;strong&gt;3)&lt;/strong&gt; Because of that, this view hides its main functionality - which is creating a new list. A button should have been used here. &lt;br /&gt;
&lt;strong&gt;4)&lt;/strong&gt; The colors. &lt;br /&gt;
&lt;strong&gt;5)&lt;/strong&gt; To input data for each option (such as the name, tax rate and more) you had to swipe within the middle box area. A list would easily convey the view’s affordances. &lt;br /&gt;
&lt;strong&gt;6)&lt;/strong&gt; I firmly believe being a &lt;a href=&quot;http://localhost:4000/A-Best-in-Class-App&quot; target=&quot;_blank&quot;&gt;best in class app&lt;/a&gt; is part of design on iOS. Given that, this view ignores accessibility fonts, dark mode and much more.&lt;/p&gt;

&lt;p&gt;To contrast that view, here is what it looks like today:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lozad rounded center-img&quot; data-src=&quot;../assets/images/newList.png&quot; role=&quot;presentation&quot; srcset=&quot;../assets/images/newList.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Much better. The process of redesigning Spend Stack made me appreciate how important design is. You’ve no other recourse but to consider it as much as we do software architecture or whether to use SwiftUI versus UIKit. I realized that design is something you can’t ignore. You have to think of it constantly, and users will know it when they see it.&lt;/p&gt;

&lt;p&gt;So as you go about your indie dev days, remember:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson one: Design is something you can’t ignore.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;swams&quot;&gt;Lesson 2: Start with a Mission Statement&lt;/h3&gt;
&lt;p&gt;Much like a ship wouldn’t leave port without a destination in mind, so too should indie developers define what their app will do before putting code to compiler.&lt;/p&gt;

&lt;p&gt;And this is hard to grasp for a lot of us because all apps technically start with an idea. But an idea is dangerous! Why? Because an idea is an amorphous blob of several themes, problems, aspirations, and jobs - almost all of which should be shed in the beginning phases of your app’s inception. Conversely, a mission statement proudly proclaims in one sentence what your app will do and what problem it solves.&lt;/p&gt;

&lt;p&gt;For example, let’s say you had an idea to create a podcast player. Most of us will crack open Xcode and rock and roll. Months later, we might release something that isn’t differentiated in any meaningful way, does the same thing as most other podcast players and leaves no lasting reason for why anyone should let go of other established players such as Overcast, Castro or Apple’s built-in solution.&lt;/p&gt;

&lt;p&gt;To help mitigate such an outcome - I’ve found that it often helps to bottle that excitement stemming from your idea up, and hone it down into something tangible and zeroed in. Ask yourself a few questions to develop your idea into a mission statement. Following our podcasting example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Why do I want to make a podcast player?&lt;/li&gt;
  &lt;li&gt;Can mine offer things that other podcast players do not? Even if it’s a better, or different, design that people would want?&lt;/li&gt;
  &lt;li&gt;If the answer is “not much”, what shortcomings do the current solutions have that I could make up for?&lt;/li&gt;
  &lt;li&gt;And if I can do either of these things, is it worth it to me to put the time in to see it through?&lt;/li&gt;
  &lt;li&gt;If it is, will it be a pet project or something I want to sell?&lt;/li&gt;
  &lt;li&gt;Given this information - can I make a mission statement for this app?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A mission statement is powerful - it could literally save (or make you!) thousands of dollars while preventing wasted hours along with heartache and disappointment. If you’ve got a mission statement, you know what to make, what to cut and where to go next. Plus, users will have a much better idea of what they are buying - because they’ll simply &lt;em&gt;know what it is and the problem it will solve&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I think Dale Carnegie put it best:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“And if salespeople can show us how their services or merchandise will help us solve our problems, they won’t need to sell us. We’ll buy. And customers like to feel that they are buying—not being sold.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On a marketing document I often visit, I have my mission statement front and center to remind me to consider all of my upcoming decisions against it:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lozad rounded center-img&quot; data-src=&quot;../assets/images/statement.png&quot; role=&quot;presentation&quot; srcset=&quot;../assets/images/statement.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s helped me cut features, know when to add features and so much more. You simply can’t leave home without it. Tonight, as you map out your next app or consider adding to your current one - remember:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson two: Well designed apps stem from a focused mission statement.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;wif&quot;&gt;Lesson 3: Who’s It For?&lt;/h3&gt;
&lt;p&gt;If you’ve got a mission statement, you can hunt down a persona for the app. Personas are awesome. Straight up. I’ll be the first to admit I found them a bit cheesy, only suitable for corporate board room exercises. But I just didn’t see their value, and now that I have it’s hard to think about skipping out on them.&lt;/p&gt;

&lt;p&gt;Developing a persona for your app is simply the process of mapping who your user might be. And if you know who your use might be, you can surmise all sorts of important things:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1)&lt;/strong&gt; What do you they value? &lt;br /&gt;
&lt;strong&gt;2)&lt;/strong&gt; Where do they hang out, and what do they do? &lt;br /&gt;
&lt;strong&gt;3)&lt;/strong&gt; Most importantly, does my mission statement solve problems that they currently have? &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If you’ve got a target customer with a problem you can solve, that’s a huge first step. Considering it, you can consider if they might pay for your solution.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This lesson comes with an asterisk. Maybe you don’t care about making money on your app. If that’s the case, skip on to the next lesson. But even if you don’t, it’s still important to figure out who you’re making the app for - if only for people like yourself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This phase is especially difficult because iOS apps tend to have broad appeal. Given that, they often solve  “vitamin” problems. In his book &lt;a href=&quot;https://www.goodreads.com/en/book/show/27250038-marketing-for-developers&quot;&gt;Marketing for Developers&lt;/a&gt; Justin Jackson laid out a way to consider whether or not your target customer might be willing to buy your product. He did so with a pain tolerance concept, and I don’t remember it word for word but the gist of it really resonated with me.&lt;/p&gt;

&lt;p&gt;Is the problem you’re solving a major, game-changing issue your target customers are facing? It’s a life or death problem - they’ll be willing to pay handsomely for something to take this problem off of their hands. Or, maybe it’s a bone-breaking problem. It hurts pretty bad, but they’ve made due. Maybe there is a temporary stint they’ve applied to the problem, so they want it addressed and would likely pay for it to go away.&lt;/p&gt;

&lt;p&gt;The idea keeps going down until you reach a “vitamin” level problem. These are problems that are minor nuisances, and if a person simply takes their vitamins they go away. They will likely only pay for a solution to the problem if it really speaks to them, or it solves the issue extremely well and for a small price.&lt;/p&gt;

&lt;p&gt;In addition to knowing if your target customer might pay for it, knowing who they are defines a lot of other things, too. Every app has a voice, and your target customer helps define it. If a networking error occurs, you’ll know if they would enjoy copy in the error messaging U.I. that’s funny, or if they’d prefer a more formal tone. This concept flows throughout each part of your design.&lt;/p&gt;

&lt;p&gt;Before you crack open Sketch or tab over to Figma, remember:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson three: To design well, you’ve got to have an idea of who you’re designing for.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;nswt&quot;&gt;Lesson 4: Never Start with Technology&lt;/h3&gt;
&lt;p&gt;And now we arrive at my most painful tendency as an indie dev. I’m talking, of course, about using a particular technology because it’s either new, fun or we just want to learn it.&lt;/p&gt;

&lt;p&gt;In the first version of Spend Stack, I had swipe to delete:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lozad rounded center-img&quot; data-src=&quot;../assets/images/swipeDelete.png&quot; role=&quot;presentation&quot; srcset=&quot;../assets/images/swipeDelete.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And do you know why?&lt;/p&gt;

&lt;p&gt;Because six or seven years ago (before this UX was common and built right into iOS) I found a Github project that did it. And I thought it was cool. So, I jammed it into my app.&lt;/p&gt;

&lt;p&gt;I didn’t ask any other questions or stop to think about why I was doing what I was doing. That’s a sign-in of itself. You can see where I’m going with this, but I’ve made this mistake so many times and lost so many hours because of it - I might as well be writing a diary entry right now. And it would say only this:&lt;/p&gt;

&lt;p&gt;“Define the problems first, and work your way back with the technology that solves them. Don’t start with the technology, and look for problems to solve.”&lt;/p&gt;

&lt;p&gt;The famous Steve Job &lt;a href=&quot;https://www.youtube.com/watch?v=FF-tKLISfPE&quot;&gt;rebuttle to some public criticism&lt;/a&gt; demonstrated this point succinctly. In it, he said:&lt;/p&gt;

&lt;p&gt;“One of the things I’ve always found is that you’ve got to start with the customer experience and work backward to the technology, you can’t start with the technology and figure out where you’re going to try and sell it.”&lt;/p&gt;

&lt;p&gt;It’s so hard to do, too! As developers, we are naturally drawn to new APIs and frameworks. In fact, this very reason is why W.W.D.C. is my favorite time of year. Mountains of new API! I’d even argue that it’s a very healthy sign that you love doing what you do - learning new things and picking up new ways to solve architectural issues gives us a buzz. But don’t let it cloud the design part of your brain.&lt;/p&gt;

&lt;p&gt;To everyone else it’s obvious, for developers it’s difficult - but never start with the technology, start with what the user needs and work your way back towards the tech. Because if you don’t, you’ll end up with little edges of your app that don’t fit a central theme or support the mission statement. You’ll have things that feel out of place or the user experience may feel a bit scattered.&lt;/p&gt;

&lt;p&gt;Next time you feel the urge to add one more line to your podfile, remember:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson four: Starting with technologies and looking for problems to solve in your app could hinder its design.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;fnsa&quot;&gt;Lesson 5: Find North Star Apps&lt;/h3&gt;
&lt;p&gt;You’ve likely heard the phrase, “Good artists copy, great artists steal” and it holds true in design. Much like I alluded to in my post about &lt;a href=&quot;http://localhost:4000/On-Launching-Your-Indie-App&quot;&gt;releasing your indie app&lt;/a&gt;, the concept of finding people you aspire to be like flows directly down into design and iOS apps.&lt;/p&gt;

&lt;p&gt;Find the apps that you love using, and then write down why you love them. It sounds obvious, but I hadn’t done this in the past. I had apps I loved using, but actually putting pen to paper and writing down at least three reasons why uncovered a lot of helpful direction I could use for Spend Stack.&lt;/p&gt;

&lt;p&gt;Beyond that - find the apps that Apple has given its seal of approval to. I have each Apple Design Award Winner bookmarked in Safari, and every now and then I poke around their apps just to see how they (deservedly so) got that ultimate award.&lt;/p&gt;

&lt;p&gt;Remember, it’s beyond just the looks here. A lot of apps may look good, but even less feel good. Further still, not many look &lt;em&gt;and&lt;/em&gt; feel good. Here are some starter questions you might ask yourself about apps you enjoy:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1)&lt;/strong&gt; Why does this app &lt;em&gt;feel&lt;/em&gt; good to use? &lt;br /&gt;
&lt;strong&gt;2)&lt;/strong&gt; If I wrote this app’s mission statement, what would it be and why does the app support it? &lt;br /&gt;
&lt;strong&gt;3)&lt;/strong&gt; What have other people, whose opinion I respect, said about the app and why they do or do not like it? &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;For another example directly related to Spend Stack, I made it a point to often look at &lt;a href=&quot;https://twitter.com/viticci&quot;&gt;Federico Viticci’s&lt;/a&gt; feedback on iPad apps he enjoys. Since he knows the marketplace very well, and is a power user of the platform - he’s in a good position to uncover little things that apps do well to separate them from the rest of the pack.&lt;/p&gt;

&lt;p&gt;Recently, he made mention of how he could navigate an iPad app (I believe it was Things 3 maybe?) almost entirely from the keyboard, which inspired me to make that a bar I will eventually hit for Spend Stack. It sounds like a fairly “well yeah!” observation, but with a million things happening while developing Spend Stack, I sure didn’t think of it.&lt;/p&gt;

&lt;p&gt;Next time you’re short on inspiration, remember:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson five: Reference apps that you enjoy using and figure out why you, and others, enjoy using them.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;aay&quot;&gt;Lesson 6: Always Ask Yourself&lt;/h3&gt;
&lt;p&gt;Much like having iOS apps that you aspire to be like, it also helps to have certain rules, or an ethos, to ascribe by as you develop indie apps. A north star framework, if you will. I’ve found that I often forget the simple things, and so I wrote them down and put them in a place where I’m sure to see them often.&lt;/p&gt;

&lt;p&gt;I call these little things “always ask yourself” tips. Almost all of the ones I have written down have to do with design. To me, design is like math. It doesn’t come naturally to me, but I &lt;em&gt;can&lt;/em&gt; do it - I just really need to focus a bit harder on it. So plopped right in my app delegate file are these little tips that help me frame my mind for the work I’m about to do:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lozad rounded center-img&quot; data-src=&quot;../assets/images/aaySnips.png&quot; role=&quot;presentation&quot; srcset=&quot;../assets/images/aaySnips.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s a little silly, and certainly not for everyone - but they’ve done wonders for me. It simply reminds me to focus on design, and before I chase a random thread that might lead down some rabbit hole, I should stop and consider if what I’m doing is worth it. Does X or Y help promote a cohesive design, or am I straying off the path a little?&lt;/p&gt;

&lt;p&gt;Expanding on this idea a little more, I also have fully formed documents that hold thoughts, ideas or things that I want my apps to be known for. In fact, the one I have in my Notion workspace is what my &lt;a href=&quot;http://localhost:4000/A-Best-in-Class-App&quot;&gt;best in class iOS app post&lt;/a&gt; came from:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lozad rounded center-img&quot; data-src=&quot;../assets/images/aayLarge.png&quot; role=&quot;presentation&quot; srcset=&quot;../assets/images/aayLarge.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This idea is the same reason college stadiums have inspirational quotes sitting right outside of locker rooms, or offices have pictures with motivational quotes hanging on the walls. It’s because they offer a simple proposition: reminding us what we’re about, what we want to do or where we want to go.&lt;/p&gt;

&lt;p&gt;As you go about writing your Swift or Objective-C today, remember:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson six: Always ask yourself if the work you are doing is enforcing a solid design and direction that’s been laid down for your app.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;hdadt&quot;&gt;Lesson 7: How Does Apple Do This?&lt;/h3&gt;
&lt;p&gt;This is my secret weapon hiding in plain sight. Whether you fall into the “Apple is amazing at design on iOS” or the “They lost their way on iOS 7” - I only know one thing: they are the ones who hand out A.D.A.’s, who have more context or data than anyone else, spend all day on the platform and are the subject matter experts.&lt;/p&gt;

&lt;p&gt;So look to their work when you are stuck, need inspiration or aren’t quite sure what to do. I’ve got two tips in this area:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip 1&lt;/strong&gt; - Have their apps on your home screen. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip 2&lt;/strong&gt; - Recreate scenarios you’re stuck on in their apps. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Tip 1 is fairly self-explanatory, but I’d love to toss out an example of where tip 2 came into mind for Spend Stack. As I was developing its sharing functionality, I was struggling with coming up with copy for this scenario:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A user has shared a list of theirs with someone.&lt;/li&gt;
  &lt;li&gt;The owner deletes this list, but doing so will also delete it from the other share participant’s devices.&lt;/li&gt;
  &lt;li&gt;As such - how do I alert them of this?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As I want back and forth, I realized that Notes on iOS could also have this same scenario. So, I grabbed a test device and my iPad and recreated it. Their copy had perfect messaging, and so I ended up with much of the same thing for Spend Stack. The only change I made was tweaking “ok” to a destructive “delete” (per Apple’s advice, I may add):&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lozad rounded center-img&quot; data-src=&quot;../assets/images/leaveShare.png&quot; role=&quot;presentation&quot; srcset=&quot;../assets/images/leaveShare.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Borrowing liberally from Apple is a good thing, and I’ll tell you why; Aside from being experts of the platform, the biggest advantage is that users are already comfortable with the flows, copy and designs that they’ve established. As such, if a user has used Notes before, shared a note and then later deleted it - that user will know what to expect when they do the same thing in Spend Stack. It won’t make them think.&lt;/p&gt;

&lt;p&gt;As you question some assumptions today and aren’t quite sure what to do, remember:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson seven: See how Apple has solved similar problems, designs or copy within their apps and consider using them yourself.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;dcm&quot;&gt;Lesson 8: Design Centric Materials&lt;/h3&gt;
&lt;p&gt;A common theme has hopefully emerged from the previous seven lessons, which is that these things are much less about how to use colors correctly, when to consider a certain font or what margin to use - it’s about cultivating a design mindset. By far and away, this has helped me the most.&lt;/p&gt;

&lt;p&gt;But, at the end of the day, you most certainly do need to learn about the more concrete truths and practices of design. For that purpose, I’ve found a few things that I reference quite often to develop those skills.&lt;/p&gt;

&lt;p&gt;First, the most important one. Consider it your design bible for Apple. I’m talking, of course, about the &lt;a href=&quot;https://developer.apple.com/design/human-interface-guidelines/&quot;&gt;human interface guidelines&lt;/a&gt;. If you haven’t done so yet, stop everything now and read the H.I.G. from beginning to end. Some of it, I admit, can be dry by nature - but the upside is too important to ignore.&lt;/p&gt;

&lt;p&gt;Following the H.I.G. simply means you’ll know what a great app looks and feels like, the technology available to you to make them possible and when to follow their advice to the letter and when to add a little personal spin on things. It’s simply the first and most important step to improving your iOS design skills&lt;/p&gt;

&lt;p&gt;Why does Spend Stack’s &lt;a href=&quot;https://twitter.com/JordanMorgan10/status/1156618254447722499?s=20&quot;&gt;onboarding experience&lt;/a&gt; offer three main advantages to the app, is quick to dismiss and doesn’t ask for inessential setup or configuration data upfront? Because I took cues from the H.I.G. on the matter:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;lozad rounded center-img&quot; data-src=&quot;../assets/images/higOnboard.png&quot; role=&quot;presentation&quot; srcset=&quot;../assets/images/higOnboard.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Further, here are the design resources I often visit to learn more:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://refactoringui.com&quot;&gt;Refactoring UI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://designcode.io&quot;&gt;Design+Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These may or may not help you, but find the resources that do and study them often. So before you wireframe your next view, remember:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson eight: Keep design resources close by to learn from, and keep the H.I.G. at the top of the pile.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;recap-or-tldr&quot;&gt;Recap or TL;DR&lt;/h3&gt;
&lt;p&gt;Here’s each lesson mapped out for your reference:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson one:&lt;/strong&gt; Design is something you can’t ignore.&lt;br /&gt;
&lt;strong&gt;Lesson two:&lt;/strong&gt; Well designed apps stem from a focused mission statement.&lt;br /&gt;
&lt;strong&gt;Lesson three:&lt;/strong&gt; To design well, you’ve got to have an idea of who you’re designing for.&lt;br /&gt;
&lt;strong&gt;Lesson four:&lt;/strong&gt; Starting with technologies and looking for problems to solve in your app could hinder its design.&lt;br /&gt;
&lt;strong&gt;Lesson five:&lt;/strong&gt; Reference apps that you enjoy using and figure out why you, and others, enjoy using them.&lt;br /&gt;
&lt;strong&gt;Lesson six:&lt;/strong&gt; Always ask yourself if the work you are doing is enforcing a solid design and direction that’s been laid down for your app.&lt;br /&gt;
&lt;strong&gt;Lesson seven:&lt;/strong&gt; See how Apple has solved similar problems, designs or copy within their apps and consider using them yourself.&lt;br /&gt;
&lt;strong&gt;Lesson eight:&lt;/strong&gt; Keep design resources close by to learn from, and keep the H.I.G. at the top of the pile.&lt;/p&gt;

&lt;h3 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h3&gt;
&lt;p&gt;As indie developers, we’re forced to wear many hats. And the one of design might be the most important of them all. But years ago, I foolishly resigned to the notion that I had boxed myself into being purely a developer, a code junkie - someone who could implement the good looking thing, but who would never design it.&lt;/p&gt;

&lt;p&gt;Being at the other end of the tunnel now, I think Spend Stack is a living testament that &lt;em&gt;anyone&lt;/em&gt; can learn design to some degree. Sure, many are just “born with it”, institutions can teach it and millions of other talented people have their careers built off of mastering it - but what about &lt;em&gt;us&lt;/em&gt;? The common indie dev who learned all about retain cycles and pointers instead of color theory and typography? Can we?&lt;/p&gt;

&lt;p&gt;The answer, is of course, yes.&lt;/p&gt;

&lt;p&gt;Until next time ✌️.&lt;/p&gt;</content><author><name>Jordan Morgan</name></author><category term="The Indie Dev Diaries" /><summary type="html">Did you know that the version of Spend Stack I released a few short months ago is actually… not the first version?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/logo.png" /><media:content medium="image" url="http://localhost:4000/assets/images/logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">SwiftUI: What Just Happened?</title><link href="http://localhost:4000/SwiftUI-What-Just-Happened/" rel="alternate" type="text/html" title="SwiftUI: What Just Happened?" /><published>2019-11-08T00:00:00-06:00</published><updated>2019-11-08T00:00:00-06:00</updated><id>http://localhost:4000/SwiftUI-What-Just-Happened</id><content type="html" xml:base="http://localhost:4000/SwiftUI-What-Just-Happened/">&lt;p&gt;When I created my first SwiftUI project, so much was foreign. I needed to understand how any of this was possible. There was so much that was new, so much that was different - I couldn’t stand spinning up a project without knowing how the beast came to be.&lt;/p&gt;

&lt;p&gt;After all, there is just &lt;em&gt;so&lt;/em&gt; much to talk about it in this one, tiny picture. And none of it was doable before WWDC 2019:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/swiftui.png&quot; alt=&quot;Launch Day&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So today I briefly describe how, in the context of the template single view application Xcode provides for SwiftUI, any of this is possible.&lt;/p&gt;

&lt;p&gt;Four distinct components stood out to me when surveying the default SwiftUI template from Xcode, feel free to skip to any relevant section:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#syntax&quot;&gt;The Syntax&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#protocol&quot;&gt;The Protocol&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#live&quot;&gt;The Live Previews&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#layout&quot;&gt;The Layout System&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;syntax&quot;&gt;The Syntax&lt;/h2&gt;
&lt;p&gt;We’ve got to start at the top, and for me that’s the Swift code. It’s full of little SwiftUI nuggets.&lt;/p&gt;

&lt;p&gt;This code snippet might be the poster child of why this is a Swift only framework. Take a close look, and you’ll see concepts that didn’t exist before Swift 5.1:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This was the first bit that peaked my curiosity. Syntactical sugar must’ve been at the forefront of Cupertino &amp;amp; Friends© collective hive mind, because it seems each new feature slotted into Swift supported one core idea - make it easy to write.&lt;/p&gt;

&lt;p&gt;Because without the following tweaks, SwiftUI might look something like this:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;contentBuilder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ContentBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;contentBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contentBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;returnwhat-exactly&quot;&gt;Return…what exactly?&lt;/h4&gt;
&lt;p&gt;First off, there’s no return statement. True to declarative form, saying what you need and not much else is the route SwiftUI takes (as well it should). As Nate Chandler mentions in the proposal that landed this in Swift, short closures already had implicit returns - so why not extend this to shorthand functions?&lt;/p&gt;

&lt;p&gt;And so it was, &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0255-omit-return.md&quot; target=&quot;_blank&quot;&gt;SE-0255&lt;/a&gt; is the first new tool that helps make SwiftUI, SwiftUI.&lt;/p&gt;

&lt;p&gt;Now, our would-be code sample changes for the better:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;contentBuilder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ContentBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;contentBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// No return statement&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;AnyView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contentBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;thats-some-view&quot;&gt;That’s Some View&lt;/h4&gt;
&lt;p&gt;Next, &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0244-opaque-result-types.md&quot; target=&quot;_blank&quot;&gt;SE-0244&lt;/a&gt; turns up and makes returning our views much more pragmatic. Opaque result types free us from declaring specific returns types and instead opt to return values that simply implement a protocol contract. Here, the return type will be determined by the &lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt; implementation before returning back over to SwiftUI, fully abstracted. Before, we could only achieve the reverse of that scenario (i.e. generics where the caller decides what types are bound to generic arguments).&lt;/p&gt;

&lt;p&gt;Lipso facto, all SwiftUI needs to know is that we’re returning some kind of view, who cares what though. Does it conform to the &lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt; protocol? Yeah? Awesome - we’ll take it from here.&lt;/p&gt;

&lt;p&gt;Our pre-Swift 5.1 SwiftUI code sample changes yet again:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;contentBuilder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ContentBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;contentBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// No return statement, no type erasure&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;contentBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;function-builders&quot;&gt;Function Builders&lt;/h4&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt; closure has a &lt;code class=&quot;highlighter-rouge&quot;&gt;Text&lt;/code&gt; component just chilling in there. If you consider that we have implicit returns now, that might not mean much to you. But if you’ve waded through SwiftUI’s code, you know that’s rarely the case. SwiftUI is all about composability:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;VStack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;There&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Dear Reader&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;A new proposal (which is already technically implemented, bringing about a small &lt;a href=&quot;https://forums.swift.org/t/important-evolution-discussion-of-the-new-dsl-feature-behind-swiftui/25168&quot; target=&quot;_blank&quot;&gt;point of contention&lt;/a&gt; within the community) makes this work. &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/9992cf3c11c2d5e0ea20bee98657d93902d5b174/proposals/XXXX-function-builders.md&quot; target=&quot;_blank&quot;&gt;Function builders&lt;/a&gt; are insanely meta to think about, and their name perfectly describes everything they do.&lt;/p&gt;

&lt;p&gt;The gist? A result of a function’s statements collate everything together using a builder type, and the result is one value created from the sequence.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can see this first hand by looking at the exotic return types one gets from their &lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt; property. Simply use &lt;code class=&quot;highlighter-rouge&quot;&gt;print()&lt;/code&gt; along with reflection to check out what types your views are composing to.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, our pre Swift 5.1 code sample looks like the real thing:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;property-wrappers&quot;&gt;Property Wrappers&lt;/h4&gt;
&lt;p&gt;Bindings, data marshaling, omitting values to subscribers and more are common to the framework. For our case, they aren’t shown in a default template app - but it’s worth noting all of those are driven by property wrappers. If you want to really see their power, skip everything else and read Mattt’s excellent discourse over them &lt;a href=&quot;https://nshipster.com/propertywrapper/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, that’s the syntax demystified. But it gets even more interesting when you consider the design aspect - namely, the &lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt; protocol.&lt;/p&gt;

&lt;h2 id=&quot;protocol&quot;&gt;The Protocol&lt;/h2&gt;
&lt;p&gt;This is where things start to go off the rails.&lt;/p&gt;

&lt;p&gt;For almost a decade, we’ve found new patterns, techniques and ways to achieve impressive user interfaces by utilizing M.V.C. and…..the heap. I mean, we’ve just &lt;em&gt;piled&lt;/em&gt; onto the heap.&lt;/p&gt;

&lt;p&gt;And why wouldn’t we? These were the days before &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2015/408/&quot; target=&quot;_blank&quot;&gt;Krusty&lt;/a&gt; went on and on about protocol oriented programming. Built right on the shoulders of NeXT - Objective-C and UIKit have really stood the test of time. But you are what you are.&lt;/p&gt;

&lt;p&gt;UIKit returns concrete &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; types allocated on the heap, that we extend and manipulate via its many robust properties. SwiftUI is &lt;em&gt;not&lt;/em&gt; that….at all. Really try to comprehend that and sit on it for a hot second.&lt;/p&gt;

&lt;p&gt;Think about the immediate wins you get by creating an entire user interface from the client by simply returning a bunch of Structs on the stack - allowing the underlying details to be optimized and decided by the framework. And, SwiftUI can pick up changes extremely quick by virtue of its design to know what to update and when. It’s insane, and awesome.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For example, it uses static types to optimize parts of its view graph that cannot, and will not, change.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You’ve simply got to leave &lt;code class=&quot;highlighter-rouge&quot;&gt;UIKit&lt;/code&gt; &lt;em&gt;thinking&lt;/em&gt; behind.&lt;/p&gt;

&lt;p&gt;Example: SwiftUI’s &lt;code class=&quot;highlighter-rouge&quot;&gt;frame&lt;/code&gt;. The only thing it has in common with &lt;code class=&quot;highlighter-rouge&quot;&gt;UIKit&lt;/code&gt; is its name and that it helps with sizing stuff. Everything else is different. It’s not a property on a view, it’s another function that’ll return something conforming to &lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@inlinable&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So if you tack it onto our &lt;code class=&quot;highlighter-rouge&quot;&gt;Text&lt;/code&gt; we’ve been using above, now we’ve got an entirely new type altogether.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;myType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Mirror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;reflecting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subjectType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myType&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Prints Text&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;myType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Mirror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;reflecting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subjectType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myType&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Prints ModifiedContent&amp;lt;Text, _FrameLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As one Steve Jobs would say….are you getting it!? This isn’t one type, this can be many different types!&lt;/p&gt;

&lt;p&gt;To me, this is the most exciting technical detail about SwiftUI. As one of the Swift holdouts for a number of reasons, seeing this in action made me realize what Swift has been all about since the beginning - pulling some tomfoolery that Objective-C simply can’t do to allow for more robust frameworks and unique ways in which we can use them. And I’m here for it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Notice I said “UIKit thinking”, not UIKit itself. You can pull it in every which way with representables, or even pump SwiftUI views into UIKit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;live&quot;&gt;The Live Preview&lt;/h2&gt;
&lt;p&gt;The other part of the equation is the hot swapping previews Xcode is slinging.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How does that work?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I was happy to learn more about this, because the roads would eventually lead back to my Objective-C FunTime™ days. In short, Swift is leveraging its dynamic replacement feature.&lt;/p&gt;

&lt;p&gt;Xcode knows what we’re editing, and here it’s our default &lt;code class=&quot;highlighter-rouge&quot;&gt;ContentView&lt;/code&gt; file. So why not just do delta updates?&lt;/p&gt;

&lt;p&gt;And, in fact, that’s kinda what happens. As we can edits, Xcode compiles &lt;code class=&quot;highlighter-rouge&quot;&gt;ContentView&lt;/code&gt; exclusively from the rest of the project. When it does, it injects the new implementation back into the running application via dynamic replacement.&lt;/p&gt;

&lt;p&gt;While we make edits, what our code really looks like that’s being executed is closer to this:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ContentView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Dynamically replaced in ContentView's body implementation&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;__preview_body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This happens over and over for virtually every edit we make. It’s made possible because the amount of changes we make are usually much smaller than recompiling the rest of the app. So once Xcode does its initial build, then it’s free to only cherry pick what’s new (or deleted) and reflect that within the preview.&lt;/p&gt;

&lt;p&gt;Given that - how is it still so fast? Well, it’s smart. Things like literal values are just swapped without any recompilation at all!&lt;/p&gt;

&lt;p&gt;Even more, the previews that we’re seeing are just the result of plain old SwiftUI Code (or, naturally, POSUIC for short, amirite?). As such, we can preview things in so many different contexts now. Here’s what I’ve been doing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Display every single locale available to format currency&lt;/li&gt;
  &lt;li&gt;I almost always have dark and light mode running together&lt;/li&gt;
  &lt;li&gt;Multiple text sizes to represent dynamic type options.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given that we can also bring our old components in with previews, it almost feels criminal to go back to the old way of doing things.&lt;/p&gt;

&lt;h2 id=&quot;layout&quot;&gt;The Layout&lt;/h2&gt;
&lt;p&gt;Perhaps the most encouraging aspect of SwiftUI is its no-nonsense approach to putting elements on screen. Clarity at the point of use is a common term tossed around for Swift’s API design guidelines, and I can think of no better example of that term than SwiftUI’s layout system.&lt;/p&gt;

&lt;p&gt;It’s a three step system:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1)&lt;/strong&gt; Parent proposes a size for a given child &lt;br /&gt;
&lt;strong&gt;2)&lt;/strong&gt; Child considers it, but ultimately chooses its own size &lt;br /&gt;
&lt;strong&gt;3)&lt;/strong&gt; The parent puts the child in the parent’s coordinate space &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This is how we arrive at the text being centered in default template app. The parent (i.e. the root view of the device in this case) says “I’ve got the whole screen!”, and so the &lt;code class=&quot;highlighter-rouge&quot;&gt;Text&lt;/code&gt; looks at it and considers it. In this case, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Text&lt;/code&gt; says that it’s only as big as its intrinsic content size and it can’t fill all that space. So the root view has to put it somewhere - so it plants it in the middle.&lt;/p&gt;

&lt;p&gt;But - if we added another view modifier, say &lt;code class=&quot;highlighter-rouge&quot;&gt;Frame&lt;/code&gt;, then the &lt;code class=&quot;highlighter-rouge&quot;&gt;Text&lt;/code&gt; would turn rebellious, ignore its parent - and two sheets to the wind, would use it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Frame&lt;/code&gt; size information instead. Regardless, &lt;code class=&quot;highlighter-rouge&quot;&gt;ContentView&lt;/code&gt; has what it needs and it’s placed according to the layout information on screen.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In SwiftUI, the top layer of any view with a &lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt; is said to be “layout neutral”. In short - its bounds are defined by the bounds of its body. So, &lt;code class=&quot;highlighter-rouge&quot;&gt;ContentView&lt;/code&gt; has the same bounds as the &lt;code class=&quot;highlighter-rouge&quot;&gt;Text&lt;/code&gt; view returned from its &lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt; property.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When the layout system was being developed, it seems that all of the quirks, gotchas and oddities of UIKit, Auto Layout and frame based approaches were considered, and then sent out back packing. SwiftUI’s approach is so easy - so trivial, that my wife looked over my shoulder the other night (who is a nurse with no programming experience) and was able to comprehend what a VStack and HStack were and what they meant.&lt;/p&gt;

&lt;p&gt;I liken it to setting up &lt;code class=&quot;highlighter-rouge&quot;&gt;UIBarButtonItem&lt;/code&gt; controls in UIKit. They just always do what you want and expect. I’ve never, coming up on a decade, had one issue setting up bar button items. &lt;code class=&quot;highlighter-rouge&quot;&gt;VStack&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;HStack&lt;/code&gt; have produced the same results for me as well.&lt;/p&gt;

&lt;p&gt;The combination of SwiftUI’s semantics and layout system mean I no longer reach for some catch-all sizing control (looking squarely at you, &lt;code class=&quot;highlighter-rouge&quot;&gt;UIStackView&lt;/code&gt;) and end up with exotic results or frustration. As the Apple mantra goes, it just works.&lt;/p&gt;

&lt;p&gt;Further - it can optimized down to metal with one view modifier. While I’m not certain of this, some of the rendering may be already. For example, &lt;em&gt;something&lt;/em&gt; is going down with images and more efficient decoding - as sizing the same &lt;code class=&quot;highlighter-rouge&quot;&gt;UIImage&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;UIImageView&lt;/code&gt; against the same representation in SwiftUI seemed to consume around 25% more memory.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Another freebie? SwiftUI rounds the corners of views to the nearest pixel to get crisp edges, instead of producing anti-aliased ones.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The immense control a child has over its sizing might be giving you slight anxiety, as to this point, UIKit developers have heavily relied on the parent to position controls. That’s still possible too - all one needs to reach for is &lt;code class=&quot;highlighter-rouge&quot;&gt;GeometryReader&lt;/code&gt;. Its somewhat heavy handed name aside, you can think of it as the UIKit frame of a super view. It reports sizing back to down to children to base things off of its parent’s size, should you need it.&lt;/p&gt;

&lt;p&gt;Look - this is great. Auto Layout and company are brilliant technologies. But wow - I admire it much more than I enjoy it. In my brief travels with SwiftUI, all of my layouts have been stupid simple to setup.&lt;/p&gt;

&lt;p&gt;And that’s exactly what I want out of a layout system.&lt;/p&gt;

&lt;h3 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h3&gt;
&lt;p&gt;SwiftUI is incredible. The amount of engineering that’s occurring behind the scenes is almost too staggering to comprehend at first, but once you do - seeing what SwiftUI is bringing to the proverbial table becomes clear, and it also reveals a bevy of possibilities of what you can do with it.&lt;/p&gt;

&lt;p&gt;Perhaps the best part? There are barely any compromises one has to make to utilize it. Swift, in its infancy, felt like a zero sum game. For all of its marvels, productivity could’ve been marred by compile times or the lack of ABI stability. SwiftUI, in its early lifespan, feels miles ahead of where it should be (some common complaints mostly related to declarative UI programming notwithstanding).&lt;/p&gt;

&lt;p&gt;So it is - code, build, run, navigate almost feels archaic now. I, for one, welcome our Xcode Preview and SwiftUI overlords to my development workflow.&lt;/p&gt;

&lt;p&gt;Until next time ✌️.&lt;/p&gt;</content><author><name>Jordan Morgan</name></author><category term="SwiftUI" /><summary type="html">When I created my first SwiftUI project, so much was foreign. I needed to understand how any of this was possible. There was so much that was new, so much that was different - I couldn’t stand spinning up a project without knowing how the beast came to be.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/logo.png" /><media:content medium="image" url="http://localhost:4000/assets/images/logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Animating Images using ImageIO</title><link href="http://localhost:4000/Animating-Images-Using-Image-IO/" rel="alternate" type="text/html" title="Animating Images using ImageIO" /><published>2019-09-21T00:00:00-05:00</published><updated>2019-09-21T00:00:00-05:00</updated><id>http://localhost:4000/Animating-Images-Using-Image-IO</id><content type="html" xml:base="http://localhost:4000/Animating-Images-Using-Image-IO/">&lt;p&gt;When I was a little boy, I remember that my father could often be found somewhere around the house fixing something up. Never the adroit handymen, but far from incompetent, I would happily would tag along and watch as he would patch up a leaky faucet, swap out an old flickering light bulb or tighten up a loose screw on an old towel rack.&lt;/p&gt;

&lt;p&gt;On one particularly cold November morning, I remember he started tending to an old heater that we were using to keep my parent’s room nice and toasty amidst the encroaching winter climate. A screw was loose on one of its sides, and the only screwdriver he had laying around was a rusted, weathered Phillips.&lt;/p&gt;

&lt;p&gt;The issue, of course, was that this screw was a standard flathead.&lt;/p&gt;

&lt;p&gt;Never the less, he made it work - but was quick to note to his curious sidekick (i.e. me) that this was the incorrect tool for the job. While we’d be able to complete the task, a flathead screwdriver would be far more efficient in tightening things up.&lt;/p&gt;

&lt;p&gt;Now, many decades later, I often think back to that day and the universal lesson that myself, and eventually everyone, is taught. Get the right tool for the right job. For years, we’ve been granted &lt;em&gt;some&lt;/em&gt; tools to playback .gifs in iOS.&lt;/p&gt;

&lt;p&gt;But it wasn’t until now, with iOS 13, that Apple bequeathed us with the right one, and they barely made a peep about it.&lt;/p&gt;

&lt;h2 id=&quot;blink-and-youll-miss-it&quot;&gt;Blink and You’ll Miss it&lt;/h2&gt;
&lt;p&gt;The first stop I make during beta season is the incredibly valuable API diffs that CodeWorkshop pipes out using their custom CLI tool. Starting with the diff from &lt;a href=&quot;http://codeworkshop.net/objc-diff/sdkdiffs/ios/13.0b3/ImageIO.html&quot; target=&quot;_blank&quot;&gt;iOS 13 beta 2 to 3&lt;/a&gt;, I noticed something in particular nestled within Image IO:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;CGAnimateImageAtURLWithBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hmmm. Could this be what I thought it was? A first class API for .gifs? Like many of you, I went to the source of truth to confirm any such notion. But, well…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/docImageIO.png&quot; alt=&quot;Launch List&quot; /&gt;&lt;/p&gt;

&lt;p&gt;… &lt;br /&gt;
…. &lt;br /&gt;
….. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Despite the paucity of information, I tinkered on. As it turns out, Image IO has, in fact, granted us with an excellent way to animate .gifs (and even the slicker, 24-bit variant APNGs) but it’s not without some question marks. Namely, if you’re thinking of using Apple’s flagship programming language, you’ll be slightly disappointed.&lt;/p&gt;

&lt;p&gt;As of Xcode 11 (11A420a), this isn’t even visible to Swift at all.&lt;/p&gt;

&lt;p&gt;Which means I finally I have an excuse to write a post in Objective-C!&lt;/p&gt;

&lt;h3 id=&quot;mirroring-the-api&quot;&gt;Mirroring the API&lt;/h3&gt;
&lt;p&gt;To expose this in Swift, the first question I find myself asking is should I expressly bridge over the methods and functionality nearly one to one, or would a custom object or class serve me better?&lt;/p&gt;

&lt;p&gt;For me, it’s the latter. After I confirmed how the API worked, I created a generic object that hides Image IO’s dirty laundry from Swift. To carry out such a task, we need to know what to expose - and here’s what this new API offers:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Status type&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;CGImageAnimationStatus&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Errors&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kCGImageAnimationStatus_ParameterError&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kCGImageAnimationStatus_CorruptInputImage&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kCGImageAnimationStatus_UnsupportedFormat&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kCGImageAnimationStatus_IncompleteInputImage&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kCGImageAnimationStatus_AllocationFailure&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Options for animation&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kCGImageAnimationStartIndex&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kCGImageAnimationDelayTime&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kCGImageAnimationLoopCount&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;CGImageSourceAnimationBlock&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Animation functions&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;CGAnimateImageAtURLWithBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;CGAnimateImageDataWithBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ve got a status that reports how the process is going (via a typedef’d SInt32, OSStatus), some options to express our .gif/APNG presentation preferences (a common pattern in Image IO, and Core Graphics in general) and two different sources we can provide for our .gif or APNG.&lt;/p&gt;

&lt;p&gt;To express this to Swift (or really any client, Objective-C codebases notwithstanding) we might write something like this:&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;
#import &amp;lt;CoreGraphics/CoreGraphics.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_Nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onAnimate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_Nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_Nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;NS_ASSUME_NONNULL_BEGIN&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ImageAnimator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSObject&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSUInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beginningFrameIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGFloat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delayPerFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSUInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loopCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stopPlayback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;animateImageWithData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onAnimate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onAnimate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;animationBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;animateImageAtURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onAnimate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onAnimate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;animationBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;NS_ASSUME_NONNULL_END&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, we’ve expressed a simple block to report the resulting image to assign back to our image view, along with an error that you might rely on if the resulting operation didn’t work. You’d query for any of the OSStatus errors, returned from either of the two animating functions listed, to check for such a scenario.&lt;/p&gt;

&lt;p&gt;Other than that, exposing the options as properties will take us 75% of the way there. The next part is really up to you, and that’s opening up the actual animation functions.&lt;/p&gt;

&lt;p&gt;There are several different ways to get this done, but I prefer just two dedicated methods. Feel free to vend things through a callback, dependency injection or any other pattern that will achieve much of the same thing. Regardless, simply passing our source of truth for the image is all that’s left.&lt;/p&gt;

&lt;p&gt;In Image IO’s case, this will come either from the network or locally via a chunk of data or just the location of the images via a URL. We’ve stubbed out both of these at the bottom of the header file above:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;animateImageWithData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;onAnimate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onAnimate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animationBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;animateImageAtURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;onAnimate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onAnimate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animationBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;implementation&quot;&gt;Implementation&lt;/h3&gt;
&lt;p&gt;Of course, since we are in the stone age of Objective-C today (where I &lt;a href=&quot;https://twitter.com/JordanMorgan10/status/1172882580187881472?s=20&quot; target=&quot;_blank&quot;&gt;admittedly&lt;/a&gt; love to play) where the header files roam freely, and the square brackets are treated as deity - we mustn’t forget to write the other half of our code. Thus, we now arrive at the implementation file.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Let’s not get too hasty, either. For years, the .h and .m paradigm has offered C, C++ and Objective-C many advantages . To learn more, visit your friendly neighborhood &lt;a href=&quot;https://stackoverflow.com/questions/2798202/what-are-the-benefits-and-drawbacks-of-using-header-files&quot; target=&quot;_blank&quot;&gt;Stack Overflow post&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#import &quot;ImageAnimator.h&quot;
#import &quot;ImageIO/CGImageAnimation.h&quot;
#import &amp;lt;UIKIT/UIKit.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ImageAnimator&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#pragma mark - Initializer
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instancetype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beginningFrameIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delayPerFrame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loopCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#pragma mark - Public
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;animateImageAtURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onAnimate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onAnimate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;animationBlock&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__weak&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weakSelf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animationOptionsDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;CGAnimateImageAtURLWithBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CFURLRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CFDictionaryRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGImageRef&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;_Nonnull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_Nonnull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weakSelf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stopPlayback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;animationBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;imageWithCGImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* report any relevant OSStatus if needed*/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;animateImageWithData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onAnimate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onAnimate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;animationBlock&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__weak&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weakSelf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animationOptionsDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;CGAnimateImageDataWithBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CFDataRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CFDictionaryRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGImageRef&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;_Nonnull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_Nonnull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weakSelf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stopPlayback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;animationBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;imageWithCGImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* report any relevant OSStatus if needed*/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#pragma mark - Private
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animationOptionsDictionary&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSMutableDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSMutableDictionary&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addEntriesFromDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:@{(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCGImageAnimationStartIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beginningFrameIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCGImageAnimationDelayTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delayPerFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loopCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kCGImageAnimationLoopCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loopCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is not much to see here, other than we take care to vend any options we’ve set before kicking off an animation by combining our properties into a dictionary:&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#pragma mark - Private
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animationOptionsDictionary&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSMutableDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSMutableDictionary&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addEntriesFromDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:@{(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCGImageAnimationStartIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beginningFrameIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCGImageAnimationDelayTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delayPerFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loopCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kCGImageAnimationLoopCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loopCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Of note, in my testing I seemed to experience that any .gif would stop after one complete repetition if I passed &lt;code class=&quot;highlighter-rouge&quot;&gt;kCFNumberPositiveInfinity&lt;/code&gt; as a default value for the loop count. The docs indicate that this should keep things playing - but hey, my aforementioned handyman Dad also told me Santa Clause was real too.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you’ve been away from #TeamDino for some time, the pointer to a boolean may look weird too. However, this approach can be handy in cases where we might want to assign to a boolean (or any other type) later, but lack any context to control it after the initial function invocation. This way, one can set the boolean at any point within the block by referencing another boolean’s assignment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Piping things over to Swift - we’ve now got a fully functioning class that will allow us to spread the joy of any animated .gif or APNG anywhere on the main queue. So, putting it all together:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;imageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIImageView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ImageAnimator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;imageView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;imageView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;translatesAutoresizingMaskIntoConstraints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;imageView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contentMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scaleAspectFit&lt;/span&gt;
        
        &lt;span class=&quot;nf&quot;&gt;setupImageViewConstraints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gifData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Your Gif */&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;weakSelf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;animator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;animateImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gifData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;weakImgView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weakSelf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;weakImgView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…if you ran such code, you’d enjoy a .gif that would play indefinitely. Of course, setting any of the properties on our &lt;code class=&quot;highlighter-rouge&quot;&gt;ImageAnimator&lt;/code&gt; class would let you tweak playback however you wish, such as starting at some relevant frame, applying a delay or a playback limit. And, as mentioned above, if one assigns &lt;code class=&quot;highlighter-rouge&quot;&gt;YES&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;stopPlayback&lt;/code&gt; at any point after playback has started, playback will cease.&lt;/p&gt;

&lt;h3 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h3&gt;
&lt;p&gt;The things we take for granted, right? To the end user, .gifs or any sort of animated image is commonplace within iOS. But, developers know there is more than meets the eye. Whether it was firing up a webview, piping an array of images through &lt;code class=&quot;highlighter-rouge&quot;&gt;UIImageView&lt;/code&gt; or using some other open source library, it was a bit more work than it should have been.&lt;/p&gt;

&lt;p&gt;But what you are is just as important as what you aren’t.&lt;/p&gt;

&lt;p&gt;On the surface, it’s easy to say that &lt;code class=&quot;highlighter-rouge&quot;&gt;UIImageView&lt;/code&gt; may be built for something like this. But, Image IO is &lt;em&gt;really&lt;/em&gt; built for something like this, you know? Its tooling is expressly written to efficiently operate on images, so it feels like the right tool. And in 2019, even though it takes some dancing around to expose in Swift, we can check off playing .gifs or APNG files as another problem solved by Cupertino and Friends©.&lt;/p&gt;

&lt;p&gt;Until next time ✌️.&lt;/p&gt;</content><author><name>Jordan Morgan</name></author><category term="Image IO" /><summary type="html">When I was a little boy, I remember that my father could often be found somewhere around the house fixing something up. Never the adroit handymen, but far from incompetent, I would happily would tag along and watch as he would patch up a leaky faucet, swap out an old flickering light bulb or tighten up a loose screw on an old towel rack.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/logo.png" /><media:content medium="image" url="http://localhost:4000/assets/images/logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">On Launching Your Indie App</title><link href="http://localhost:4000/On-Launching-Your-Indie-App/" rel="alternate" type="text/html" title="On Launching Your Indie App" /><published>2019-07-27T00:00:00-05:00</published><updated>2019-07-27T00:00:00-05:00</updated><id>http://localhost:4000/On-Launching-Your-Indie-App</id><content type="html" xml:base="http://localhost:4000/On-Launching-Your-Indie-App/">&lt;p&gt;Y.O.L.O.&lt;/p&gt;

&lt;p&gt;No, not the chant of today’s youth, declaring our ephemeral state of life wherein we should explore any dangerous activity our heart leads us towards. What I’m referring to is something much more sacred:&lt;/p&gt;

&lt;p&gt;You only launch once.&lt;/p&gt;

&lt;p&gt;And launch &lt;a href=&quot;https://www.spendstack.com&quot; target=&quot;_blank&quot;&gt;Spend Stack&lt;/a&gt; I did, last Thursday in fact. Therapy for me as much as it might be helpful for you - I’d love to leave a brain dump of how I went about things, in no particular order and commingled together.&lt;/p&gt;

&lt;h3 id=&quot;north-star-apps&quot;&gt;North Star Apps&lt;/h3&gt;
&lt;p&gt;I’ve always found the concept of a North Star incredibly helpful. You have a goal, you’ve got others to look towards who’ve achieved that goal - and all of that gives you clarity on future decisions.&lt;/p&gt;

&lt;p&gt;So, what were my North Star apps? After deciding early on I’d love to do a paid up front model, I looked at the developers who do that best:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.darksky.net/app&quot;&gt;Dark Sky&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.culturedcode.com&quot;&gt;Things 3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gingerlabs.com&quot;&gt;Notability&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ia.net/writer&quot;&gt;iA Writer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These apps are highly respected, are always charting and offer a premium experience with an up front buy in. These are the apps I want to be alongside of, and while it’ll take a lot of work to get there, it’s served me well to study others who’ve been doing the App Store dance extremely well.&lt;/p&gt;

&lt;p&gt;These all leverage best in class features of their respective platforms, lean into premium experiences while being cogent about it and they do a fantastic job of instilling user confidence. All of those things speak to me, and it’s a direction I’m passionate in taking Spend Stack.&lt;/p&gt;

&lt;p&gt;They are also all paid up front apps, the model I chose. Speaking of…&lt;/p&gt;

&lt;h3 id=&quot;paid-up-front&quot;&gt;Paid Up Front&lt;/h3&gt;
&lt;p&gt;Your pricing models dictates a lot of other choices you’ll make, so this was a decision I made very early on.&lt;/p&gt;

&lt;p&gt;As a one man show, I’m good with far less users who are happy with the app than several orders of magnitude more who I’ve got to convert either via I.A.P.’s or a subscription. I prefer to offer you up the whole deal, no gated content or up selling required.&lt;/p&gt;

&lt;p&gt;A lot of people said this was a huge mistake business wise, and I can certainly see why they did. Paid up front apps are becoming a thing of the past, it has the most friction for acquisition and a lot of people simply aren’t willing to pay for apps. But, it’s still my favorite way to do business in the App Store.&lt;/p&gt;

&lt;p&gt;It does mean you have a tremendous responsibility though. If someone pays for your app, you absolutely have to deliver. That’s why I talk about the notion of being a best in class app so much, because if you are paid up front - you have to be one &lt;em&gt;and&lt;/em&gt; you are expected to be one. For me, that’s motivating.&lt;/p&gt;

&lt;p&gt;Your user base is typically more involved too. People who pay money for an app are invested in them, and I don’t see this point brought up nearly enough as a major positive for paid up front business models. I’ve had several great conversations with a lot of them already, and we’ve even got a Reddit community going now to discuss the future of the app.&lt;/p&gt;

&lt;p&gt;From a support standpoint, being paid up front was critical to my initial launch success too. I replied back to each email timely, and that was a great experience all the way around. But, I was getting around 10-15 a day at about 500 downloads. Let’s say free apps yield about 10x more downloads, putting us hypothetically at 5,000 downloads if I had gone that route. I simply would’ve been drowning in email, and only a fraction of those users might be paying ones.&lt;/p&gt;

&lt;h3 id=&quot;launch-checklist&quot;&gt;Launch Checklist&lt;/h3&gt;
&lt;p&gt;Once I had a business model and an app mostly built, I started in on what a launch might look like.&lt;/p&gt;

&lt;p&gt;I’m a Type A personality if there ever was one. I got lists on lists. And those lists are categorized by date and color coded. As such, my launch strategy was rigid and calculated. Anytime I had a thought about launching, it went through this flow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Get it into Reminders straight away&lt;/li&gt;
  &lt;li&gt;Add any relevant notes to it, such as links.&lt;/li&gt;
  &lt;li&gt;Later that night, vet all of these thoughts. If they were something I wanted to actually explore, I’d pop them into a Notion doc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The aforementioned Notion doc was divided into three columns: Pre launch, launch day and post launch.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/launchList.jpeg&quot; alt=&quot;Launch List&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The things I had noted in the Launch and Post Launch sections are nothing unheard of - experiment and try new things, give search ads a spin, etc. It had notes on how to take time to craft some quality posts on the places you know of already; Product Hunt, some subreddits and similar places.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/launchDay.jpeg&quot; alt=&quot;Launch Day&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The key to each of these places is to ensure you follow the rules to the letter, plus - you know spam when you see it. Nobody wants to read it. Even if it’s a highly trafficked spot on the web, if Spend Stack didn’t seem like the right subject matter for it, I skipped it. You want things to go great at launch - but how you do it also matters in my opinion.&lt;/p&gt;

&lt;h3 id=&quot;your-apps-story&quot;&gt;Your App’s Story&lt;/h3&gt;
&lt;p&gt;One of the most useful forms of spreading the word about Spend Stack was the one that was the most genuine, less market-y thing I did. Just simply telling the &lt;a href=&quot;http://localhost:4000/introducing-spend-stack&quot;&gt;app’s story&lt;/a&gt;. I wrote about the what and why of Spend Stack, and several people outside of our normal Twitter tech circle picked it up and resonated with it.&lt;/p&gt;

&lt;p&gt;I said it before and I’ll say it again - tell your app’s story! It’s a great thing to do, and everybody wins: They get to know you, form a connection behind why it exists and then they also can see the app’s value proposition first hand.&lt;/p&gt;

&lt;p&gt;If you go back and skim my post over Spend Stack’s story you’ll see it follows this exact format:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Here’s a problem I wanted to solve&lt;/li&gt;
  &lt;li&gt;Here’s the app I made that solves it&lt;/li&gt;
  &lt;li&gt;Here’s the story about how I got the idea and how it came together&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Simply put, as an indie you’re missing out if you’re not doing this. I really believe that.&lt;/p&gt;

&lt;p&gt;Think about each W.W.D.C. from the past few years, what does the keynote end with? It ends with a touching video showcasing the story behind their products, often showing developers talking about their struggles, triumphs and their family talking about the same thing. They do it because it resonates with us - it’s like looking in the mirror.&lt;/p&gt;

&lt;p&gt;You never know who’s going to really take to your story and identify with it. Those are great customers you’ll be able to make really happy.&lt;/p&gt;

&lt;h3 id=&quot;the-preorder-thing&quot;&gt;The Preorder Thing&lt;/h3&gt;
&lt;p&gt;After announcing it, preordering just kind of happened. My timeline was setup to where if app review went fine (and it did, it was approved on the first go around) I would have two weeks until launch.&lt;/p&gt;

&lt;p&gt;I told press about it on a Monday, and then one week later I publicly announced it on Twitter. Since I was already approved, I just put it up for preorder and didn’t really think much of it.&lt;/p&gt;

&lt;p&gt;In hindsight - maybe that was super helpful for charting? I had about 80ish preorders, and while I’m not 100% this is way it works - I assume I started my launch day with those sales right off the bat. If so, that would’ve put me in a great place to start charting immediately.&lt;/p&gt;

&lt;p&gt;From there, the rest of the ~130 sales from launch day came and I guess that’s what gave me the push to end up at #14 under Productivity within the United States:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/charting.JPG&quot; alt=&quot;Charting&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-press&quot;&gt;The Press&lt;/h3&gt;
&lt;p&gt;A launch can live and die by the press. Yet, I was thankful to chart in the top 15 for Productivity for three days without hardly any of it. And, that’s not bragging - that’s regret coming through.&lt;/p&gt;

&lt;p&gt;Because if I &lt;em&gt;had&lt;/em&gt; gotten press, surely I could’ve pumped that number up much higher. I’ve got some early data to back this up, too. On recent talks with users, I simply asked “How did you hear about Spend Stack?” And every single one, &lt;em&gt;every single one&lt;/em&gt;, has said it was from a blog or website.&lt;/p&gt;

&lt;p&gt;The press can lift you up, plain and simple. Getting it, though - is hard. That’s another post in of itself, but the biggest mistake I made was reaching out far too late. I’ll touch on that more down below.&lt;/p&gt;

&lt;p&gt;In any event, the press I did get was super helpful. &lt;a href=&quot;https://9to5mac.com/2019/07/18/spend-stack-list-app-budgeting-ios/&quot;&gt;9 to 5 Mac&lt;/a&gt; picked it up, so did &lt;a href=&quot;https://appadvice.com/post/spend-stack-helps-you-keep-an-accurate-running-total-with-smart-lists/1329068268/1114042886&quot;&gt;AppAdvice&lt;/a&gt; and &lt;a href=&quot;https://club.macstories.net&quot;&gt;Club MacStories&lt;/a&gt; included it in their newsletter and some other publications whose primary audience is outside of the U.S. did too.&lt;/p&gt;

&lt;p&gt;I’ll always wonder if the press release I put out was part of that, but that’s kind of an opaque thing and hard to gauge. After all, you can’t manage what you can’t measure.&lt;/p&gt;

&lt;p&gt;Going forward, I’m taking the time to form friendships with the press so I can provide stories and news to them that provide value to their blogs/sites/etc. That’s the best outcome for each party involved.&lt;/p&gt;

&lt;h3 id=&quot;ask-the-experts&quot;&gt;Ask the Experts&lt;/h3&gt;
&lt;p&gt;I’m a huge believer in asking for advice from people who are a lot smarter than you. Going by that metric for me, that’s a ton of people.&lt;/p&gt;

&lt;p&gt;Cold emails are hard to pull off, but they can work. But you have to know &lt;em&gt;why&lt;/em&gt; they work. They work because you are genuinely reaching out to someone because you respect their domain knowledge, and you want to learn from them. They work because you are asking a pointed, specific question.&lt;/p&gt;

&lt;p&gt;I don’t want to toss out specific names since I didn’t ask if it was fine to include them in this post, but there were some people I really respect with a lot of influence who took the time to answer questions I had. It made a huge difference in terms of just straight up encouragement (app looks great!), to lessons learned (I wouldn’t do X or Y) to general advice (I had no luck with marketing this way, but did that way).&lt;/p&gt;

&lt;h3 id=&quot;diy&quot;&gt;D.I.Y.&lt;/h3&gt;
&lt;p&gt;My launch was the antithesis of the lean startup methods. While there can be enourmous value in that approach, I think it’s fine as indies to go entirely the other direction. That is, if you want something done right(ish), do it yourself.&lt;/p&gt;

&lt;p&gt;And, I did a lot of things myself 😅:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The splash page&lt;/li&gt;
  &lt;li&gt;The promo video&lt;/li&gt;
  &lt;li&gt;The music for the promo video (I made it in GarageBand)&lt;/li&gt;
  &lt;li&gt;Design, UI/UX&lt;/li&gt;
  &lt;li&gt;Writing the press release&lt;/li&gt;
  &lt;li&gt;…basically all of it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are some services I checked into that package these things up, but each one had a trade off or got me 75% of the way there. Rolling up my sleeves and doing it on my own dime took longer, but it also saved me money and ensured I came away with something I was proud of.&lt;/p&gt;

&lt;p&gt;To make this shorter, the only thing I did &lt;em&gt;not&lt;/em&gt; do myself was the app’s icon. It’s a know your strengths thing, and everything I was doing just wasn’t working. The icon is your poster child for an app, I really believe it’s money well spent to invest in it to make sure it’s done right.&lt;/p&gt;

&lt;p&gt;If I did it again, there is one other area I would outsource to someone I trust - my App Store screenshots. Right now, holistically speaking of Spend Stack, I’d wager that’s the weakest part of the package. It’s something I’m going to start improving right away.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For example, Spend Stack is internationalized to work with all currencies. But, you wouldn’t know it from my screenshots. Plus, there’s too much text.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;the-mistakes&quot;&gt;The Mistakes&lt;/h3&gt;
&lt;p&gt;Let’s chat about where I left something on the table, so to speak. The biggest mistake? Without a doubt, it was my handling of the press.&lt;/p&gt;

&lt;p&gt;I reached out to them &lt;em&gt;entirely&lt;/em&gt; too late in the process (about 8 days before launch). While some did pick it up (mentioned above), overall I didn’t give them enough time to dive into the app and form an opinion of it. If you’ve got a beta, let them know today.&lt;/p&gt;

&lt;p&gt;Take &lt;a href=&quot;https://www.flightyapp.com&quot;&gt;Flighty&lt;/a&gt;, which launched a day or two after I did. Some of the press that covered it mentioned that they had been using it for months. And, that’s what it takes to truly know an app.&lt;/p&gt;

&lt;p&gt;These writers are smart people. They need to get their hands dirty on an app to really know how they feel about it, let alone write a review of it. They are insanely busy too, with people like us all vying for their attention. It was simply  unrealistic to think anyone could’ve gone deep into Spend Stack in the timeline I provided.&lt;/p&gt;

&lt;p&gt;Next up, I launched too cheap. If anything - I would’ve launched at a higher price point. You get an iPad and iPhone app for $5, and as developers we all know it’s worth more than that. We’ve got to remember, though, it’s not us we have to convince and convey value to, it’s the consumer.&lt;/p&gt;

&lt;p&gt;The perception is already there that this should be a premium app if I’m asking you to pay me for it up front, and I don’t think developers should be afraid at all to lean into that. Especially indies. When I hit macOS, I don’t see any scenario where I would ship for less than $20.&lt;/p&gt;

&lt;p&gt;You see Things 3 doing this to perfection. As of today, their iPhone app sits at $10 and their iPad app is $20. They can do that because they’ve built up relationships and goodwill with their users. I can’t ship like that, this is just the beginning for Spend Stack, but again - that’s my North Star.&lt;/p&gt;

&lt;h3 id=&quot;the-night-before-launch&quot;&gt;The Night Before Launch&lt;/h3&gt;
&lt;p&gt;One thing that was a huge mental load off, and time saver, was to get everything for launch day all prepped the day before.&lt;/p&gt;

&lt;p&gt;So, on Wednesday night I had my launch tweet ready, my Product Hunt post was all created, every asset was ready to share and anything else I had to tend to was good to go. I just had to wake up and hit tweet, post or whatever else the verb was.&lt;/p&gt;

&lt;p&gt;It made for a relatively calm morning, where I could just sit back and take it all in. My wife made a lovely card waiting for me when I woke up, and instead of running around trying to get everything out the door - I could sit back, drink my morning quad shot (YAY BUDDY! COFFFFAY 🤘) and just read it.&lt;/p&gt;

&lt;h3 id=&quot;lastly-random-thoughts&quot;&gt;Lastly, Random Thoughts&lt;/h3&gt;
&lt;p&gt;Here are some things that were on my mind, but I didn’t know where to put them. So, herein I write a random list:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Be genuine.&lt;/em&gt; Not only because it’s a better way to sell an app, but because it’s the right thing to do. Spend Stack won’t be right for everyone and I shouldn’t try to pretend that it is. If I post about Spend Stack on an online community, I don’t make it an advert for Spend Stack. I want to talk about it, and then see how I can relate my experiences to other people there to try and help them with the challenges they are facing.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Think about them.&lt;/em&gt; If someone takes the time to type out a detailed bug report and it’s already on your radar, don’t just send back “Thanks, I know!” - take the time to let them know how much you appreciate it. And when it comes to the press, consider why they would even cover your app - what’s in it for them? Same for product choices, and really - anything else.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Make friends, not fans.&lt;/em&gt; If you’re reading this, you’re likely an indie developer or are at least interested in iOS. I don’t ever want you to be my fan, I would much rather you be my friend. If someone bought your app and tweeted about it solely because they wanted to be nice and help, be sure to let them know you’ll do the same, and mean it. There can be a lot of ego in today’s social media driven society, but I truly believe that if you are just a nice person, people will naturally gravitate towards you, what you do and will listen to what you’re saying.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;For more on that last point, I highly recommend reading the classic tome on the matter, &lt;a href=&quot;https://www.amazon.com/How-Win-Friends-Influence-People/dp/0671027034&quot;&gt;How to Win Friends and Influence People&lt;/a&gt; by Dale Carnegie.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To close things out, if I had to write a one sentence thesis on launching specifically for indies, it would go something like this:&lt;/p&gt;

&lt;p&gt;Make a fantastic, best in class app and tell its story.&lt;/p&gt;

&lt;h3 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h3&gt;
&lt;p&gt;Launching an app is a crazy, unnerving experience. You just really don’t know what’s going to happen. Especially if you are a solo indie, your time, resources and mental capacity are stretched thin. You’ve got to be persistent, insistent and consistent about your app’s success.&lt;/p&gt;

&lt;p&gt;Though there’s certainly an art to launching, I’ve yet to crack its code. Glean what you can from what worked for me, but more importantly - take note of what &lt;em&gt;didn’t&lt;/em&gt; work. Avoid those. Most importantly, if you’re launching soon, best of luck!&lt;/p&gt;

&lt;p&gt;Until next time ✌️&lt;/p&gt;</content><author><name>Jordan Morgan</name></author><category term="The Indie Dev Diaries" /><summary type="html">Y.O.L.O.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/logo.png" /><media:content medium="image" url="http://localhost:4000/assets/images/logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Introducing Spend Stack</title><link href="http://localhost:4000/Introducing-Spend-Stack/" rel="alternate" type="text/html" title="Introducing Spend Stack" /><published>2019-07-15T00:00:00-05:00</published><updated>2019-07-15T00:00:00-05:00</updated><id>http://localhost:4000/Introducing-Spend-Stack</id><content type="html" xml:base="http://localhost:4000/Introducing-Spend-Stack/">&lt;p&gt;Every app has a story.&lt;/p&gt;

&lt;p&gt;You’ve heard this before, right? Apple pushes it in their messaging, the press lets you know you should tell yours and general marketing revolves around it.&lt;/p&gt;

&lt;p&gt;But, each app also needs to solve a problem that’s a legitimate pain point for someone.  After several years - I’d love to tell you my app’s story and the problem it solved for me.&lt;/p&gt;

&lt;p&gt;Today, I’m pleased to &lt;em&gt;finally&lt;/em&gt; introduce the world to &lt;a href=&quot;https://apps.apple.com/app/spend-stack-smarter-lists/id1329068268&quot;&gt;Spend Stack&lt;/a&gt;. It’s a list app that can keep an accurate total cost of its items that syncs to your devices, plus you can share and collaborate with others on any list you make. Live edits and all.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/hero.png&quot; alt=&quot;Spend Stack&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-elevator-pitch&quot;&gt;The Elevator Pitch&lt;/h3&gt;
&lt;p&gt;About five years ago, my wife and I started to budget in all cash. We meticulously split up our money into separate categories each pay period and we still do to this day.&lt;/p&gt;

&lt;p&gt;Spend Stack was born when we visited the grocery store during our first crack at this, and we found that it was mostly guesswork, difficult or not possible to keep a running total of our stuff. It’s a little aggravating if you walked into the store with $200 but your bill tallied about $250. If you live in the states, this is even more difficult because tax isn’t applied to the prices you see on the shelf.&lt;/p&gt;

&lt;p&gt;So, I wanted to keep a to-the-penny running total. That meant local sales tax included, pricing by weight, applying discounts via a percentage or fixed amount, etc.&lt;/p&gt;

&lt;p&gt;You can see where this is going - and this was the first reason I built Spend Stack. This is what our grocery list looks like today, and I have no problem keeping track of what something costs with tax, priced by weight and with a discount (as seen here):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/groceries.png&quot; alt=&quot;Grocery List&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At first, I found the problem very concrete, yet each solution I mocked up was entirely too abstract. Over time, even as an autodidact designer, I was able to hone it in to focus on the problem over anything else (another blog post in of itself). With each early, hacked together version we’d discover a different need or obstacle.&lt;/p&gt;

&lt;p&gt;My wife wanted to add pictures to items so I would finally stop buying the wrong Chobani (sorry, Jansyn!), so I’d add it in. Tech like CloudKit was naturally included by other factors - such as me not wanting account creation, but also needing lists synced across devices along with the ability to share and collaborate on them with others. Each validated need led to me cracking open Xcode and slotting it in:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ipadShare.png&quot; alt=&quot;iCloud Share&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The list (no pun intended) goes on.&lt;/p&gt;

&lt;h3 id=&quot;the-beta-days&quot;&gt;The Beta Days&lt;/h3&gt;
&lt;p&gt;As time went on and I showed it to friends, and those friends tested it out - one thing became clear. A lot of people had a use for a running total list app, but they all used it a bit differently. Some really leaned into the accurate running total, some just wanted to keep a simple one without taxes, discounts, or anything else. What I ended up building was something that could not only adapt to those needs, but try to excel at them.&lt;/p&gt;

&lt;p&gt;Today, using the tags system, optional checkbox support and more people make far more than the obvious grocery list. It’s been used for birthday lists, Christmas lists, vacation budget planning and more. A family friend even had her daughter track all the money she made doing chores to save up for a pet hamster, checking off tasks as she did them ❤.&lt;/p&gt;

&lt;p&gt;It’s changed a lot over the years, and at times I’ve just been stuck analyzing it inside and out. Paralysis by analysis. But I’ve always believed that high achievement takes place within the framework of high expectations. And my own were high.&lt;/p&gt;

&lt;p&gt;Recently, I looked at it, and I thought, “Hmmm, I think this is &lt;em&gt;kinda&lt;/em&gt; good now”. So, I just hit the submit button. I arrived at a spot where I was actually “proud” of it. For the developer minded reader, here are some things I am personally happy about:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Full dynamic type support (before it was free with SwiftUI!)&lt;/li&gt;
  &lt;li&gt;Every size class and orientation is supported&lt;/li&gt;
  &lt;li&gt;Smaller things, like including glyphs for large content size items, à la tapping and holding on a tool bar item when large content sizes are active&lt;/li&gt;
  &lt;li&gt;Seamless (I realize that’s overused, but it’s earned here) syncing between devices&lt;/li&gt;
  &lt;li&gt;Full CloudKit sharing, this was not trivial to do&lt;/li&gt;
  &lt;li&gt;No use of &lt;code class=&quot;highlighter-rouge&quot;&gt;reloadData&lt;/code&gt;, everything is diffed and batch reloaded (&lt;em&gt;also&lt;/em&gt; before it was free with SwiftUI)&lt;/li&gt;
  &lt;li&gt;Undo and redo support for &lt;em&gt;nearly&lt;/em&gt; for every single CRUD action&lt;/li&gt;
  &lt;li&gt;And I think it looks okay&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As an aside, you can see that SwiftUI could be a time saver for me in the future. Hair Force One himself said as much when I cold emailed him about Spend Stack, and that was a fun moment for me:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/hfo.jpg&quot; alt=&quot;Hair Force One&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I basically did the things that draw me to apps I pay for. It’s a one time purchase, you can tell the developer cares and is unlikely to abandon it, it works on iPhone and iPad, etc.&lt;/p&gt;

&lt;h3 id=&quot;the-human-connection&quot;&gt;The Human Connection&lt;/h3&gt;
&lt;p&gt;To close out the story aspect, I think it’s fun to show how, that to my wife and I, Spend Stack &lt;em&gt;truly&lt;/em&gt; feels like part of the family. Let me explain.&lt;/p&gt;

&lt;p&gt;Back in 2013, I was a ball of anxiety when my wife was at the hospital about to deliver our oldest, Bennett. As I paced back and forth, she surprised me with what she said next:&lt;/p&gt;

&lt;p&gt;“Try getting out your laptop, work on Spend Stack and relax until my contractions kick in.”&lt;/p&gt;

&lt;p&gt;So, I did (and it did chill me out….a &lt;em&gt;little&lt;/em&gt;. Here’s my genuine “this is fine” face):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/bennyDev.jpg&quot; alt=&quot;Developing at the hospital 2013&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fast forward to 2016, and I was no more brave at the prospect of my wife delivering a human being that was currently nestled inside of her abdomen. But, until my middle child Remy was ready to arrive, it was the same story. We didn’t snap a picture of it that year, but looking back I found this one of Jansyn checking out the latest build in between naps at the hospital a few days postpartum:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/remyDev.jpeg&quot; alt=&quot;Developing at the hospital 2016&quot; /&gt;&lt;/p&gt;

&lt;p&gt;…and in 2018 with my daughter Baylor:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/baylorDev.jpg&quot; alt=&quot;Developing at the hospital 2018&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It actually became a funny tradition between my wife and I. Of course, there were much bigger things to worry about once the contractions started. But until then, instead of watching me slowly devolve into a crazy, amped up and entirely too anxious husband, she gently suggested to code until our little ones decided to start the action. She’s a good one ❤.&lt;/p&gt;

&lt;p&gt;So it’s funny, this post is an end cap of sorts. We don’t plan on having more children, so the days of coding Spend Stack until my wife starts having contractions are behind me. At the same time, it’s finally releasing! Life is funny like that, with one chapter ending and another beginning.&lt;/p&gt;

&lt;h3 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h3&gt;
&lt;p&gt;So that’s my app’s story.&lt;/p&gt;

&lt;p&gt;It feels so good to launch. I can’t emphasis that enough. After years of hard work, it all culminates into this. I’m proud of it, and that was one of the biggest things I wanted out of the project. Something to put my name on and &lt;em&gt;really&lt;/em&gt; own it.&lt;/p&gt;

&lt;p&gt;Your own app has a story too. And, if you’re not telling it, I think you’re missing out. I’d love to hear it, at the very least. There is always a human connection behind the pixels on your screen that gets lost in translation from idea to App Store - and for me it’s refreshing to discover them.&lt;/p&gt;

&lt;p&gt;Thanks for hearing about my own connection behind Spend Stack, and it’s live &lt;a href=&quot;https://www.spendstack.com&quot; target=&quot;_blank&quot;&gt;here if you’d like to try it out yourself.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Until next time ✌️.&lt;/p&gt;</content><author><name>Jordan Morgan</name></author><category term="The Indie Dev Diaries" /><summary type="html">Every app has a story.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/logo.png" /><media:content medium="image" url="http://localhost:4000/assets/images/logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>