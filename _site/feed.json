{
    "version": "https://jsonfeed.org/version/1",
    "title": "Swiftjective-C",
    "description": "Swiftjective-C is a periodical over modern iOS software engineering. It houses tactful discussions over Swift, Objective-C and developing high quality apps while peering into various frameworks to see what makes them tick.\n",
    "home_page_url": "http://localhost:4000/",
    "feed_url": "http://localhost:4000/feed.json",
    "items": [
      {
            "id": "http://localhost:4000/uigraphicsimagerenderer",
            "url": "http://localhost:4000/uigraphicsimagerenderer/",
            "title": "UIGraphicsImageRenderer",
            "content_html": "<p>The history of photography is rife with interesting stories of how the medium developed. Among them, digital photography is one of the more exciting bits of its history. It’s still quite a nascent craft, with its history tracing back to as recently as 1957 when the fine folks at the National Institute of Standards and Technology slapped a photo into computer memory.</p>\n\n<p>The translation from the analog to the digital was an inflection point. We’ve experienced a similar shift on iOS starting with iOS 10, though many engineers have yet to discover or adopt the latest innovation for drawing images — <code class=\"highlighter-rouge\">UIGraphicsImageRenderer</code>.</p>\n\n<h3 id=\"setting-the-cgcontext\">Setting the (CG)Context</h3>\n<p>Core Graphics, based on the Quartz drawing engine, has provided iOS developers with lightweight 2D rendering capabilities since iOS 2. Its utility knows almost no bounds, as image masking, PDF document creation, parsing, and other similar functions are baked right in making it a no nonsense choice for any sort of drawing task.</p>\n\n<p>For that and many other reasons, if one hits the Googles on how to create an image from something on screen they’ll likely end up with something like this:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">drawSize</span> <span class=\"o\">=</span> <span class=\"kt\">CGSize</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n\n<span class=\"kt\">UIGraphicsBeginImageContext</span><span class=\"p\">(</span><span class=\"n\">drawSize</span><span class=\"p\">)</span>  \n<span class=\"k\">let</span> <span class=\"nv\">ctx</span> <span class=\"o\">=</span> <span class=\"kt\">UIGraphicsGetCurrentContext</span><span class=\"p\">()</span><span class=\"o\">!</span>\n\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"nf\">setFillColor</span><span class=\"p\">(</span><span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"o\">.</span><span class=\"n\">cgColor</span><span class=\"p\">)</span>  \n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"nf\">fill</span><span class=\"p\">(</span><span class=\"kt\">CGRect</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"n\">drawSize</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"n\">drawSize</span><span class=\"o\">.</span><span class=\"n\">height</span><span class=\"p\">))</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">img</span> <span class=\"o\">=</span> <span class=\"kt\">UIGraphicsGetImageFromCurrentImageContext</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<p>And it works, so we move on. Though, there are several valid reasons to pump the breaks:</p>\n\n<ul>\n  <li>UIGraphicsBegin/EndImageContext are sRGB only (sorry p3 color gamut).</li>\n  <li>It was before the age of blocks, which are common throughout Foundation, UIKit and virtually every framework on iOS.</li>\n  <li>Extensibility is possible, though sometimes a non trivial task.</li>\n</ul>\n\n<p>Given its age, it’s not a shocker to say Core Graphics provides an API that’s less than ideal too many of today’s standards. Though Swift’s syntactical sugar prowess has softened the call sites to Core Graphics code over many projects, it still is what it is — a C based API built for simpler times.</p>\n\n<p>In contrast, <code class=\"highlighter-rouge\">UIGraphicsImageRenderer</code> is built for tomorrow in mind:</p>\n\n<ul>\n  <li>It’s automagically fully color managed. For example, on the beautiful 9.7 inch iPad pro you’ll get a wide color context.</li>\n  <li>It’s a first class object.</li>\n  <li>It manages its context lifetime, unlocking some memory optimizations on the house from Cupertino &amp; Friends©.</li>\n  <li>The former implicitly means that it caches its context, meaning reuse is an efficient operation as opposed to using new renderers.</li>\n</ul>\n\n<h3 id=\"gaining-more-cgcontext\">Gaining More (CG)Context</h3>\n\n<p>Initializing and keeping a reference to a renderer is a solid start:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">renderer</span> <span class=\"o\">=</span> <span class=\"kt\">UIGraphicsImageRenderer</span><span class=\"p\">(</span><span class=\"nv\">size</span><span class=\"p\">:</span> <span class=\"kt\">CGSize</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>From there, the relevant parallel from the old way of doing things to the preferred, Apple approved way would be image renderer’s closure based functions for creating an image:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">image</span><span class=\"p\">(</span><span class=\"nv\">actions</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"kt\">UIGraphicsImageRendererContext</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">UIImage</span>\n</code></pre></div></div>\n\n<p>To compare apples to image renderers, one could create the same image as mentioned above from the legacy Core Graphics method by doing this:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">img</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">image</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">)</span> <span class=\"k\">in</span>  \n    <span class=\"k\">let</span> <span class=\"nv\">size</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"o\">.</span><span class=\"n\">bounds</span><span class=\"o\">.</span><span class=\"n\">size</span>  \n    <span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"o\">.</span><span class=\"nf\">setFill</span><span class=\"p\">()</span>  \n    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"nf\">fill</span><span class=\"p\">(</span><span class=\"kt\">CGRect</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">height</span><span class=\"p\">))</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The hard work of what’s happening here has always been abstracted away by Core Graphics since day one, but now it’s more honed in to the point where we simply spit out some drawing instructions within a block.</p>\n\n<p>The renderer also exposes convenient access to getting a hold of <code class=\"highlighter-rouge\">NSData</code> of resulting images as well:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">actions</span><span class=\"p\">:(</span><span class=\"kt\">UIGraphicsImageRendererContext</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">)</span> <span class=\"k\">in</span>  \n    <span class=\"k\">let</span> <span class=\"nv\">size</span> <span class=\"o\">=</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"o\">.</span><span class=\"n\">bounds</span><span class=\"o\">.</span><span class=\"n\">size</span>  \n    <span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"n\">blue</span><span class=\"o\">.</span><span class=\"nf\">setFill</span><span class=\"p\">()</span>  \n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"nf\">fill</span><span class=\"p\">(</span><span class=\"kt\">CGRect</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">width</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">height</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">))</span>  \n<span class=\"p\">}</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">imageJPEGData</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"nf\">jpegData</span><span class=\"p\">(</span><span class=\"nv\">withCompressionQuality</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">actions</span><span class=\"p\">:</span> <span class=\"n\">actions</span><span class=\"p\">)</span>\n<span class=\"k\">let</span> <span class=\"nv\">imagePNGData</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"nf\">pngData</span><span class=\"p\">(</span><span class=\"nv\">actions</span><span class=\"p\">:</span> <span class=\"n\">actions</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>In each code sample, the typealiased <code class=\"highlighter-rouge\">DrawingActions</code> closure returns to us an instance of <code class=\"highlighter-rouge\">UIGraphicsImageRendererContext</code>. Using it we gain access high-level drawing functions. Though Apple clearly states “higher level” drawing functions, don’t think of it as a crutch. There is support for most drawing tasks, such as utilizing blend modes by leveraging <code class=\"highlighter-rouge\">CGBlendValue</code>:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">image</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">image</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">)</span> <span class=\"k\">in</span>  \n    <span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"n\">blue</span><span class=\"o\">.</span><span class=\"nf\">setFill</span><span class=\"p\">()</span>  \n    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"nf\">fill</span><span class=\"p\">(</span><span class=\"kt\">CGRect</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">140</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">140</span><span class=\"p\">))</span>\n\n    <span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"n\">yellow</span><span class=\"o\">.</span><span class=\"nf\">setFill</span><span class=\"p\">()</span>  \n    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"nf\">fill</span><span class=\"p\">(</span><span class=\"kt\">CGRect</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">140</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">140</span><span class=\"p\">),</span> <span class=\"nv\">blendMode</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">luminosity</span><span class=\"p\">)</span>  \n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>That said, you may be left missing the drawing functionality you might’ve thought left behind from the traditional context.</p>\n\n<p>For example, filling in an ellipses still requires a R.O.C.G.C. (regular old Core Graphics Context, obviously). To fill out the drawing functionality (pun somewhat intended), an image renderer context has one available.</p>\n\n<p>Take note of the last two lines, where the <code class=\"highlighter-rouge\">cgContext</code> allows us to fill out the circle:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">img</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">image</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">)</span> <span class=\"k\">in</span>  \n    <span class=\"k\">let</span> <span class=\"nv\">size</span> <span class=\"o\">=</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"o\">.</span><span class=\"n\">bounds</span><span class=\"o\">.</span><span class=\"n\">size</span>\n\n    <span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"n\">darkGray</span><span class=\"o\">.</span><span class=\"nf\">setStroke</span><span class=\"p\">()</span>  \n    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"nf\">stroke</span><span class=\"p\">(</span><span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"o\">.</span><span class=\"n\">bounds</span><span class=\"p\">)</span>\n\n    <span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"n\">blue</span><span class=\"o\">.</span><span class=\"nf\">setFill</span><span class=\"p\">()</span>  \n    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"nf\">fill</span><span class=\"p\">(</span><span class=\"kt\">CGRect</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">width</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">height</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n    <span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"n\">yellow</span><span class=\"o\">.</span><span class=\"nf\">setFill</span><span class=\"p\">()</span>  \n    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">cgContext</span><span class=\"o\">.</span><span class=\"nf\">fillEllipse</span><span class=\"p\">(</span><span class=\"nv\">in</span><span class=\"p\">:</span> <span class=\"kt\">CGRect</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">51</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"mi\">51</span><span class=\"p\">,</span> <span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">))</span>  \n    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">cgContext</span><span class=\"o\">.</span><span class=\"nf\">rotate</span><span class=\"p\">(</span><span class=\"nv\">by</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">)</span>  \n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"giving-a-renderer-more-cgcontext\">Giving a Renderer More (CG)Context</h3>\n<p>I really need to stop with the (CG)Context bit, but I feel too invested at this point so please just excuse me 🤠.</p>\n\n<p>You have noticed that a graphics renderer will also accept a <code class=\"highlighter-rouge\">UIGraphicsImageRendererFormat</code>object into two of its four available initializers:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">size</span><span class=\"p\">:</span> <span class=\"kt\">CGSize</span><span class=\"p\">,</span> <span class=\"nv\">format</span><span class=\"p\">:</span> <span class=\"kt\">UIGraphicsImageRendererFormat</span><span class=\"p\">)</span>  \n<span class=\"kd\">public</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">bounds</span><span class=\"p\">:</span> <span class=\"kt\">CGRect</span><span class=\"p\">,</span> <span class=\"nv\">format</span><span class=\"p\">:</span> <span class=\"kt\">UIGraphicsImageRendererFormat</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>This rendering format has a few options to aid in further specifying the intent of your resulting drawing operations. It also has a useful <code class=\"highlighter-rouge\">bounds </code>property we’ve been using in the previous code samples that’s derived from its associated graphics context. Using this formatter one can tweak opaque or scale preferences, among other things.</p>\n\n<p>For example, <code class=\"highlighter-rouge\">CALayer</code> and its A8 backing store format was introduced in iOS 12 and provides developers with free memory optimizations. If you’re certain, for example, that you’re drawing wide color content <em>using</em> sRGB colors, you can have the renderer optimize for that since the backing store would otherwise be larger to accommodate a larger color range rather than just 0 to 1:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// iOS 10/11</span>\n<span class=\"k\">let</span> <span class=\"nv\">format</span> <span class=\"o\">=</span> <span class=\"kt\">UIGraphicsImageRendererFormat</span><span class=\"p\">()</span>  \n<span class=\"n\">format</span><span class=\"o\">.</span><span class=\"n\">prefersExtendedRange</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n\n<span class=\"c1\">// iOS 12</span>\n<span class=\"k\">let</span> <span class=\"nv\">format</span> <span class=\"o\">=</span> <span class=\"kt\">UIGraphicsImageRendererFormat</span><span class=\"p\">()</span>  \n<span class=\"n\">format</span><span class=\"o\">.</span><span class=\"n\">preferredRange</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">standard</span> <span class=\"c1\">// Turn off iOS 12 optimization</span>\n</code></pre></div></div>\n\n<p>Many of these decisions will likely be tied to the current trait collection, so it stands to reason that the renderer format can also be fetched on a per trait collection basis as well.</p>\n\n<p>No need to mince in my own words here, Apple’s documentation explains this very well:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Returns a format optimized for the specified trait collection, taking into account properties such as displayScale and displayGamut.</span>\n<span class=\"c1\">// Traits that are not specified will be ignored, with their corresponding format properties defaulting to the values in preferredFormat.  </span>\n<span class=\"kd\">public</span> <span class=\"kd\">convenience</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"k\">for</span> <span class=\"nv\">traitCollection</span><span class=\"p\">:</span> <span class=\"kt\">UITraitCollection</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>No worries if you opt to forgo any of this, as UIKit provides sensible default values for you should you not provide explicit ones. As such, if you do nothing, UIKit gives you the resulting format from its factory method, <code class=\"highlighter-rouge\">defaultFormat</code> — which provides a format configured for the highest fidelity possible as supported by the device it’s executed on.</p>\n\n<p>Take care to make this choice upfront, however. If you want to configure things, do it at your renderer’s initialization point as the formatter itself holistically represents immutable configurations that it will always use during drawing operations.</p>\n\n<p>All of this hopefully should remind you how extensible and flexible an image renderer can be. For example, hanging a quick extension off of any view to create a circle avatar would be painless and performant (as performant as using <code class=\"highlighter-rouge\">cornerRadius</code> can really be, that is) since one could reuse the same renderer and its context:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">rendererKey</span><span class=\"p\">:</span> <span class=\"kt\">UInt8</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">extension</span> <span class=\"kt\">UIView</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">renderer</span><span class=\"p\">:</span> <span class=\"kt\">UIGraphicsImageRenderer</span><span class=\"o\">!</span> <span class=\"p\">{</span>  \n        <span class=\"k\">get</span> <span class=\"p\">{</span>  \n            <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">rendererInstance</span> <span class=\"o\">=</span> <span class=\"nf\">objc_getAssociatedObject</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">rendererKey</span><span class=\"p\">)</span> <span class=\"k\">as?</span> <span class=\"kt\">UIGraphicsImageRenderer</span> <span class=\"k\">else</span> <span class=\"p\">{</span>  \n                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">renderer</span> <span class=\"o\">=</span> <span class=\"kt\">UIGraphicsImageRenderer</span><span class=\"p\">(</span><span class=\"nv\">bounds</span><span class=\"p\">:</span> <span class=\"n\">bounds</span><span class=\"p\">)</span>  \n                <span class=\"k\">return</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">renderer</span>  \n            <span class=\"p\">}</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">rendererInstance</span>\n        <span class=\"p\">}</span>  \n        <span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"n\">newValue</span><span class=\"p\">)</span> <span class=\"p\">{</span>  \n            <span class=\"nf\">objc_setAssociatedObject</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">rendererKey</span><span class=\"p\">,</span> <span class=\"n\">newValue</span><span class=\"p\">,</span> <span class=\"n\">objc_AssociationPolicy</span><span class=\"o\">.</span><span class=\"kt\">OBJC_ASSOCIATION_RETAIN</span><span class=\"p\">)</span>  \n        <span class=\"p\">}</span>  \n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">circleImageView</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">UIImageView</span> <span class=\"p\">{</span>  \n        <span class=\"k\">let</span> <span class=\"nv\">img</span><span class=\"p\">:</span><span class=\"kt\">UIImage</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">image</span> <span class=\"p\">{</span> <span class=\"n\">ctx</span> <span class=\"k\">in</span>  \n            <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"nv\">in</span><span class=\"p\">:</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">cgContext</span><span class=\"p\">)</span>  \n        <span class=\"p\">}</span>\n\n        <span class=\"k\">let</span> <span class=\"nv\">imageView</span><span class=\"p\">:</span><span class=\"kt\">UIImageView</span> <span class=\"o\">=</span> <span class=\"kt\">UIImageView</span><span class=\"p\">(</span><span class=\"nv\">image</span><span class=\"p\">:</span> <span class=\"n\">img</span><span class=\"p\">)</span>  \n        <span class=\"n\">imageView</span><span class=\"o\">.</span><span class=\"n\">frame</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"o\">.</span><span class=\"n\">bounds</span>  \n        <span class=\"n\">imageView</span><span class=\"o\">.</span><span class=\"n\">clipsToBounds</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>  \n        <span class=\"n\">imageView</span><span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">cornerRadius</span> <span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"o\">.</span><span class=\"n\">bounds</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nf\">rounded</span><span class=\"p\">()</span>  \n        <span class=\"k\">return</span> <span class=\"n\">imageView</span>  \n    <span class=\"p\">}</span>  \n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Generate a circle image and image view of any view instance  </span>\n<span class=\"k\">let</span> <span class=\"nv\">anImageView</span> <span class=\"o\">=</span> <span class=\"n\">myExistingView</span><span class=\"o\">.</span><span class=\"nf\">circleImageView</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<h3 id=\"pdfs-ftw\">PDFs FTW</h3>\n<p>A quick sidebar to mention that the PDF variant of the abstract <code class=\"highlighter-rouge\">UIGraphicsRenderer</code> class is very similar to its image rendering sibling. In fact, their method declarations are almost interchangeable, save <code class=\"highlighter-rouge\">UIImage</code> vs <code class=\"highlighter-rouge\">Data</code>:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">renderer</span> <span class=\"o\">=</span> <span class=\"kt\">UIGraphicsPDFRenderer</span><span class=\"p\">(</span><span class=\"nv\">bounds</span><span class=\"p\">:</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">bounds</span><span class=\"p\">)</span>  \n<span class=\"k\">let</span> <span class=\"nv\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">pdfData</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">)</span> <span class=\"k\">in</span>  \n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"nf\">beginPage</span><span class=\"p\">()</span>\n    <span class=\"k\">let</span> <span class=\"nv\">header</span> <span class=\"o\">=</span> <span class=\"s\">\"Welcome to TTIDG!\"</span> <span class=\"k\">as</span> <span class=\"kt\">NSString</span>  \n    <span class=\"k\">let</span> <span class=\"nv\">attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span>  \n        <span class=\"kt\">NSAttributedStringKey</span><span class=\"o\">.</span><span class=\"nv\">font</span> <span class=\"p\">:</span> <span class=\"kt\">UIFont</span><span class=\"o\">.</span><span class=\"nf\">preferredFont</span><span class=\"p\">(</span><span class=\"nv\">forTextStyle</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">),</span>  \n        <span class=\"kt\">NSAttributedStringKey</span><span class=\"o\">.</span><span class=\"nv\">foregroundColor</span> <span class=\"p\">:</span> <span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"n\">blue</span>  \n    <span class=\"p\">]</span>\n\n    <span class=\"n\">header</span><span class=\"o\">.</span><span class=\"nf\">draw</span><span class=\"p\">(</span><span class=\"nv\">in</span><span class=\"p\">:</span> <span class=\"kt\">CGRect</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">pdfContextBounds</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">pdfContextBounds</span><span class=\"o\">.</span><span class=\"n\">height</span><span class=\"p\">),</span> <span class=\"nv\">withAttributes</span><span class=\"p\">:</span> <span class=\"n\">attributes</span><span class=\"p\">)</span>  \n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"wrapping-up\">Wrapping Up</h3>\n<p>Replacing the code that kinda just works with the code that’s more recent and supports more relevant formats is typically not high on the proverbial list.</p>\n\n<p>Maybe it should be, as is the case with <code class=\"highlighter-rouge\">UIGraphicsImageRenderer</code>. You likely won’t have to twist many arms to persuade iOS engineers to make the switch, “No ✋ — I don’t want block based, automatically color managed, extensible drawing code that already manages its context lifetime — that’s awful” said…..nobody?</p>\n\n<p>Until next time ✌️.</p>",
            "summary": "The history of photography is rife with interesting stories of how the medium developed. Among them, digital photography is one of the more exciting bits of its history. It’s still quite a nascent craft, with its history tracing back to as recently as 1957 when the fine folks at the National Institute of Standards and Technology slapped a photo into computer memory.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2018-08-01T00:00:00-05:00",
            "date_modified": "2018-08-01T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["UIKit"]},{
            "id": "http://localhost:4000/iOS-12-Notable-UIKit-Additions",
            "url": "http://localhost:4000/iOS-12-Notable-UIKit-Additions/",
            "title": "iOS 12: Notable UIKit Additions",
            "content_html": "<p>And here we are. We’ve finally got a good look at iOS 12 and all it has on offer. Though some chose to view it as a tame maintenance release, tagging it as such is a disservice and there was plenty to digest during the WWDC keynote.</p>\n\n<p>Each year, I dive in on the latest version of iOS and try to bring up some of the new APIs that our favorite framework, UIKit, has brought to the table. In no particular order, let’s dig in on some of the enhancements that caught my eye.</p>\n\n<h3 id=\"uitextinputtraits\">UITextInputTraits</h3>\n\n<p>Apple continues its push towards keeping its user’s data private and secure, so it’s no surprise to see Cupertino &amp; Friends© extend the password autofill APIs.</p>\n\n<p>New this year is the ability to suggest a new password for your users, <em>and</em> supply your password parameters dictated by business requirements to iOS when suggesting such a password. This is done via the <code class=\"highlighter-rouge\">UITextInputPasswordRules</code> class:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">createNewPasswordTextField</span> <span class=\"o\">=</span> <span class=\"kt\">UITextField</span><span class=\"p\">()</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">newPasswordReqs</span> <span class=\"o\">=</span> <span class=\"kt\">UITextInputPasswordRules</span><span class=\"p\">(</span><span class=\"nv\">descriptor</span><span class=\"p\">:</span> <span class=\"s\">\"required: lower; required: digit; max-consecutive: 3; minlength: 12;\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">createNewPasswordTextField</span><span class=\"o\">.</span><span class=\"n\">passwordRules</span> <span class=\"o\">=</span> <span class=\"n\">newPasswordReqs</span>\n\n<span class=\"c1\">// Now, when iOS suggests a new password - these rules will be used to generate it</span>\n</code></pre></div></div>\n<p>The pertinent information here is the descriptor parameter, which is a plain string that follows a certain syntax, à la the visual format language:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"s\">\"key: value;\"</span>\n</code></pre></div></div>\n\n<p>Think of it a dictionary entry that always is followed by semicolon. It’s quite close to CSS declarations. With it, you can specify the following items:</p>\n\n<ul>\n  <li>required : Self explanatory</li>\n  <li>allowed : Allow a subset of allowed characters</li>\n  <li>max-consecutive : Restrict the number of successive characters</li>\n</ul>\n\n<p>And character classes to match against those rules:</p>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">upper</code> : A-Z</li>\n  <li><code class=\"highlighter-rouge\">lower</code> : a-z</li>\n  <li>\n    <table>\n      <tbody>\n        <tr>\n          <td><code class=\"highlighter-rouge\">special</code> : -~!@#$%^&amp;*_+=`</td>\n          <td>(){}[:;”’&lt;&gt;,.? ] and space</td>\n        </tr>\n      </tbody>\n    </table>\n  </li>\n  <li><code class=\"highlighter-rouge\">ascii-printable</code> : All ACII printable</li>\n  <li><code class=\"highlighter-rouge\">unicode</code> : All unicode</li>\n</ul>\n\n<p>To further things a little, suppose you only wanted to allow the letters “j,o,r,d,a,n” because you want the strongest password that I’ll never, ever most definitely guess, then you could do this:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">UITextInputPasswordRules</span><span class=\"p\">(</span><span class=\"nv\">descriptor</span><span class=\"p\">:</span> <span class=\"s\">\"required: [j,o,r,d,a,n]; max-consecutive: 2; minlength: 12;\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Be aware that the framework has some validation against your supplied validation, resulting in some form of validationception.</p>\n\n<p>Your parameters have to <em>at least</em> use two instances of the ASCII uppercase letters, digits and ASDII lowercase letters classes. Other than that, it also must be longer than 12 characters.</p>\n\n<p>If you don’t meet this criteria, do you get some sort of runtime error or exception? Nope — the user agent just throws out your insecure, primitive suggestion and uses the default. Which is probably a good thing.</p>\n\n<p>As a bonus, you can do the same thing in HTML by using the <code class=\"highlighter-rouge\">passwordrules</code> attribute in your input element.</p>\n\n<h3 id=\"one-time-tfa-codes\">One Time TFA Codes</h3>\n\n<p>In one of my favorite “It just works” APIs that Apple supplies to developers, it’s hard to argue that there’s something more trivial to implement in iOS development that simultaneously brings real value to users than setting a text content type.</p>\n\n<p>The powerful heuristics of iOS sucks in passwords and phone numbers, can suggest a relevant address and more. And now, that more is TFA codes, accomplished by doing nothing more than choosing <code class=\"highlighter-rouge\">oneTimeCode</code>:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">aTFAtextField</span><span class=\"o\">.</span><span class=\"n\">textContentType</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">oneTimeCode</span>\n</code></pre></div></div>\n\n<p>This also joins the new value, <code class=\"highlighter-rouge\">newPassword</code>, which would enable the password creation prompts touched on above. The usual restrictions (if you can even call them that) is that the element accepting the password must be a text field, text view or a view that adopts the <code class=\"highlighter-rouge\">UITextInput</code> protocol.</p>\n\n<p>Of note, tvOS apps are also granted the same affordances when using the control center keyboard, the continuity keyboard or even Cupertino’s Remote App. And let’s face it, nobody wants to type on that platform so any shortcuts we can provide just promotes engagement that much more.</p>\n\n<p>Text content type is powerful, but also the definition of lightweight, simple and WYSIWYG. Sometimes what you aren’t is just as important as what you are. That’s also true with framework design.</p>\n\n<h3 id=\"graphics-rendering\">Graphics Rendering</h3>\n\n<p>As we’ll briefly discuss later on, iOS 12 has automatic backing store support for views. The depth of their content drives this. So, for example, if you are rendering a grey scale image on the screen iOS will employ an 8 bit per pixel backing store instead of the usual 64 bit per pixel backing store a portrait image would incur.</p>\n\n<p>The cost savings is significant, in the <a href=\"https://developer.apple.com/videos/play/wwdc2018/202/\">What’s New in Cocoa Touch</a> session, Apple engineer Josh Shaffer notes that the previous example goes from 2.2 megabytes of real estate down to <em>275 kilobytes</em>.</p>\n\n<p>As aforementioned, views get this out of the box. If you draw into offscreen bitmaps using <code class=\"highlighter-rouge\">UIGraphicsImageRenderer</code>, though, iOS won’t be able to predict the developer’s intentions with the resulting image. As such, a configurable buffer backing store style has been introduced so one can take part in the memory savings:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">rendererFormat</span> <span class=\"o\">=</span> <span class=\"kt\">UIGraphicsImageRendererFormat</span><span class=\"o\">.</span><span class=\"nf\">default</span><span class=\"p\">()</span>  \n<span class=\"n\">rendererFormat</span><span class=\"o\">.</span><span class=\"n\">preferredRange</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">extended</span> <span class=\"c1\">// For an extended range image</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">renderer</span> <span class=\"o\">=</span> <span class=\"kt\">UIGraphicsImageRenderer</span><span class=\"p\">(</span><span class=\"nv\">size</span><span class=\"p\">:</span> <span class=\"kt\">CGSize</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">),</span> <span class=\"nv\">format</span><span class=\"p\">:</span> <span class=\"n\">rendererFormat</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Above, we indicated our intention to utilize an extended range image. Though, we can also indicate that its unspecified, automatic or standard.</p>\n\n<h3 id=\"the-small-quick-win\">The Small Quick Win</h3>\n\n<p>Detecting user interface orientations is traditionally frowned upon via Apple’s official stance. And though trait collections offer us most of what we need, it’s still refreshing to see Apple come full circle on all the edge cases with two new additions here:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">device</span> <span class=\"o\">=</span> <span class=\"kt\">UIDevice</span><span class=\"o\">.</span><span class=\"n\">current</span>  \n<span class=\"k\">let</span> <span class=\"nv\">isFlat</span> <span class=\"o\">=</span> <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">orientation</span><span class=\"o\">.</span><span class=\"n\">isFlat</span>  \n<span class=\"k\">let</span> <span class=\"nv\">isValid</span> <span class=\"o\">=</span> <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">orientation</span><span class=\"o\">.</span><span class=\"n\">isValidInterfaceOrientation</span>\n</code></pre></div></div>\n\n<h3 id=\"darkness-for-days\">Darkness for Days</h3>\n\n<p>Also, we have dark mode on iOS, finally! Mojave doesn’t get all the fun!</p>\n\n<p>Err…shoot, no wait — we just have API support for it. But it doesn’t officially exist. But it also kinda does too, because the code is there. It’s shipped with Xcode.</p>\n\n<p>I don’t know. I’m just telling you that trait collections now know about it:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">darkTraitCollection</span> <span class=\"o\">=</span> <span class=\"kt\">UITraitCollection</span><span class=\"p\">(</span><span class=\"nv\">userInterfaceStyle</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">dark</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>…there’s obviously enumerations for it:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">@available(iOS 12.0, *)</span> <span class=\"kd\">public</span> <span class=\"kd\">enum</span> <span class=\"kt\">UIUserInterfaceStyle</span> <span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span>  \n    <span class=\"k\">case</span> <span class=\"n\">unspecified</span>  \n    <span class=\"k\">case</span> <span class=\"n\">light</span>  \n    <span class=\"k\">case</span> <span class=\"n\">dark</span>  \n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>…but they only apply to CarPlay on iOS 12 beta 1.</p>\n\n<p>So there you go 🤷🏻‍♂️.</p>\n\n<h3 id=\"notifications\">Notifications</h3>\n\n<p>Technically not part of UIKit, but I did have to highlight one welcome change aside from the new grouping capabilities. Look, dealing with notifications is often a pain from a developer perspective. While not a forgone conclusion, the more notification offerings we have to support, generally the issues that could arise grow exponentially.</p>\n\n<p>You have the system notification view to toggle app permissions within iOS’ settings, possibly your own user interface to allow for granular choices, APNS to go through and oh, let’s not forget the network to contend with too.</p>\n\n<p>So, the fact that you can deep link directly into your app’s notification settings from an incoming one is not a small improvement (via <code class=\"highlighter-rouge\">providesAppNotificationSettings</code>), but a very welcome change as developers continue their journey towards simplifying notification issues for them, the end user and customer support.</p>\n\n<p>🕺!</p>\n\n<h3 id=\"-and-the-free-ones-\">… And The Free Ones 🙌</h3>\n\n<p><a href=\"https://twitter.com/_inside/status/1003831980025372673\">iOS 12 is fast</a>. A lot of the improvements we’ll enjoy come from deep within the framework itself. Here, I’ve chosen to highlight API changes you’ll need to put some time into to reap benefits.</p>\n\n<p>But that’s the thing — our apps will feel a bit smoother, faster and coherent without us having done anything at all.</p>\n\n<p>The reasons why range from smarter cell prefetching via the API scheduling things serially, smarter CPU diversification, more intelligent backing stores for <code class=\"highlighter-rouge\">UIView</code> and Auto Layout (quite impressively) hitting O(n) instead of O(n²) for multiple common layout scenarios, to name a few.</p>\n\n<h3 id=\"wrapping-up\">Wrapping Up</h3>\n\n<p>Personally, I came away more impressed than I thought I would be with iOS 12. Initially, it appeared that a lot of the chatter preemptively declared that iOS 12 would be a day late and dollar short. Last year, we were treated to some marquee features within UIKit like drag and drop — so what could they throw down for us this year?</p>\n\n<p>But, as is typical, W.W.D.C. brought some new stuff we weren’t expecting, hardening updates and most importantly the new APIs. Exciting times, plus — our apps are just better by virtue of simply running on the new OS. UIKit will always be at the forefront, and this year was no exception as there’s still plenty of discussions left to be had around this year’s improvements.</p>\n\n<p>Until next time ✌️.</p>",
            "summary": "And here we are. We’ve finally got a good look at iOS 12 and all it has on offer. Though some chose to view it as a tame maintenance release, tagging it as such is a disservice and there was plenty to digest during the WWDC keynote.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2018-06-08T00:00:00-05:00",
            "date_modified": "2018-06-08T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["UIKit"]},{
            "id": "http://localhost:4000/WWDC-18-The-Pregame-Quiz",
            "url": "http://localhost:4000/WWDC-18-The-Pregame-Quiz/",
            "title": "WWDC 2018: The Pregame Quiz",
            "content_html": "<p>It’s Christmas time for iOS engineers the world over. Mr.Cook and friends are a little less than a week away from pulling the curtains off of iOS 12. Will we see vast improvements, or the oft rumored “maintenance” release?</p>\n\n<p>Time will soon tell, but until then it’s time for the fourth annual T.T.I.D.G. WWDC Pregame Quiz!</p>\n\n<p>If you’d like a quick primer on how this all works or how it got started, check out the first three quizzes from <a href=\"http://localhost:4000/WWDC-2015-The-Pregame-Quiz\">2015</a> ,<a href=\"http://localhost:4000/WWDC-2016-The-Pregame-Quiz\">2016</a> and <a href=\"http://localhost:4000/WWDC-2017-The-Pregame-Quiz\">2017</a>.</p>\n\n<p>Participants — time to add the quiz operation to your queues⚡️!</p>\n\n<h3 id=\"ground-rules\">Ground Rules</h3>\n\n<p>There are three rounds, and the point break down is as follows:</p>\n\n<ul>\n  <li><strong>Round 1</strong> – 1 point each answer</li>\n  <li><strong>Round 2</strong> - 2 points each answer</li>\n  <li><strong>Round 3</strong> - 3 points each answer</li>\n</ul>\n\n<p>The last question of each round is an optional wildcard question. Get it right, and your team gets <strong>4</strong> <strong>points</strong>, <em>but</em> miss it and the team will be <strong>deducted 2 points</strong>.</p>\n\n<h3 id=\"round-1swiftly-answered\">Round 1 — Swiftly Answered</h3>\n\n<p><strong>Question 1:</strong><br />\nThis technique, introduced in a WWDC 15 session, declared that Swift was the industries first <em>what</em> oriented programming language?</p>\n\n<p><strong>Question 2:</strong><br />\nOn June 2nd, 2014 — what app became the first publicly available app written in Swift?</p>\n\n<p><strong>Question 3:</strong><br />\nWhat’s the name of the instance method that’s <strong>not</strong> possible to use in pure Swift classes/objects that NSObject uses to invoke objc_msgSend and allow for dynamic method resolution?</p>\n\n<p><strong>Question 4:</strong></p>\n\n<p>Which new typealias introduced in Swift 4 extended support of archival and serialization to struct and enum types and enables type-safety for serializing to external formats such as JSON and plist?</p>\n\n<p><strong>Wildcard:</strong><br />\nDuring WWDC 14 when Swift was unveiled, what was the <em>very first</em> public Swift string variable set equal to during its inaugural demo introduction by Chris Lattner?</p>\n\n<h3 id=\"round-2ios--its-tools-storied-history\">Round 2 — iOS’ &amp; its Tools Storied History</h3>\n\n<p><strong>Question 1:</strong><br />\nWhat framework, added in iOS 5, gave rise to the popularity of photo editing apps by exposing a powerful set of built-in filters for manipulating video and still images?</p>\n\n<p><strong>Question 2:</strong><br />\nIt’s well known that Core Data, Keyed Archiver and User Defaults allow for persistency on iOS. What other persistency option is available by default on the platform?</p>\n\n<p><strong>Question 3:</strong><br />\nWhat CLI, originally released with Xcode 6 and housed within xcrun, allows one to perform various tasks on the iOS simulator, such as recording videos and opening URL schemes?</p>\n\n<p><strong>Question 4:</strong></p>\n\n<p>Developers sometimes crash their app in a controlled manner during development by invoking the abort(); function, but there is also a little known intrinsic function that generates a machine-specific trap instruction. What is it?</p>\n\n<p><strong>Wildcard:</strong><br />\nThis ridiculously long initializer, clocking in at 202 characters, is found within what Apple framework:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">initWithEnableFan</span><span class=\"p\">:</span>  \n<span class=\"nv\">enableAirConditioner</span><span class=\"p\">:</span>  \n<span class=\"nv\">enableClimateControl</span><span class=\"p\">:</span>  \n<span class=\"nv\">enableAutoMode</span><span class=\"p\">:</span>  \n<span class=\"nv\">airCirculationMode</span><span class=\"p\">:</span>  \n<span class=\"nv\">fanSpeedIndex</span><span class=\"p\">:</span>  \n<span class=\"nv\">fanSpeedPercentage</span><span class=\"p\">:</span>  \n<span class=\"nv\">relativeFanSpeedSetting</span><span class=\"p\">:</span>  \n<span class=\"nv\">temperature</span><span class=\"p\">:</span>  \n<span class=\"nv\">relativeTemperatureSetting</span><span class=\"p\">:</span>  \n<span class=\"nv\">climateZone</span><span class=\"p\">:</span>\n</code></pre></div></div>\n<h3 id=\"round-3the-random-apple-ones\">Round 3 — The Random Apple Ones</h3>\n\n<p><strong>Question 1:</strong><br />\nThis game is a now a triple A blockbuster shooter, but it was originally announced at MacWorld in 1999 and was set to release on the platform as a third person action game. What game is it?</p>\n\n<p><strong>Question 2:</strong><br />\nSteve Jobs infamously said that <em>what</em> was a “sweet solution” for developing on the iPhone before the advent of the App Store at WWDC 07’?</p>\n\n<p><strong>Question 3:</strong><br />\nThe iPhone’s revolutionary multitouch interface was prototyped by a team, colloquially referred to as the ENRI group, at Apple in their abandoned user-testing lab at 2 Infinite Loop — what was their original mission statement?</p>\n\n<p><strong>Question 4:</strong></p>\n\n<p>John Carmack, long a pioneer of the games industry, went toe to toe with Steve Jobs in advocating that which framework should be adopted as the Mac’s 3D Graphics API?</p>\n\n<p><strong>Wildcard:</strong><br />\nThough the iPhone’s touchscreen has made the paradigm commonplace in today’s world — Eric Arthur Johnson is believed to have invented the world’s very first touch screen as an engineer at England’s Royal Radar Establishment in 1965. What instrument did he create a touchscreen for?</p>\n\n<h3 id=\"answer-key\">Answer Key</h3>\n<p><b>Round 1:</b></p>\n<ol>\n  <li><a href=\"http://asciiwwdc.com/2015/sessions/408\">A protocol oriented programming language</a></li>\n  <li>The WWDC App, this was confirmed in their Platforms State of the Union address during WWDC of that year.</li>\n  <li>Good ol’ performSelector:</li>\n  <li>Codable</li>\n  <li>Wildcard: \n<a href=\"https://www.youtube.com/watch?reload=9&amp;v=MO7Ta0DvEWA\">The variable “s” was declared as a string set equal to “Hello WWDC!”, showing off Swift’s vastly superior string interpolation API.</a></li>\n</ol>\n\n<p><b>Round 2:</b></p>\n<ol>\n  <li><a href=\"https://developer.apple.com/library/content/releasenotes/General/WhatsNewIniOS/Articles/iOS5.html#//apple_ref/doc/uid/TP30915195-SW62\">Core Image</a></li>\n  <li>SQLite</li>\n  <li><a href=\"http://localhost:4000/ios-simulator-power-ups\">simctl</a></li>\n  <li>__builtin_trap();</li>\n  <li>Wildcard: <a href=\"https://developer.apple.com/documentation/sirikit/insetclimatesettingsincarintent/2102611-init\">SiriKit</a></li>\n</ol>\n\n<p><b>Round 3:</b></p>\n<ol>\n  <li>Halo</li>\n  <li><a href=\"https://daringfireball.net/2007/06/wwdc_2007_keynote\">Web Apps</a> (Yikes)</li>\n  <li>To “Explore new rich interactions”, hence ENRI</li>\n  <li><a href=\"https://news.ycombinator.com/item?id=17067129\">OpenGL</a></li>\n  <li>Wildcard: An instrument to help operators improve handling air traffic control.</li>\n</ol>",
            "summary": "It’s Christmas time for iOS engineers the world over. Mr.Cook and friends are a little less than a week away from pulling the curtains off of iOS 12. Will we see vast improvements, or the oft rumored “maintenance” release?",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2018-05-30T00:00:00-05:00",
            "date_modified": "2018-05-30T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["Trivia"]},{
            "id": "http://localhost:4000/NSPredicate-Objective-C",
            "url": "http://localhost:4000/NSPredicate-Objective-C/",
            "title": "NSPredicate",
            "content_html": "<p>When Swift hit, we were enamored over its simplicity compared to Objective-C. Then it quickly became key to roll with protocol oriented programming. Also, forget reference types and classes. The list goes on.</p>\n\n<p>And true — those things are great tools and have superb use cases. But I sense they are often lifted up as silver bullets without the necessary amount of thought that should probably be given to architectural decisions.</p>\n\n<p>So in 2018, the blog posts overfloweth with Swift hackery (even on my blog 🤷🏻‍♂️) and the conference talks wax poetic of its future using functional programming parlance (yup, I’ve done that too 🙋🏻‍♂️).</p>\n\n<p>Everyone seems excited about working with collections in Swift <strong>but</strong> we’ve also been able to do <em>similar</em> things in Objective-C since iOS 3. So today, I’m chatting about the power of NSPredicate and how you can sift through collections with it using the 🦖.</p>\n\n<p>I think it’s relevant to bring it back up, as now we’re seeing developers at this point who’ve started with Swift, and then later have circled back to maintain some Objective-C. If that’s you, it’s possible that you’ve been frustrated with the amount of boilerplate or iteration you’ve had to write when using collections in Objective-C.</p>\n\n<p>Today, I have might have something for you.</p>\n\n<h3 id=\"the-use-case\">The Use Case</h3>\n\n<p>We’ve come a long way in recent years when it comes to Objective-C collections. Not more than a handful of years ago, we had to tell the compiler we were much smarter than it was:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">aString</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"p\">)[</span><span class=\"n\">anArray</span> <span class=\"nv\">indexOfObject</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<p>Thanks Heavens, Cupertino and Friends© eventually tacked on generics by way of type erasure. This marked a significant improvement:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">NSArray</span>  <span class=\"o\">*</span><span class=\"n\">anArray</span> <span class=\"o\">=</span> <span class=\"err\">@</span><span class=\"p\">[</span><span class=\"s\">@\"Sup\"</span><span class=\"p\">];</span>  \n<span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">aString</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">anArray</span> <span class=\"n\">firstObject</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<p>But generics or not, we often interact with the contents of Objective-C collections by doing something like this:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">str</span> <span class=\"k\">in</span> <span class=\"n\">anArray</span><span class=\"p\">)</span>  \n<span class=\"p\">{</span>  \n    <span class=\"k\">if</span> <span class=\"p\">([</span><span class=\"n\">str</span> <span class=\"nv\">isEqualToString</span><span class=\"p\">:</span><span class=\"s\">@\"The Key\"</span><span class=\"p\">])</span>   \n    <span class=\"p\">{</span>  \n        <span class=\"c1\">// Do something  </span>\n    <span class=\"p\">}</span>  \n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>A lot of times, that’s kosher. But as the requirements become more complex and the relationships more varied, the code gets a bit iffy. If you subscribe to the notion that less code means less bugs and better maintenance, the simple act of querying collections can become a bother.</p>\n\n<p>Predicates can lessen the blow here. It’s not about being “tricky” or cute with our code, but pragmatic and succinct.</p>\n\n<h3 id=\"the-10000-foot-view\">The 10,000 Foot View</h3>\n\n<p>At its core, <code class=\"highlighter-rouge\">NSPredicate</code> is used to constrain or define the parameters for in memory filtering or when performing a fetch. It really got its bones when paired with Core Data. It’s like SQL, except less awful*.</p>\n\n<blockquote>\n  <p>I joke, it’s just that set based operations have never made sense to me 🙃.</p>\n</blockquote>\n\n<p>You supply it logical conditions, and it helps to return things that match said conditions. This means it provides support for basic comparisons, compound predicates, key path collections queries, subqueries, aggregates and more.</p>\n\n<p>As it’s used to sift through collections, you can expect Foundation classes to support it out of the box. Mutable varieties support in-place mutations from the results, whereas their immutable flavors will return a new instance:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// In place  </span>\n<span class=\"p\">[</span><span class=\"n\">mutableArray</span> <span class=\"nv\">filterUsingPredicate</span><span class=\"p\">:</span><span class=\"cm\">/*NSPredicate*/</span><span class=\"p\">]</span>\n\n<span class=\"c1\">// New instance returned  </span>\n<span class=\"p\">[</span><span class=\"n\">mutableArray</span> <span class=\"nv\">filteredArrayUsingPredicate</span><span class=\"p\">:</span><span class=\"cm\">/*NSPredicate*/</span><span class=\"p\">]</span>\n</code></pre></div></div>\n<p>Though predicates can be instantiated from <a href=\"https://developer.apple.com/documentation/foundation/nspredicate?language=objc\"><code class=\"highlighter-rouge\">NSExpression</code></a> , <a href=\"https://developer.apple.com/documentation/foundation/nspredicate?language=objc\"><code class=\"highlighter-rouge\">NSCompoundPredicate</code></a> or <a href=\"https://developer.apple.com/documentation/foundation/nspredicate?language=objc\"><code class=\"highlighter-rouge\">NSComparisonPredicate</code></a> — it can also be created using a string syntax. This is similar to the Visual Format Language that one can use to define layout constraints.</p>\n\n<p>We’ll be focusing on the utility of using the string syntax method.</p>\n\n<h3 id=\"the-setup\">The Setup</h3>\n\n<p>To illustrate, let’s consider the following code for the remainder of the post:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Pseudo code   </span>\n<span class=\"kt\">Person</span><span class=\"p\">:</span><span class=\"kt\">NSObject</span>  \n<span class=\"kt\">Identifier</span><span class=\"p\">:</span><span class=\"kt\">NSString</span>  \n<span class=\"kt\">Name</span><span class=\"p\">:</span><span class=\"kt\">NSString</span>  \n<span class=\"kt\">PayGrade</span><span class=\"p\">:</span><span class=\"kt\">NSNumber</span>\n\n<span class=\"c1\">// An some property somewhere containing Person instances  </span>\n<span class=\"kt\">NSArray</span>  <span class=\"o\">*</span><span class=\"n\">employees</span>\n</code></pre></div></div>\n<h3 id=\"query-time-️\">Query Time ⚡️</h3>\n\n<p>What follows for the rest of the post are straight forward examples of how to setup queries using the string format syntax.</p>\n\n<p>We can start with a simple search scenario. Let’s assume we’ve got an array containing identifiers representing Person objects:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span>  \n    <span class=\"s\">@\"erersdg32453tr\"</span><span class=\"p\">,</span>  \n    <span class=\"s\">@\"dfs8rw093jrkls\"</span><span class=\"p\">,</span>  \n    <span class=\"c1\">// etc  </span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>Now, we’d like to retrieve Person objects from an existing array of Person objects from these identifiers. Using a double nested for-loop, it could be accomplished as such:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Assume \"employees\" is an existing array of Person objects</span>\n<span class=\"kt\">NSArray</span>  <span class=\"o\">*</span><span class=\"n\">morningEventAttendees</span> <span class=\"o\">=</span> <span class=\"err\">@</span><span class=\"p\">[</span><span class=\"cm\">/*Identifiers of people listed above*/</span><span class=\"p\">];</span>\n<span class=\"kt\">NSMutableArray</span>  <span class=\"o\">*</span><span class=\"n\">peopleAttendingMorningEvent</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSMutableArray</span> <span class=\"k\">new</span><span class=\"p\">];</span>\n\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">userID</span> <span class=\"k\">in</span> <span class=\"n\">morningEventAttendees</span><span class=\"p\">)</span>  \n<span class=\"p\">{</span>  \n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">Person</span> <span class=\"o\">*</span><span class=\"n\">person</span> <span class=\"k\">in</span> <span class=\"n\">employees</span><span class=\"p\">)</span>  \n    <span class=\"p\">{</span>  \n        <span class=\"k\">if</span> <span class=\"p\">([</span><span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">identifier</span> <span class=\"nv\">isEqualToString</span><span class=\"p\">:</span><span class=\"n\">userID</span><span class=\"p\">])</span>  \n        <span class=\"p\">{</span>  \n            <span class=\"p\">[</span><span class=\"n\">peopleAttending</span> <span class=\"nv\">addObject</span><span class=\"p\">:</span><span class=\"n\">person</span><span class=\"p\">];</span>  \n        <span class=\"p\">}</span>  \n    <span class=\"p\">}</span>  \n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Now peopleAttendingMorningEvent has what we want</span>\n</code></pre></div></div>\n<p>The exact same result is accomplished using a predicate as such:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">NSPredicate</span> <span class=\"o\">*</span><span class=\"n\">morningAttendees</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSPredicate</span> <span class=\"nv\">predicateWithFormat</span><span class=\"p\">:</span><span class=\"s\">@\"SELF.identifier IN %@\"</span><span class=\"p\">,</span> <span class=\"n\">peopleAttendingMorningEvent</span><span class=\"p\">];</span>\n\n<span class=\"kt\">NSArray</span>  <span class=\"o\">*</span><span class=\"n\">peopleAttendingMorningEvent</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">employees</span> <span class=\"nv\">filteredArrayUsingPredicate</span><span class=\"p\">:</span><span class=\"n\">morningAttendees</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<p>💫.</p>\n\n<p>Predicate syntax allows for the use of SELF, which is used to great effect here. It represents the object contained within the array being operated on, so for us — Person objects.</p>\n\n<blockquote>\n  <p>Another bonus is that we’ve dropped the mutability of the array definition._</p>\n</blockquote>\n\n<p>It’s for this reason we can access the key paths associated with the object that SELF is representing. You’re seeing that above, as the <code class=\"highlighter-rouge\">identifier</code> property is referenced.</p>\n\n<p>Should you prefer, any key path can also be expressed via a variable using the “%K” syntax in its place. This version does the same as above:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">[</span><span class=\"kt\">NSPredicate</span> <span class=\"nv\">predicateWithFormat</span><span class=\"p\">:</span><span class=\"s\">@\"SELF.%K IN %@\"</span><span class=\"p\">,</span> <span class=\"s\">@\"identifier\"</span><span class=\"p\">,</span> <span class=\"n\">peopleAttendingMorningEvent</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<h3 id=\"compound-predicates\">Compound Predicates</h3>\n\n<p>It’s trivial to combine comparisons. Suppose our requirements now call for finding users attending events the same way as above, but now their paygrade must also be between 50,000 and 60,000.</p>\n\n<p>If traditional approaches win out, then our first if statement will only grow:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Same code as above same for this tweak  </span>\n<span class=\"k\">if</span> <span class=\"p\">([</span><span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">identifier</span> <span class=\"nv\">isEqualToString</span><span class=\"p\">:</span><span class=\"n\">userID</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">paygrade</span><span class=\"o\">.</span><span class=\"n\">integerValue</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">5</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">paygrade</span><span class=\"o\">.</span><span class=\"n\">integerValue</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">10</span><span class=\"p\">))</span>  \n<span class=\"p\">{</span>  \n    <span class=\"p\">[</span><span class=\"n\">peopleAttending</span> <span class=\"nv\">addObject</span><span class=\"p\">:</span><span class=\"n\">person</span><span class=\"p\">];</span>  \n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>But using a refactored predicate gets us there in a more idiomatic way:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">NSPredicate</span> <span class=\"o\">*</span><span class=\"n\">morningAttendees</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSPredicate</span> <span class=\"nv\">predicateWithFormat</span><span class=\"p\">:</span><span class=\"s\">@\"SELF.identifier IN %@ &amp;&amp; SELF.paygrade.integerValue BETWEEN {50000, 60000}\"</span><span class=\"p\">,</span> <span class=\"n\">peopleAttendingMorningEvent</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<p>The syntax allows for different operators denoting the same thing which can help hone in on readability, per your preference. For example:</p>\n\n<ul>\n  <li>“&amp;&amp;” or “AND”</li>\n  <li>\n    <table>\n      <tbody>\n        <tr>\n          <td>”</td>\n          <td> </td>\n          <td>” or “OR”</td>\n        </tr>\n      </tbody>\n    </table>\n  </li>\n  <li>”!” or “NOT”</li>\n</ul>\n\n<p>As expected, these are usually aggregated into one predicate by using them in tandem with the basic comparison operators you are likely expecting:</p>\n\n<h3 id=\"string-comparisons\">String Comparisons</h3>\n\n<p>We’re often tasked with matching values based off of string comparisons. It’s well known that Objective-C shines its unrequited love for verboseness in no greater light than when dealing with NSString:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">@\"Jordan\"</span>  \n<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">name</span> <span class=\"nv\">stringByAppendingString</span><span class=\"p\">:[</span><span class=\"kt\">NSString</span> <span class=\"nv\">stringWithFormat</span><span class=\"p\">:</span><span class=\"s\">@\"%@ %@\"</span><span class=\"p\">,</span> <span class=\"s\">@\"Wesley\"</span><span class=\"p\">,</span> <span class=\"s\">@\"Morgan\"</span><span class=\"p\">]]</span>\n</code></pre></div></div>\n<p>…whereas Swift just smirks and concatenates its own strings with much less fuss. As such, we can take heart that such verboseness doesn’t apply with NSPredicate and string comparisons.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Assume mutablePersonAr is a Person array with names of \"Karl\", \"Jordan\"  </span>\n<span class=\"kt\">NSPredicate</span> <span class=\"o\">*</span><span class=\"n\">namesStartingWithK</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSPredicate</span> <span class=\"nv\">predicateWithFormat</span><span class=\"p\">:</span><span class=\"s\">@\"SELF.name BEGINSWITH 'K'\"</span><span class=\"p\">];</span>\n<span class=\"c1\">// Now only contains Karl  </span>\n<span class=\"p\">[</span><span class=\"n\">mutablePersonAr</span> <span class=\"nv\">filterUsingPredicate</span><span class=\"p\">:</span><span class=\"n\">namesStartingWithK</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<p>Virtually any comparison can be achieved by way of the predicate syntax’s CONTAINS, BEGINSWITH, ENDSWITH and LIKE:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Assume mutablePersonAr is a Person array with names of \"Karl\", \"Kathryn\"  </span>\n<span class=\"kt\">NSPredicate</span> <span class=\"o\">*</span><span class=\"n\">namesStartingWithK</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSPredicate</span> <span class=\"nv\">predicateWithFormat</span><span class=\"p\">:</span><span class=\"s\">@\"SELF.name LIKE 'Kar*'\"</span><span class=\"p\">];</span>\n\n<span class=\"c1\">// Now only contains Karl  </span>\n<span class=\"p\">[</span><span class=\"n\">mutablePersonAr</span> <span class=\"nv\">filterUsingPredicate</span><span class=\"p\">:</span><span class=\"n\">namesStartingWithK</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<blockquote>\n  <p>You may have noticed the asterisk above, which like many similar DSLs out there, represents a wildcard.</p>\n</blockquote>\n\n<p>The ease of use really begins to come to the forefront when you combine comparison operators within one query:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">predicateFormat</span> <span class=\"o\">=</span> <span class=\"s\">@\"(SELF.name LIKE 'Kar*') AND (SELF.paygrade.intValue &gt;= 10)\"</span>\n\n<span class=\"kt\">NSPredicate</span> <span class=\"o\">*</span><span class=\"n\">namesStartingWithK</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSPredicate</span> <span class=\"nv\">predicateWithFormat</span><span class=\"p\">:</span><span class=\"n\">predicateFormat</span><span class=\"p\">];</span>\n\n<span class=\"c1\">// Now only contains Karl  </span>\n<span class=\"p\">[</span><span class=\"n\">mutablePersonAr</span> <span class=\"nv\">filterUsingPredicate</span><span class=\"p\">:</span><span class=\"n\">namesStartingWithK</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<p>Further, there is even support for a mix of NSPredicate’s SQLish syntax to be mashed up with regular expressions by way of the MATCHES syntax:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">[</span><span class=\"kt\">NSPredicate</span> <span class=\"nv\">predicateWithFormat</span><span class=\"p\">:</span><span class=\"s\">@\"SELF.phoneNumber MATCHES %@\"</span><span class=\"p\">,</span> <span class=\"n\">phoneNumberRegex</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<p>However, this is an opportune time to point out that the predicate format syntax is exactly what it is. A straight up string. And unless you’re Mavis Beacon, you’ll supply it with a typo every now and again.</p>\n\n<p>The good news is that’ll you find out fast — as a runtime exception awaits. What we gain in power and flexibility is, in some ways, mitigated by the loss of the safety net that static analysis provides.</p>\n\n<p>To illustrate, this slightly refactored sample from above will crash. Can you tell why?</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">predicateFormat</span> <span class=\"o\">=</span> <span class=\"s\">@\"SELF.name LIKE 'Kar*') AND (SELF.paygrade.intValue &gt;= 10)\"</span>\n\n<span class=\"kt\">NSPredicate</span> <span class=\"o\">*</span><span class=\"n\">namesStartingWithK</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSPredicate</span> <span class=\"nv\">predicateWithFormat</span><span class=\"p\">:</span><span class=\"n\">predicateFormat</span><span class=\"p\">];</span>\n\n<span class=\"c1\">// Now only contains Karl  </span>\n<span class=\"p\">[</span><span class=\"n\">mutablePersonAr</span> <span class=\"nv\">filterUsingPredicate</span><span class=\"p\">:</span><span class=\"n\">namesStartingWithK</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<p>To combat such issues, I’ve often paired predicates with NSStringFromSelector() to provide an additional layer of safety against typos and future refactoring:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">predicateFormat</span> <span class=\"o\">=</span> <span class=\"s\">@\"(SELF.%@ LIKE 'Kar*') AND (SELF.paygrade.intValue &gt;= 10)\"</span>\n\n<span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">kpName</span> <span class=\"o\">=</span> <span class=\"kt\">NSStringFromSelector</span><span class=\"p\">(</span><span class=\"kd\">@selector(identifier)</span><span class=\"p\">);</span>  \n<span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">kpPaygrade</span> <span class=\"o\">=</span> <span class=\"kt\">NSStringFromSelector</span><span class=\"p\">(</span><span class=\"kd\">@selector(paygrade)</span><span class=\"p\">);</span>\n\n<span class=\"kt\">NSPredicate</span> <span class=\"o\">*</span><span class=\"n\">namesStartingWithK</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSPredicate</span> <span class=\"nv\">predicateWithFormat</span><span class=\"p\">:</span><span class=\"n\">predicateFormat</span><span class=\"p\">,</span> <span class=\"n\">kpName</span><span class=\"p\">,</span> <span class=\"n\">kpPaygrade</span><span class=\"p\">];</span>\n\n<span class=\"c1\">// Now only contains Karl  </span>\n<span class=\"p\">[</span><span class=\"n\">mutablePersonAr</span> <span class=\"nv\">filterUsingPredicate</span><span class=\"p\">:</span><span class=\"n\">namesStartingWithK</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<p>A bit more heavy handed? Sure. Safer? Absolutely.</p>\n\n<h3 id=\"keypath-collection-queries\">KeyPath Collection Queries</h3>\n\n<p>Building upon the use of key paths, <code class=\"highlighter-rouge\">NSPredicate</code> boasts a full suite of tools to operate on them in the name of a better search. Consider the following:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Assume a Person object now has this property on it:  </span>\n<span class=\"c1\">// NSArray  *previousPay</span>\n\n<span class=\"c1\">// Find everyone who's average previous pay was over 10  </span>\n<span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">predicateFormat</span> <span class=\"o\">=</span> <span class=\"s\">@\"SELF.previousPay.@avg.doubleValue &gt; 10\"</span><span class=\"p\">;</span>\n<span class=\"kt\">NSPredicate</span> <span class=\"o\">*</span><span class=\"n\">previousPayOverTen</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSPredicate</span> <span class=\"nv\">predicateWithFormat</span><span class=\"p\">:</span><span class=\"n\">predicateFormat</span><span class=\"p\">];</span>\n\n<span class=\"c1\">// Everyone whose previous pay's average was greater than 10  </span>\n<span class=\"p\">[</span><span class=\"n\">mutablePersonAr</span> <span class=\"nv\">filterUsingPredicate</span><span class=\"p\">:</span><span class=\"n\">previousPayOverTen</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<p>You could switch our the @avg for:</p>\n\n<ul>\n  <li>@sum</li>\n  <li>@max</li>\n  <li>@min</li>\n  <li>@count</li>\n</ul>\n\n<p>When you consider the amount of, albeit trivial, code that you might’ve had to author to achieve the same things outside of a predicate, these types of techniques can begin to become part of your regular toolchain.</p>\n\n<h3 id=\"digging-deeper-into-arrays\">Digging Deeper into Arrays</h3>\n\n<p>Much like key path queries, there is also support for inspecting implicit arrays to a finer degree:</p>\n\n<ul>\n  <li>array[FIRST]</li>\n  <li>array[LAST]</li>\n  <li>array[SIZE]</li>\n  <li>array[index]</li>\n</ul>\n\n<p>Building from the code sample above, this allows for queries such as this:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Find everyone who's had three previous different salaries  </span>\n<span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">predicateFormat</span> <span class=\"o\">=</span> <span class=\"s\">@\"previousPay[SIZE] == 3\"</span><span class=\"p\">;</span>\n\n<span class=\"kt\">NSPredicate</span> <span class=\"o\">*</span><span class=\"n\">threePreviousSalaries</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSPredicate</span> <span class=\"nv\">predicateWithFormat</span><span class=\"p\">:</span><span class=\"n\">predicateFormat</span><span class=\"p\">];</span>\n\n<span class=\"c1\">// These Person objects had three previous salaries  </span>\n<span class=\"p\">[</span><span class=\"n\">mutablePersonAr</span> <span class=\"nv\">filterUsingPredicate</span><span class=\"p\">:</span><span class=\"n\">threePreviousSalaries</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<p>And as we alluded to above, it’s perfectly find to apply multiple conditions:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Find everyone who's had three previous different salaries and whose first one was greater than 8  </span>\n<span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">predicateFormat</span> <span class=\"o\">=</span> <span class=\"s\">@\"(previousPay[SIZE] == 3) AND (previousPay[FIRST].intValue &gt; 8)\"</span><span class=\"p\">;</span>\n\n<span class=\"kt\">NSPredicate</span> <span class=\"o\">*</span><span class=\"n\">predicate</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSPredicate</span> <span class=\"nv\">predicateWithFormat</span><span class=\"p\">:</span><span class=\"n\">predicateFormat</span><span class=\"p\">];</span>\n<span class=\"p\">[</span><span class=\"n\">mutablePersonAr</span> <span class=\"nv\">filterUsingPredicate</span><span class=\"p\">:</span><span class=\"n\">predicate</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<p>Going even further, you get gain even more power by using either of the following:</p>\n\n<ul>\n  <li>@distinctUnionOfArrays</li>\n  <li>@unionOfArrays</li>\n  <li>@unionOfObjects</li>\n  <li>@distinctUnionOfObjects</li>\n</ul>\n\n<p>Hang with me, but assume we had an array of arrays containing Person objects, and all that we needed were the unique identifiers of the Person instances among them:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Assume p1/2/3/4 are all hydrated Person objects  </span>\n<span class=\"kt\">NSArray</span>  <span class=\"o\">*&gt;</span> <span class=\"o\">*</span><span class=\"n\">previousEmployees</span> <span class=\"o\">=</span> <span class=\"err\">@</span><span class=\"p\">[</span><span class=\"err\">@</span><span class=\"p\">[</span><span class=\"n\">p1</span><span class=\"p\">],</span><span class=\"err\">@</span><span class=\"p\">[</span><span class=\"n\">p2</span><span class=\"p\">,</span><span class=\"n\">p1</span><span class=\"p\">,</span><span class=\"n\">p2</span><span class=\"p\">],</span><span class=\"err\">@</span><span class=\"p\">[</span><span class=\"n\">p1</span><span class=\"p\">],</span><span class=\"err\">@</span><span class=\"p\">[</span><span class=\"n\">p4</span><span class=\"p\">,</span><span class=\"n\">p2</span><span class=\"p\">],</span><span class=\"err\">@</span><span class=\"p\">[</span><span class=\"n\">p4</span><span class=\"p\">],</span><span class=\"err\">@</span><span class=\"p\">[</span><span class=\"n\">p4</span><span class=\"p\">],</span><span class=\"err\">@</span><span class=\"p\">[</span><span class=\"n\">p1</span><span class=\"p\">]];</span>\n\n<span class=\"c1\">// Get every unique ID  </span>\n<span class=\"kt\">NSArray</span> <span class=\"o\">*</span><span class=\"n\">unqiuePreviousEmployeeIDs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">previousEmployees</span> <span class=\"nv\">valueForKeyPath</span><span class=\"p\">:</span><span class=\"s\">@\"@distinctUnionOfObjects.identifier\"</span><span class=\"p\">];</span>\n\n<span class=\"c1\">// The array would contain only unique IDs</span>\n</code></pre></div></div>\n<p>Cool, no?</p>\n\n<p>The fun doesn’t stop there, as there is even support for subqueries:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Assume Person objects have a new property for their team:  </span>\n<span class=\"c1\">// NSArray  *team;</span>\n\n<span class=\"c1\">// Find everyone in an employee array who has people in their team with a pay over 1 and no previous pay history  </span>\n<span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">predicateFormat</span> <span class=\"o\">=</span> <span class=\"s\">@\"SUBQUERY(team, $teamMember, $teamMember.paygrade.intValue &gt; 1 AND $teamMember.previousPay == nil).@count &gt; 0\"</span><span class=\"p\">;</span>\n\n<span class=\"kt\">NSPredicate</span> <span class=\"o\">*</span><span class=\"n\">predicate</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSPredicate</span> <span class=\"nv\">predicateWithFormat</span><span class=\"p\">:</span><span class=\"n\">predicateFormat</span><span class=\"p\">];</span>\n<span class=\"p\">[</span><span class=\"n\">employeeAr</span> <span class=\"nv\">filterUsingPredicate</span><span class=\"p\">:</span><span class=\"n\">predicate</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<p>Subqueries are quite useful should you find yourself needing to search on an array of objects which also contain a property that’s itself a collection. So here, we’ve got an array of Person objects, and we’re peeking into their teamMember array.</p>\n\n<h3 id=\"convenience-is-keypath\">Convenience is Key(Path)</h3>\n\n<p>Though <code class=\"highlighter-rouge\">NSPredicate</code> is built for search, it wouldn’t be Objective-C if you couldn’t bend things from their exact purpose <em>just</em> a tad. No exception here.</p>\n\n<p>When you think of a predicate, you think of filtering down a collection — meaning the return (or in place mutation) still contains the same stuff.</p>\n\n<p>But you can, well, make it <em>not</em> be the same things. And we actually did that in the previous code sample. The array of arrays above was used to return an array of identifiers — NSString instances. Keypathin’ makes it all possible.</p>\n\n<p>Here’s a more direct example:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// We want an array of identifier strings whose length is greater than 10  </span>\n<span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">predicateFormat</span> <span class=\"o\">=</span> <span class=\"s\">@\"SELF.identifier.length &gt; 10\"</span><span class=\"p\">;</span>\n<span class=\"kt\">NSPredicate</span> <span class=\"o\">*</span><span class=\"n\">predicate</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSPredicate</span> <span class=\"nv\">predicateWithFormat</span><span class=\"p\">:</span><span class=\"n\">predicateFormat</span><span class=\"p\">];</span>\n<span class=\"kt\">NSArray</span>  <span class=\"o\">*</span><span class=\"n\">longEmployeeIDs</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"n\">employeeArray</span> <span class=\"nv\">filteredArrayUsingPredicate</span><span class=\"p\">:</span><span class=\"n\">predicate</span><span class=\"p\">]</span> <span class=\"nv\">valueForKey</span><span class=\"p\">:</span><span class=\"s\">@\"identifier\"</span><span class=\"p\">];</span>\n\n<span class=\"c1\">// Now longEmployeeIDs has not Person objects, but only strings</span>\n</code></pre></div></div>\n<h3 id=\"wrapping-up\">Wrapping Up</h3>\n\n<p>You can burn through Objective-C collections with sugary syntax. You can drill down to a particular subset of items without nested loops. It’s all much easier on the eyes with <code class=\"highlighter-rouge\">NSPredicate</code>.</p>\n\n<p>While Swift has first class language support to slice and dice collections, it’s really not much of a bother to utilize an object created to do much of the same things. Should you find yourself in a mature codebase or a newly minted one sporting The Dino (Objective-C), let the predicates flow freely.</p>\n\n<p>Until next time ✌️.</p>",
            "summary": "When Swift hit, we were enamored over its simplicity compared to Objective-C. Then it quickly became key to roll with protocol oriented programming. Also, forget reference types and classes. The list goes on.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2018-05-18T00:00:00-05:00",
            "date_modified": "2018-05-18T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["Foundation"]},{
            "id": "http://localhost:4000/UILayoutGuide",
            "url": "http://localhost:4000/UILayoutGuide/",
            "title": "UILayoutGuide",
            "content_html": "<p>It’s astounding to think that we lived in a pre Auto Layout world not that long ago. Auto resizing masks and <code class=\"highlighter-rouge\">CGRectMake()</code> ruled the lands of user interface development for quite some time.</p>\n\n<p>But as Apple’s devices started stacking up various point sizes, it was obvious that developers would either languish in the pit of misery that can result from too many frame calculations or embrace the power of describing relationships. The latter, obviously, won out.</p>\n\n<p>And thus, Auto Layout has been <a href=\"https://oleb.net/blog/2014/03/how-i-learned-to-stop-worrying-and-love-auto-layout/\">used</a>, <a href=\"https://github.com/SnapKit/Masonry\">DSL</a>‘d and <a href=\"https://www.reddit.com/r/iOSProgramming/comments/4t6kd5/why_i_dont_use_autolayout/\">criticized</a> ever since. With its rise, though, another layout paradigm also came into prominence. The “spacer” view. Or dummy view. Container view.</p>\n\n<p>Whatever you call it, we’ve all used them. But Apple, as so it often does, says there is a better way. This week, let’s chat <code class=\"highlighter-rouge\">UILayoutGuide</code>.</p>\n\n<h3 id=\"but-dummy-views-rock-and-i-agree\">But Dummy Views Rock (…and I agree)</h3>\n\n<p>Dummy views solve some layout problems extremely well. That’s why we all use(d) them. Expressing inter-view relationships, creating modular chunks of your user interface or defining constraints to express the coordinates or size of empty spaces between views all called for the dummy view.</p>\n\n<p>In fact, even if one simply wished to center a group of controls in a particular coordinate space, a dummy view was often used to contain them.</p>\n\n<p>As such, a lot of important jobs were all entrusted to a construct that was never meant to truly do any of them. If you contest that notion, ask yourself what a view actually does in an iOS application.</p>\n\n<p>Or better yet, let the docs tell the story:</p>\n\n<blockquote>\n  <p>A view object renders content within its bounds rectangle and handles any interactions with that content.</p>\n</blockquote>\n\n<blockquote>\n  <p>A view is a subclass of <code class=\"highlighter-rouge\">UIResponder</code> and can respond to touches and other types of events.</p>\n</blockquote>\n\n<p>So it’s hardly disputible to reason that an important part of a view being a view is to render stuff and handle events. Dummy views, views though they are — shouldn’t particpate in any of those activities at best and <em>do</em> participate in some of them at worst.</p>\n\n<p>Using dummy views, we’ve</p>\n\n<ul>\n  <li>Incurred the cost of a view that’s only helping to define a layout.</li>\n  <li>Added a first class member of the view hierarchy, joining in on all the overhead that may be associated with any task related to it.</li>\n  <li>And as part of the responder chain, it could intercept some messages that it was never intended to handle.</li>\n</ul>\n\n<p>😬.</p>\n\n<h3 id=\"there-but-not-really\">There, but Not Really</h3>\n\n<p>But a layout guide is none of those things, nor does it suffer from any of those problems. It’s a non-rendering view, much like its more powerful cousin, <a href=\"http://localhost:4000/UIStackView-a-Field-Guide\"><code class=\"highlighter-rouge\">UIStackView</code></a>.</p>\n\n<p>Unlike a bonafide view, a layout guide actually doesn’t define a view. Instead, it just represents a retangular region in their owning view’s coordinate system. That’s it. This is what allows it to interact with Auto Layout.</p>\n\n<p>The API closely, and purposely, mirrors that of a view:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">scrollView</span> <span class=\"o\">=</span> <span class=\"kt\">UIScrollView</span><span class=\"p\">()</span>\n\n<span class=\"c1\">// Instead of this...  </span>\n<span class=\"k\">let</span> <span class=\"nv\">containerView</span> <span class=\"o\">=</span> <span class=\"kt\">UIView</span><span class=\"p\">()</span>  \n<span class=\"n\">scrollView</span><span class=\"o\">.</span><span class=\"nf\">addSubview</span><span class=\"p\">(</span><span class=\"n\">containerView</span><span class=\"p\">)</span>\n\n<span class=\"n\">containerView</span><span class=\"o\">.</span><span class=\"n\">widthAnchor</span><span class=\"o\">.</span><span class=\"nf\">constraint</span><span class=\"p\">(</span><span class=\"nv\">equalTo</span><span class=\"p\">:</span> <span class=\"n\">scrollView</span><span class=\"o\">.</span><span class=\"n\">widthAnchor</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">isActive</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>  \n<span class=\"n\">containerView</span><span class=\"o\">.</span><span class=\"n\">heightAnchor</span><span class=\"o\">.</span><span class=\"nf\">constraint</span><span class=\"p\">(</span><span class=\"nv\">equalTo</span><span class=\"p\">:</span> <span class=\"n\">scrollView</span><span class=\"o\">.</span><span class=\"n\">heightAnchor</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">isActive</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>  \n<span class=\"n\">containerView</span><span class=\"o\">.</span><span class=\"n\">leftAnchor</span><span class=\"o\">.</span><span class=\"nf\">constraint</span><span class=\"p\">(</span><span class=\"nv\">equalTo</span><span class=\"p\">:</span> <span class=\"n\">scrollView</span><span class=\"o\">.</span><span class=\"n\">leftAnchor</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">isActive</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>  \n<span class=\"n\">containerView</span><span class=\"o\">.</span><span class=\"n\">rightAnchor</span><span class=\"o\">.</span><span class=\"nf\">constraint</span><span class=\"p\">(</span><span class=\"nv\">equalTo</span><span class=\"p\">:</span> <span class=\"n\">scrollView</span><span class=\"o\">.</span><span class=\"n\">rightAnchor</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">isActive</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n\n<span class=\"c1\">// We can do this...  </span>\n<span class=\"k\">let</span> <span class=\"nv\">containerLayoutGuide</span> <span class=\"o\">=</span> <span class=\"kt\">UILayoutGuide</span><span class=\"p\">()</span>  \n<span class=\"n\">scrollView</span><span class=\"o\">.</span><span class=\"nf\">addLayoutGuide</span><span class=\"p\">(</span><span class=\"n\">containerLayoutGuide</span><span class=\"p\">)</span>\n\n<span class=\"n\">containerLayoutGuide</span><span class=\"o\">.</span><span class=\"n\">widthAnchor</span><span class=\"o\">.</span><span class=\"nf\">constraint</span><span class=\"p\">(</span><span class=\"nv\">equalTo</span><span class=\"p\">:</span> <span class=\"n\">scrollView</span><span class=\"o\">.</span><span class=\"n\">widthAnchor</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">isActive</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>  \n<span class=\"n\">containerLayoutGuide</span><span class=\"o\">.</span><span class=\"n\">heightAnchor</span><span class=\"o\">.</span><span class=\"nf\">constraint</span><span class=\"p\">(</span><span class=\"nv\">equalTo</span><span class=\"p\">:</span> <span class=\"n\">scrollView</span><span class=\"o\">.</span><span class=\"n\">heightAnchor</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">isActive</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>  \n<span class=\"n\">containerLayoutGuide</span><span class=\"o\">.</span><span class=\"n\">leftAnchor</span><span class=\"o\">.</span><span class=\"nf\">constraint</span><span class=\"p\">(</span><span class=\"nv\">equalTo</span><span class=\"p\">:</span> <span class=\"n\">scrollView</span><span class=\"o\">.</span><span class=\"n\">leftAnchor</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">isActive</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>  \n<span class=\"n\">containerLayoutGuide</span><span class=\"o\">.</span><span class=\"n\">rightAnchor</span><span class=\"o\">.</span><span class=\"nf\">constraint</span><span class=\"p\">(</span><span class=\"nv\">equalTo</span><span class=\"p\">:</span> <span class=\"n\">scrollView</span><span class=\"o\">.</span><span class=\"n\">rightAnchor</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">isActive</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n</code></pre></div></div>\n<h3 id=\"api-particulars\">API Particulars</h3>\n\n<p>The <code class=\"highlighter-rouge\">UILayoutGuide</code> class is designed to perform all the tasks previously performed by dummy views, but to do it in a safer, more efficient manner.</p>\n\n<p>Layout guides do not define a new view. They do not participate in the view hierarchy. Instead, they simply define a rectangular region in their owning view’s coordinate system that can interact with Auto Layout.</p>\n\n<p>The flow, shown above, is straightforward:</p>\n\n<ul>\n  <li>Instantiate a layout guide.</li>\n  <li>Invoke <code class=\"highlighter-rouge\">addLayoutGuide(_:)</code>to the desired view.</li>\n  <li>Set up valid constraints on the layout guide.</li>\n</ul>\n\n<p>Let’s imagine you needed to constrain some views and center them, but only in the bottom left corner of a view. As in, if you cut the view into four corners, we want to add stuff to the bottom left one. Layout guide makes this easy as it was with dummy views without the baggage:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">bottomLeftGuide</span> <span class=\"o\">=</span> <span class=\"kt\">UILayoutGuide</span><span class=\"p\">()</span>  \n<span class=\"n\">view</span><span class=\"o\">.</span><span class=\"nf\">addLayoutGuide</span><span class=\"p\">(</span><span class=\"n\">bottomLeftGuide</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// External Constraints  </span>\n<span class=\"n\">bottomLeftGuide</span><span class=\"o\">.</span><span class=\"n\">leftAnchor</span><span class=\"o\">.</span><span class=\"nf\">constraint</span><span class=\"p\">(</span><span class=\"nv\">equalTo</span><span class=\"p\">:</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">leftAnchor</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">isActive</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>  \n<span class=\"n\">bottomLeftGuide</span><span class=\"o\">.</span><span class=\"n\">bottomAnchor</span><span class=\"o\">.</span><span class=\"nf\">constraint</span><span class=\"p\">(</span><span class=\"nv\">equalTo</span><span class=\"p\">:</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">bottomAnchor</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">isActive</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>  \n<span class=\"n\">bottomLeftGuide</span><span class=\"o\">.</span><span class=\"n\">widthAnchor</span><span class=\"o\">.</span><span class=\"nf\">constraint</span><span class=\"p\">(</span><span class=\"nv\">equalTo</span><span class=\"p\">:</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">widthAnchor</span><span class=\"p\">,</span> <span class=\"nv\">multiplier</span><span class=\"p\">:</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">isActive</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>  \n<span class=\"n\">bottomLeftGuide</span><span class=\"o\">.</span><span class=\"n\">heightAnchor</span><span class=\"o\">.</span><span class=\"nf\">constraint</span><span class=\"p\">(</span><span class=\"nv\">equalTo</span><span class=\"p\">:</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">heightAnchor</span><span class=\"p\">,</span> <span class=\"nv\">multiplier</span><span class=\"p\">:</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">isActive</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n\n<span class=\"c1\">// Internal constraints, pseudo code for brevity  </span>\n<span class=\"n\">someLabel</span><span class=\"o\">.</span><span class=\"n\">top</span><span class=\"o\">.</span><span class=\"n\">equalToLayoutGuideTop</span>  \n<span class=\"n\">someLabel</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"o\">/</span><span class=\"n\">right</span><span class=\"o\">/</span><span class=\"n\">etc</span>\n\n<span class=\"c1\">// And you can pin all the other views here that you need</span>\n</code></pre></div></div>\n<p>Layout guides solve a particular problem so well that Apple has been laying them down on you for the last several releases of iOS, but you may not have actually noticed. Top layout guide, safe area layout guide — you’re likely familiar with these already.</p>\n\n<p>If I wasn’t such a bleeding heart for writing words about coding stuff, I could’ve let this blog begin and end with one sentence: A layout guide can be used entirely like a dummy view but it doesn’t clog your view hierarchy or respond to events.</p>\n\n<p>But where is the fun in that 😛?</p>\n\n<p>If you want a few extra neat tidbits about layout guide, read on.</p>\n\n<h3 id=\"for-de-ing\">For De🐛-Ing</h3>\n\n<p>Look, Auto Layout goes to hell every now and again no matter what happens. You can either fight the wall of text spit out to the console or run and hide from it. If you opt for the former, take note of layout guide’s <code class=\"highlighter-rouge\">identifier </code>property.</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">bottomLeftLayoutGuide</span><span class=\"o\">.</span><span class=\"n\">identifier</span> <span class=\"o\">=</span> <span class=\"s\">\"BottomLeftGuide\"</span>\n</code></pre></div></div>\n<p>When things go sideways, you at least know if your layout guide is part of the issue (which is half of the battle):</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// When constraints break, it'll show in the logs similar to this  </span>\n<span class=\"err\">“</span><span class=\"o\">&lt;</span><span class=\"kt\">NSLayoutConstraint</span><span class=\"p\">:</span><span class=\"mh\">0x6040002b8a80</span> <span class=\"kt\">UILabel</span><span class=\"p\">:</span><span class=\"mh\">0x7fbb1a39dde0</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"o\">==</span> <span class=\"kt\">BottomLeftGuide</span><span class=\"p\">:</span><span class=\"mh\">0x6040001ae2a0</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"o\">+</span> <span class=\"mi\">16</span><span class=\"o\">&gt;</span><span class=\"err\">”</span>\n</code></pre></div></div>\n<p>Take note that the prefix of “NS” and “UI” are system reserved, and UIKit uses these for the layout guides that it creates.</p>\n\n<p>Another technique that you can use is to query a layout guide’s <code class=\"highlighter-rouge\">layoutFrame</code>at runtime. There are times when one must mix both a frame based approach and Auto Layout within the same view hierarchy and this can help immensely.</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">CGRect</span> <span class=\"n\">guideRect</span> <span class=\"o\">=</span> <span class=\"n\">someLayoutGuide</span><span class=\"o\">.</span><span class=\"n\">layoutFrame</span>  \n<span class=\"n\">aNonAutoLayoutView</span><span class=\"o\">.</span><span class=\"n\">frame</span> <span class=\"o\">=</span> <span class=\"kt\">CGRectMake</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">guideRect</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Remember here though, because the layout frame is derived from Auto Layout, you’ll need to ensure the constraints have been installed before this property is of any use to you. By the time the layout guide’s owning view has called <code class=\"highlighter-rouge\">layoutSubviews</code> — this will have the expected results.</p>\n\n<p>Further, if you need to continue down the layout debugging path you may find the following two components are what you need:</p>\n\n<ul>\n  <li>The <code class=\"highlighter-rouge\">constraintsAffectingLayout:for:)</code> function</li>\n  <li>And the <code class=\"highlighter-rouge\">hasAmbigiousLayout</code> property</li>\n</ul>\n\n<p>Using the function above, you can see all the constraints for a given axis (i.e. vertical or horizontal). Use it to see if there are any unexpected constraints influencing it:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">constraintsEffectingVertical</span><span class=\"p\">:[</span><span class=\"kt\">NSLayoutConstraint</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">bottomLeftGuide</span><span class=\"o\">.</span><span class=\"nf\">constraintsAffectingLayout</span><span class=\"p\">(</span><span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">horizontal</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Lastly, the boolean property acts exactly how it’s named. It’s utility lies in the fact that you can easily check for ambigious constraints on _just _the layout guide using a symbolic breakpoint. If you are like me, sometimes you want the show to come to a total halt if something like this happens. I sometimes wrap this in an <code class=\"highlighter-rouge\">NSAssert()</code> in my own side projects so I have to deal with the issue right away.</p>\n\n<h3 id=\"wrapping-up\">Wrapping Up</h3>\n\n<p>If brevity is the source of wit, then the layout guide may be the sharpest of them all nesteled inside UIKit. It’s insanely simple — just a plain old thing that looks like a view, smells like a view, acts like a view and….isn’t a view. It’s just a rectangular region that loves Auto Layout.</p>\n\n<p>And in so many cases, that’s all a developer needs. So next time you feel yourself reaching for a spacer view, opt to embrace the simplicity and safety of <code class=\"highlighter-rouge\">UILayoutGuide</code>.</p>\n\n<p>Until next time ✌️.</p>",
            "summary": "It’s astounding to think that we lived in a pre Auto Layout world not that long ago. Auto resizing masks and CGRectMake() ruled the lands of user interface development for quite some time.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2018-04-15T00:00:00-05:00",
            "date_modified": "2018-04-15T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["UIKit"]},{
            "id": "http://localhost:4000/Techniques-to-Connect-Websites-to-iOS-Apps",
            "url": "http://localhost:4000/Techniques-to-Connect-Websites-to-iOS-Apps/",
            "title": "Connecting iOS Apps with Their Websites",
            "content_html": "<p>Developing for the web feels like a world that’s simply left me behind. I made a concerted effort to double down on iOS development several years ago. I’ve never looked back or regretted it, and I don’t even know what the rear view mirror looks like. It’s caked in dust by this point, no doubt.</p>\n\n<p>Though I’ve <a href=\"http://localhost:4000/swift-javascript\">mentioned web related things here before</a>, the last time I did any meaningful web development in a professional context, I was using JQuery v4.x.</p>\n\n<p>So, yeah — it’s been a few years and (seemingly) several thousand Javascript frameworks later. I don’t venture into that ecosystem much, and my last trips were on account of the things I’m about to mention here.</p>\n\n<p>Which is, there are some incredibly trivial things one can do on their website to couple it to their iOS app counterpart. If you have the next thirty minutes free, I’d wager you could do all of them listed here.</p>\n\n<p>Let’s rock 🤘</p>\n\n<h3 id=\"give-your-saas-some-sass\">Give your SaaS some sass</h3>\n\n<p>First, what’s the end game here? To simply leverage some hosted .json files on your server and put meta tags in your markup to allow users to jump straight into your app or display information about it more effectively. That’s it.</p>\n\n<p>This stuff is typically key for SaaS business’ or solopreneurs because in the world we live in, where there is a SaaS website a (hopefully) native app will follow. We want to help them dance together.</p>\n\n<p>It helps that iOS 11 built features specifically for this. Open up your camera, point it at a QR code. Boom — iOS shows us the actionable details. Share a link in messages. Get a rich text preview. The list goes on.</p>\n\n<h3 id=\"qr-code-detection\">QR Code Detection</h3>\n\n<p>Let’s start with everyone’s favorite technology, quick response codes.</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//TODO: (insert QR code joke here)</span>\n</code></pre></div></div>\n<p>Creating a QR code that users can point to and then be prompted to download, open or route to a part of your app can be useful. Doing so can be accomplished by setting up an <code class=\"highlighter-rouge\">apple-app-site-association</code> JSON file with an “applinks” key value pair and hosting it. You may already have this file for hand off support.</p>\n\n<p>For this purpose, it looks like this:</p>\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">  \n    </span><span class=\"s2\">\"applinks\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">  \n        </span><span class=\"s2\">\"apps\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span><span class=\"w\">  \n        </span><span class=\"s2\">\"details\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">  \n            </span><span class=\"p\">{</span><span class=\"w\">  \n                </span><span class=\"s2\">\"appID\"</span><span class=\"p\">:</span><span class=\"s2\">\"DJGHSDJGH24.com.blogPost.yolo\"</span><span class=\"p\">,</span><span class=\"w\">  \n                </span><span class=\"s2\">\"paths\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"*\"</span><span class=\"p\">]</span><span class=\"w\">  \n            </span><span class=\"p\">}</span><span class=\"w\">  \n        </span><span class=\"p\">]</span><span class=\"w\">  \n    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n<blockquote>\n  <p>The appID key simply must be your team or app ID,(.), followed by your bundle ID.</p>\n</blockquote>\n\n<p>An easy place for the JSON file to live is typically in the .well-known subdirectory:</p>\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"err\">https</span><span class=\"p\">:</span><span class=\"err\">//wwww.anExample.com/.well-known/apple-app-site-association</span><span class=\"w\">\n</span></code></pre></div></div>\n<p>Additionally, planting it at the root of your server works just fine too.</p>\n\n<p>If you host such a file, the end result is that your app will immediately show to open via a notification when the user points at the QR code. The only metadata your QR code needs is the URL for your website.</p>\n\n<p>No external QR code download, no more taps — nothing. It just happens.</p>\n\n<p>If the user doesn’t have your app, Safari will kick in instead, taking them to your website.</p>\n\n<h3 id=\"getting-particular\">Getting Particular</h3>\n\n<p>You have the ability to specify a few things within your applinks key-value pairs. Let’s look at what’s available:</p>\n\n<ul>\n  <li><strong>apps</strong> — You supply an empty array here. I would tell you why, but I would be making it up because Apple literally says nothing else about it besides that so…¯(°_o)/¯</li>\n  <li><strong>details</strong> — An array of dictionaries, one for each app that your site ultimately supports. Ordering matters in the array, as iOS look up links according to it. This allows you to specify an app to handle a certain part of your website.</li>\n  <li><strong>details[appid]</strong> — The team ID or app ID with a period, and your app’s bundle ID tacked on.</li>\n  <li><strong>details[paths] </strong>— An array or strings that determine which parts of your website are supported by the app. Additionally, you can say which parts **aren’t **supported.</li>\n</ul>\n\n<p>The first three entries don’t merit much more discussion. The paths entry does have some nifty options for excluding content where applicable.</p>\n\n<p>For example, including “NOT “ at the beginning of the path will basically blacklist that content from being used as a universal link:</p>\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">  \n    </span><span class=\"s2\">\"applinks\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">  \n        </span><span class=\"s2\">\"apps\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span><span class=\"w\">  \n        </span><span class=\"s2\">\"details\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">  \n            </span><span class=\"p\">{</span><span class=\"w\">  \n                </span><span class=\"s2\">\"appID\"</span><span class=\"p\">:</span><span class=\"s2\">\"DJGHSDJGH24.com.blogPost.yolo\"</span><span class=\"p\">,</span><span class=\"w\">  \n                </span><span class=\"s2\">\"paths\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"/posts/iOS\"</span><span class=\"p\">,</span><span class=\"w\">  \n                </span><span class=\"s2\">\"NOT /oldPosts/outdated/*\"</span><span class=\"p\">]</span><span class=\"w\">  \n            </span><span class=\"p\">}</span><span class=\"w\">  \n        </span><span class=\"p\">]</span><span class=\"w\">  \n    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n<p>This works much like regex, with support for wildcards:</p>\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">  \n    </span><span class=\"s2\">\"applinks\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">  \n        </span><span class=\"s2\">\"apps\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span><span class=\"w\">  \n        </span><span class=\"s2\">\"details\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">  \n            </span><span class=\"p\">{</span><span class=\"w\">  \n                </span><span class=\"s2\">\"appID\"</span><span class=\"p\">:</span><span class=\"s2\">\"DJGHSDJGH24.com.blogPost.yolo\"</span><span class=\"p\">,</span><span class=\"w\">  \n                </span><span class=\"s2\">\"paths\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"/posts/iOS\"</span><span class=\"p\">,</span><span class=\"w\">  \n                </span><span class=\"s2\">\"/oldPosts/201?/*\"</span><span class=\"p\">]</span><span class=\"w\">  \n            </span><span class=\"p\">}</span><span class=\"w\">  \n        </span><span class=\"p\">]</span><span class=\"w\">  \n    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n<p>A few random words of advice:</p>\n\n<ul>\n  <li>Keep in mind these matches are case sensitive.</li>\n  <li>If you’re rocking a few domains, you’ll need to roll an <code class=\"highlighter-rouge\">apple-app-site-association</code> file for each one that your app supports. Example: apple.com would have different motives than someProducts.apple.com</li>\n  <li>One doesn’t actually need to appended “.json” to the JSON file. Don’t ask me how I know this, or how much hypothetical time was lost to it.</li>\n  <li>If you associate several apps within one <code class=\"highlighter-rouge\">apple-app-site-association</code> file, iOS will handle it by presenting an alert showing each one to determine which is opened. The next time this happens, iOS will suggest the last choice as a default — but users can still switch this via a force touch or by pulling down on the notification.</li>\n  <li>Safari handles all of this as well. If you hosted the QR code as an image, and an iOS user 3D touches on it — this exact same flows happens.</li>\n</ul>\n\n<h3 id=\"associated-domains\">Associated Domains</h3>\n\n<p>As an iOS developer, you’ve got some duties too. Chief among them is to let Xcode know you’re expecting this to happen. This is done by the “Associated Domains” capability for your app binary.</p>\n\n<p>Flip it on within Xcode and add some entries for each one you wish to support. Again, you might’ve spent time here already if you’ve developed for hand off capabilities.</p>\n\n<p>For this particular type of routing, though, it would look like this:</p>\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">i.e.</span><span class=\"w\"> </span><span class=\"err\">applinks</span><span class=\"p\">:</span><span class=\"w\">  \n</span><span class=\"err\">applinks</span><span class=\"p\">:</span><span class=\"err\">anExample.com</span><span class=\"w\">\n</span></code></pre></div></div>\n<p>As we’ll see later, this creates a handshake of sorts that confirms both the app and website trust one another. Xcode will generate an entitlement to reconcile the security aspect and apply it on your app’s behalf. Spoiler alert, this opens up the door for quick credential retrieval too, as we’ll see later.</p>\n\n<p>Of course, this means you’ll need to handle the user activity passed to you within your app delegate. But, that’s a blog post for another day.</p>\n\n<p>Using universal app links is great, and I hope more apps use it as time goes on. They can happen outside of a QR code context too. They enjoy certain advantages over custom URL schemes in that they are more secure due to the handshake, they can’t be hijacked or claimed by any other app and the only party who can associate one to your app, is you.</p>\n\n<h3 id=\"web-credentials\">Web Credentials</h3>\n\n<p>This nifty trick is absolutely essential for you if your app has a log in mechanism or any user portal system online. By employing password autofill, users can tap on the lock icon in the quicktype bar that appears over the keyboard, authenticate and then have their information automatically filled out.</p>\n\n<p>It’s beautiful, and I use it daily.</p>\n\n<p>To allow for this to happen, there is minor housekeeping that you need to do for the text fields or text views representing your log in. Simply assign the correct values added in iOS 11 to their textContentType property so iOS knows what goes where:</p>\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"err\">loginField.textContentType</span><span class=\"w\"> </span><span class=\"err\">=</span><span class=\"w\"> </span><span class=\"err\">.username</span><span class=\"w\">  \n</span><span class=\"err\">passwordField.textContentType</span><span class=\"w\"> </span><span class=\"err\">=</span><span class=\"w\"> </span><span class=\"err\">.password</span><span class=\"w\">\n</span></code></pre></div></div>\n<p>That’s all it takes from a coding standpoint — nothing more than assigning to a property (if you don’t, you leave it up to iOS’ heuristics to make the assumptions). There’s nothing left other than to respond accordingly to the incoming “did change” delegate methods or notifications that’ll be fired off with the credentials.</p>\n\n<p>Technically, you could stop here and things would work….<em>ish</em>.</p>\n\n<p>Users would just get the quick type bar, but your site’s credentials wouldn’t be offered up within it. They’d just see the lock icon, then have to auth up, search for it and select it.</p>\n\n<p>Amateur hour. Obviously, we’d prefer the user’s credentials to show up immediately once either one of those text controls becomes first responder.</p>\n\n<h3 id=\"establishing-trust-again\">Establishing Trust, Again</h3>\n\n<p>Which brings us back to our <code class=\"highlighter-rouge\">apple-app-site-association</code> file.</p>\n\n<p>Going deeper into the same thought above, a signed entitlement tells iOS which sites you are associated with. The secure, two way link is established in particular when your app is installed or updated. At that point iOS does a wellness check by traversing your domains listed within your Associated Domains (which we mentioned above) and pings each one to see if it gets a valid association file.</p>\n\n<p>If the app points to the website and the website points to the app — we’re cooking.</p>\n\n<p>The entry under Associated Domains for password autofill looks a bit different than the above app links we entered before, as it’s prefixed with “webcredentials”:</p>\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"err\">webcredentials</span><span class=\"p\">:</span><span class=\"err\">anExample.com</span><span class=\"w\">\n</span></code></pre></div></div>\n<blockquote>\n  <p>XCode gonna’ Xcode. If you’re still seeing an error at this point, you might need to hop over to the developer portal and enable Associated Domains for your app ID.</p>\n</blockquote>\n\n<p>As you’ve likely keyed in on, the Associated Domains entries follow the same pattern of including a service (i.e. activitycontinuation, applinks, etc) and domain:</p>\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"err\">&lt;service&gt;</span><span class=\"p\">:</span><span class=\"err\">&lt;fully</span><span class=\"w\"> </span><span class=\"err\">qualified</span><span class=\"w\"> </span><span class=\"err\">domain&gt;</span><span class=\"p\">[:</span><span class=\"err\">port</span><span class=\"w\"> </span><span class=\"err\">number</span><span class=\"p\">]</span><span class=\"w\">\n</span></code></pre></div></div>\n<p>From there, it’s a case of adding that to your association file:</p>\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">  \n    </span><span class=\"s2\">\"applinks\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">  \n    </span><span class=\"s2\">\"apps\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span><span class=\"w\">  \n    </span><span class=\"s2\">\"details\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">  \n        </span><span class=\"p\">{</span><span class=\"w\">  \n            </span><span class=\"s2\">\"appID\"</span><span class=\"p\">:</span><span class=\"s2\">\"DJGHSDJGH24.com.blogPost.yolo\"</span><span class=\"p\">,</span><span class=\"w\">  \n            </span><span class=\"s2\">\"paths\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"/posts/iOS\"</span><span class=\"p\">,</span><span class=\"w\">  \n            </span><span class=\"s2\">\"/oldPosts/201?/*\"</span><span class=\"p\">]</span><span class=\"w\">  \n        </span><span class=\"p\">}</span><span class=\"w\">  \n    </span><span class=\"p\">]</span><span class=\"w\">  \n    </span><span class=\"p\">},</span><span class=\"w\">  \n    </span><span class=\"s2\">\"webcredentials\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">  \n        </span><span class=\"s2\">\"apps\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"DJGHSDJGH24.com.blogPost.yolo\"</span><span class=\"p\">]</span><span class=\"w\">  \n    </span><span class=\"p\">}</span><span class=\"w\">  \n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n<p>The only key to worry about is “apps”, which is just an array of strings (their value constructed the same way as above with app links) that represent the apps your site provides log in information for.</p>\n\n<p>Once you throw that up on your site — the entire web credentials and password autofill pipeline is all set. I can’t tell you how much times this saves from a user perspective. It goes up by an order of magnitude if one uses Safari’s password suggestions as well.</p>\n\n<h3 id=\"image-links\">Image Links</h3>\n\n<p>Sharing links within Messages is a ubiquitous practice among iOS users. Nothing is more rewarding than tapping on the link cards, with their inviting .png hero images sitting there beckoning us to load up a website within Safari.</p>\n\n<p>Except when that doesn’t happen, and it’s just plain text 😬.</p>\n\n<p>This is so easy to avoid, though, as you easily can control the title, icon, image and even video that displays. Using the <a href=\"http://ogp.me\">open graph protocol</a>, you can supply all of this stuff inside your site’s  tag.</p>\n\n<p><strong>Title (if this isn’t present, it’ll take your site’s title):</strong></p>\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>// Just in case, Javascript isn't run when generating rich links - so the value needs to be in the source. They can't be created dynamically.\n<span class=\"nt\">&lt;meta</span> <span class=\"na\">name=</span><span class=\"s\">\"og:title\"</span> <span class=\"na\">content=</span><span class=\"s\">\"The Title\"</span> <span class=\"nt\">/&gt;</span> \n</code></pre></div></div>\n\n<p><strong>Icons (derived from a favicon or apple touch icon if it’s there. If not, you can roll with something like this):</strong></p>\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">\"icon\"</span> <span class=\"na\">href=</span><span class=\"s\">\"path/to/icon\"</span> <span class=\"na\">type=</span><span class=\"s\">\"image/png\"</span> <span class=\"nt\">/&gt;</span>\n</code></pre></div></div>\n\n<p><strong>Image (replaces the icon if present, but still provide both because sometimes Messages prefers the icon over an image in situations like poor networking conditions)</strong></p>\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;meta</span> <span class=\"na\">name=</span><span class=\"s\">\"og:image\"</span> <span class=\"na\">content=</span><span class=\"s\">\"path/to/image.png\"</span> <span class=\"nt\">/&gt;</span>\n</code></pre></div></div>\n\n<p><strong>Video (of note, you can supply a URL to a YouTube video, which is the only video player network that’ll work if you don’t use a file iOS can natively play)</strong></p>\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;meta</span> <span class=\"na\">name=</span><span class=\"s\">\"og:video\"</span> <span class=\"na\">content=</span><span class=\"s\">\"path/to/video.mp4\"</span> <span class=\"nt\">/&gt;</span>\n</code></pre></div></div>\n\n<p>That’s all it takes to get the pretty, informational rich links when your website is shared within Messages. Nice.</p>\n\n<h3 id=\"the-you-probably-are-already-doing-this-but-ill-add-it-anyways-paragraph\">The “You probably are already doing this but I’ll add it anyways” Paragraph</h3>\n\n<p>Smart banners. At this point, you’re probably using them.</p>\n\n<p>But just in case you aren’t, add a meta tag with your app ID to take care of it. When potential users visit your site, they’ll get that call to action banner at the top to download it.</p>\n\n<p>If you’re wanting to hunt down your app ID quickly, just visit <a href=\"http://itunes.apple.com/linkmaker/\">iTunes Link Maker</a>. The entire meta tag can be as simple as this:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;meta</span> <span class=\"na\">name=</span><span class=\"s\">\"apple-iunes-app\"</span> <span class=\"na\">content=</span><span class=\"s\">\"app-id=123456789\"</span><span class=\"nt\">&gt;</span>\n</code></pre></div></div>\n\n<p>If you need to, you can also include an iTunes affiliate string and app argument parameter to deep link to a specific controller to keep context consistent with where a user might be on your website.</p>\n\n<p>Generally, though, this is tacked on your landing page and that’s good enough to serve its purpose. Now, go forth and take back what could’ve been just an ephemeral thought about your app and convert it to an install 💪.</p>\n\n<h3 id=\"wrapping-up\">Wrapping Up</h3>\n\n<p>The lot of us craft software for our 9–5 and craft software to scratch our own creative itch. Eventually, all roads lead to a website talking about one or the other. Do them both justice, step away from Xcode and throw up a json file or two or include some simple meta tags that could help slip users right into your beautiful code.</p>\n\n<p>Things like this are almost like the chore list for iOS engineers. We may not think about them first, we may not wake up to crank out config files — but hey, they can help our endgame and move the needle towards exposure. So why not?</p>\n\n<p>Until next time ✌️.</p>",
            "summary": "Developing for the web feels like a world that’s simply left me behind. I made a concerted effort to double down on iOS development several years ago. I’ve never looked back or regretted it, and I don’t even know what the rear view mirror looks like. It’s caked in dust by this point, no doubt.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2018-02-03T00:00:00-06:00",
            "date_modified": "2018-02-03T00:00:00-06:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["Misc"]},{
            "id": "http://localhost:4000/NSMeasurement",
            "url": "http://localhost:4000/NSMeasurement/",
            "title": "NSMeasurement",
            "content_html": "<p>Measuring units, things or items in software won’t always be the most glamorous job for software engineers. Though not as thrilling as writing performant user interface libraries nor as fulfilling as conjuring up networking code that weaves concurrent execution with ease, measuring units in iOS is still done more often than not, wrong.</p>\n\n<p>How can one author such code in an internationlized manner and not in a precipitous one? Foundation, as is so often the case, holds the answer. And it has since iOS 10.</p>\n\n<p>This week, let’s look at NSMeasurement and friends.</p>\n\n<h3 id=\"more-common-than-you-think\">More Common than You Think</h3>\n\n<p>Software has always had situations that crop up which present users with several things that are either measurable or generally quanitifiable. And when that software (iOS) runs on billions of devices across the globe, the need to represent internationalized values of those things becomes not only more important, but quite key.</p>\n\n<p>Getting such measurements and units right isn’t a baseline experience, you should just expect it of your software.</p>\n\n<p>So with that- these APIs aid not only just with the obvious “converter” apps, but also with games, shopping lists and everything else in between:</p>\n<ul>\n  <li>Are you representing a measurement of time ⌚️?</li>\n  <li>A distance traveled 🚙?</li>\n  <li>The rate at which we traveled 🗺?</li>\n  <li>The weight of an object ⚖️?</li>\n</ul>\n\n<p>As such, the temptation to use a simple double type makes sense on the surface level and simply breaks apart anywhere else:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//Technically we even set up the variable name for failure  </span>\n<span class=\"k\">let</span> <span class=\"nv\">milesTraveled</span><span class=\"p\">:</span><span class=\"kt\">Double</span>\n</code></pre></div></div>\n<h3 id=\"nsmeasurement-and-all-his-units\">NSMeasurement and all his Units</h3>\n\n<p>Following the previous example, what we really need is an accurate, bonafide construct to represent a measurement. And while miles is certainly a measurement, it’s only one that generally makes sense within the context of Murica’ 🇺🇸. As such, Foundation’s support for a measurement is tactfully generic:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">struct</span> <span class=\"kt\">Measurement</span> \n</code></pre></div></div>\n<blockquote>\n  <p>Note that within the text, for stylistic purposes and because I code in Objective-C daily, I’ll refer to the frameworks with their NS prefix. All of these objects are properly bridged over to Swift as value types and structs.</p>\n</blockquote>\n\n<p>It provides a way to provide a generic <em>unit</em> of measurement and also a value that corresponds to it. Its initializer will ask for both:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">value</span><span class=\"p\">:</span><span class=\"kt\">Double</span><span class=\"p\">,</span> <span class=\"nv\">unit</span><span class=\"p\">:</span><span class=\"kt\">UnitType</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Every unit will always have a symbol, though not every unit has a dimension nor will they always be equivalent to one another. It’s something to note, sure, but one will most likely work with dimensional units. But, it’s for this reason that NSUnit’s designated initializer will require only a symbol:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"kt\">Unit</span><span class=\"p\">:</span> <span class=\"kt\">NSObject</span><span class=\"p\">,</span> <span class=\"kt\">NSCopying</span>  \n<span class=\"p\">{</span>  \n    <span class=\"kd\">public</span> <span class=\"k\">let</span> <span class=\"nv\">symbol</span><span class=\"p\">:</span><span class=\"kt\">String</span>  \n    <span class=\"kd\">public</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">symbol</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span>  \n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>When it comes to NSMeasurement, this unit type drives the majority of the work, and you can define which to use via its initializer, but more commonly you’ll use an NSDimension (which subclasses NSUnit) provided to us by Apple. Each dimensional unit will then drive down further into a given dimension that exists within the unit.</p>\n\n<p>For example, say we wanted to measure time. Our unit would be duration, but we’ve got several ways to represent duration such as the second, minute and hour:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">abstractValue</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>\n\n<span class=\"c1\">// 1 second  </span>\n<span class=\"k\">let</span> <span class=\"nv\">seconds</span> <span class=\"o\">=</span> <span class=\"kt\">Measurement</span><span class=\"p\">(</span><span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"n\">abstractValue</span><span class=\"p\">,</span> <span class=\"nv\">unit</span><span class=\"p\">:</span> <span class=\"kt\">UnitDuration</span><span class=\"o\">.</span><span class=\"n\">seconds</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// 1 minute  </span>\n<span class=\"k\">let</span> <span class=\"nv\">minutes</span> <span class=\"o\">=</span> <span class=\"kt\">Measurement</span><span class=\"p\">(</span><span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"n\">abstractValue</span><span class=\"p\">,</span> <span class=\"nv\">unit</span><span class=\"p\">:</span> <span class=\"kt\">UnitDuration</span><span class=\"o\">.</span><span class=\"n\">minutes</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// 1 hour  </span>\n<span class=\"k\">let</span> <span class=\"nv\">hours</span> <span class=\"o\">=</span> <span class=\"kt\">Measurement</span><span class=\"p\">(</span><span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"n\">abstractValue</span><span class=\"p\">,</span> <span class=\"nv\">unit</span><span class=\"p\">:</span> <span class=\"kt\">UnitDuration</span><span class=\"o\">.</span><span class=\"n\">hours</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Foundation includes a truckload of dimensional units, everything from electrical currents to pressure. Though you are free to subclass and create your own units, in fact — there is quite robust support for that, I’m not sure you’ll ever need to.</p>\n\n<p>Here are some common dimensional units baked in for free:</p>\n\n<ul>\n  <li>UnitLength : Base Unit is meters (m)</li>\n  <li>UnitMass : Base unit is kilograms (kg)</li>\n  <li>UnitDuration : Base unit is seconds (sec)</li>\n  <li>UnitArea : Base unit is square meters (m²)</li>\n  <li>UnitAcceleration : Base unit is meters per second squared (m/s²)</li>\n</ul>\n\n<p>There are about 170 dimensional unit types and it’s likely Foundation has thought of your use case.</p>\n\n<h3 id=\"operating-on-measurements\">Operating on Measurements</h3>\n\n<p>Working with measurements is trivial due to the fact that they conform to equatable out of the box, so comparisons are carried out uniformly:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">abstractValue</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">seconds</span> <span class=\"o\">=</span> <span class=\"kt\">Measurement</span><span class=\"p\">(</span><span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"n\">abstractValue</span><span class=\"p\">,</span> <span class=\"nv\">unit</span><span class=\"p\">:</span> <span class=\"kt\">UnitDuration</span><span class=\"o\">.</span><span class=\"n\">seconds</span><span class=\"p\">)</span>  \n<span class=\"k\">let</span> <span class=\"nv\">minutes</span> <span class=\"o\">=</span> <span class=\"kt\">Measurement</span><span class=\"p\">(</span><span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"n\">abstractValue</span><span class=\"p\">,</span> <span class=\"nv\">unit</span><span class=\"p\">:</span> <span class=\"kt\">UnitDuration</span><span class=\"o\">.</span><span class=\"n\">minutes</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// 61.0 seconds, measured in the dimension's base unit  </span>\n<span class=\"k\">let</span> <span class=\"nv\">totalTime</span> <span class=\"o\">=</span> <span class=\"n\">seconds</span> <span class=\"o\">+</span> <span class=\"n\">minutes</span>\n\n<span class=\"c1\">// 30.5 seconds  </span>\n<span class=\"k\">let</span> <span class=\"nv\">halfTheTime</span> <span class=\"o\">=</span> <span class=\"n\">totalTime</span><span class=\"o\">/</span><span class=\"mi\">2</span>\n</code></pre></div></div>\n<p>The entire measurement API does all of the heavy lifting for you. This is true when you operate on units of the same dimension but in different forms. The result of the operation will simply provide the base unit type:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">imperialLength</span> <span class=\"o\">=</span> <span class=\"kt\">Measurement</span><span class=\"p\">(</span><span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"mf\">5280.0</span><span class=\"p\">,</span> <span class=\"nv\">unit</span><span class=\"p\">:</span> <span class=\"kt\">UnitLength</span><span class=\"o\">.</span><span class=\"n\">feet</span><span class=\"p\">)</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">metricLength</span> <span class=\"o\">=</span> <span class=\"kt\">Measurement</span><span class=\"p\">(</span><span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"mf\">0.62</span><span class=\"p\">,</span> <span class=\"nv\">unit</span><span class=\"p\">:</span> <span class=\"kt\">UnitLength</span><span class=\"o\">.</span><span class=\"n\">kilometers</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// 2229.344 meters  </span>\n<span class=\"k\">let</span> <span class=\"nv\">totalLength</span> <span class=\"o\">=</span> <span class=\"n\">imperialLength</span> <span class=\"o\">+</span> <span class=\"n\">metricLength</span>\n</code></pre></div></div>\n<p>Extending the usefulness is NSUnitConverter, which is an abstract class that converts a unit to and from the base unit of its given dimension. For most cases, that’s going to be units that adhere to a linear equation or a scale factor. As such, UnitConverterLinear will be supplied:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">imperialLength</span> <span class=\"o\">=</span> <span class=\"kt\">Measurement</span><span class=\"p\">(</span><span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"mf\">5280.0</span><span class=\"p\">,</span> <span class=\"nv\">unit</span><span class=\"p\">:</span> <span class=\"kt\">UnitLength</span><span class=\"o\">.</span><span class=\"n\">feet</span><span class=\"p\">)</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">metricLength</span> <span class=\"o\">=</span> <span class=\"kt\">Measurement</span><span class=\"p\">(</span><span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"mf\">0.62</span><span class=\"p\">,</span> <span class=\"nv\">unit</span><span class=\"p\">:</span> <span class=\"kt\">UnitLength</span><span class=\"o\">.</span><span class=\"n\">kilometers</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// 2229.344 meters  </span>\n<span class=\"k\">let</span> <span class=\"nv\">totalLength</span> <span class=\"o\">=</span> <span class=\"n\">imperialLength</span> <span class=\"o\">+</span> <span class=\"n\">metricLength</span>\n\n<span class=\"c1\">// 1.385 miles  </span>\n<span class=\"k\">let</span> <span class=\"nv\">justMiles</span> <span class=\"o\">=</span> <span class=\"n\">totalLength</span><span class=\"o\">.</span><span class=\"nf\">converted</span><span class=\"p\">(</span><span class=\"nv\">to</span><span class=\"p\">:</span> <span class=\"kt\">UnitLength</span><span class=\"o\">.</span><span class=\"n\">miles</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Don’t worry about creating conversions that don’t relate to one another. These will produce build time errors due to each type’s conversion requiring its generic unit type:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Build error  </span>\n<span class=\"k\">let</span> <span class=\"nv\">nonsense</span> <span class=\"o\">=</span> <span class=\"n\">totalLength</span><span class=\"o\">.</span><span class=\"nf\">converted</span><span class=\"p\">(</span><span class=\"nv\">to</span><span class=\"p\">:</span> <span class=\"kt\">UnitTemperature</span><span class=\"o\">.</span><span class=\"n\">celsius</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<h3 id=\"user-facing-values\">User Facing Values</h3>\n\n<p>Making these values show up in your user interface is going to be quite familiar if you’ve ventured into NSNumberFormatter’s waters. Its close cousin, NSMeasurementFormatter, use is essentially identical.</p>\n\n<p>This is quite ideal, as writing these types of strings on our own time would quickly become a chore.</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isCanada</span><span class=\"p\">)</span>  \n<span class=\"p\">{</span>  \n    <span class=\"c1\">// kilometers 👌  </span>\n<span class=\"p\">}</span>  \n<span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isChinese</span><span class=\"p\">)</span>  \n<span class=\"p\">{</span>  \n    <span class=\"c1\">// Translate the unit 😐  </span>\n<span class=\"p\">}</span>  \n<span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isArabic</span><span class=\"p\">)</span>  \n<span class=\"p\">{</span>  \n    <span class=\"c1\">// Translate the unit, number representation AND make it right to left 😱  </span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>Of course, Foundation and friends nails it:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">distance</span> <span class=\"o\">=</span> <span class=\"kt\">Measurement</span><span class=\"p\">(</span><span class=\"nv\">value</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"nv\">unit</span><span class=\"p\">:</span> <span class=\"kt\">UnitLength</span><span class=\"o\">.</span><span class=\"n\">miles</span><span class=\"p\">)</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">frenchDistance</span> <span class=\"o\">=</span> <span class=\"kt\">MeasurementFormatter</span><span class=\"p\">()</span>  \n<span class=\"n\">frenchDistance</span><span class=\"o\">.</span><span class=\"n\">locale</span> <span class=\"o\">=</span> <span class=\"kt\">Locale</span><span class=\"p\">(</span><span class=\"nv\">identifier</span><span class=\"p\">:</span> <span class=\"s\">\"fr\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">chineseDistance</span> <span class=\"o\">=</span> <span class=\"kt\">MeasurementFormatter</span><span class=\"p\">()</span>  \n<span class=\"n\">chineseDistance</span><span class=\"o\">.</span><span class=\"n\">locale</span> <span class=\"o\">=</span> <span class=\"kt\">Locale</span><span class=\"p\">(</span><span class=\"nv\">identifier</span><span class=\"p\">:</span> <span class=\"s\">\"zh\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">arabicDistance</span> <span class=\"o\">=</span> <span class=\"kt\">MeasurementFormatter</span><span class=\"p\">()</span>  \n<span class=\"n\">arabicDistance</span><span class=\"o\">.</span><span class=\"n\">locale</span> <span class=\"o\">=</span> <span class=\"kt\">Locale</span><span class=\"p\">(</span><span class=\"nv\">identifier</span><span class=\"p\">:</span> <span class=\"s\">\"ar\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// 🇫🇷** **-&gt; 16,093 km  </span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"🇫🇷 -&gt; (frenchDistance.string(from: distance))\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// 🇨🇳** **-&gt; 16.093公里  </span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"🇨🇳 -&gt; (chineseDistance.string(from: distance))\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// 🇯🇴** **-&gt; ١٦٫٠٩٣** كم**  </span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"🇯🇴 -&gt; (arabicDistance.string(from: distance))\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Since measurements tie in closely with numbers, it’s also possible to pair a measurement formatter with a number formatter to specify digits, for example:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">distance</span> <span class=\"o\">=</span> <span class=\"kt\">Measurement</span><span class=\"p\">(</span><span class=\"nv\">value</span><span class=\"p\">:</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"nv\">unit</span><span class=\"p\">:</span> <span class=\"kt\">UnitLength</span><span class=\"o\">.</span><span class=\"n\">miles</span><span class=\"p\">)</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">frenchDistance</span> <span class=\"o\">=</span> <span class=\"kt\">MeasurementFormatter</span><span class=\"p\">()</span>  \n<span class=\"n\">frenchDistance</span><span class=\"o\">.</span><span class=\"n\">locale</span> <span class=\"o\">=</span> <span class=\"kt\">Locale</span><span class=\"p\">(</span><span class=\"nv\">identifier</span><span class=\"p\">:</span> <span class=\"s\">\"fr\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// 🇫🇷** **-&gt; 0,322 km  </span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"🇫🇷 -&gt; (frenchDistance.string(from: distance))\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">digitFormat</span> <span class=\"o\">=</span> <span class=\"kt\">NumberFormatter</span><span class=\"p\">()</span>  \n<span class=\"n\">digitFormat</span><span class=\"o\">.</span><span class=\"n\">minimumSignificantDigits</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n\n<span class=\"n\">frenchDistance</span><span class=\"o\">.</span><span class=\"n\">numberFormatter</span> <span class=\"o\">=</span> <span class=\"n\">digitFormat</span>\n\n<span class=\"c1\">// 🇫🇷** **-&gt; 0.321868 km  </span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"🇫🇷 -&gt; (frenchDistance.string(from: distance))\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>There are several configurations that the measurement formatter affords to you. Be sure to glance over its <a href=\"https://developer.apple.com/documentation/foundation/measurementformatter\">documentation</a>. Also note that the formatter will takes its default system locale when initialized, so it’s typically unnecessary to directly assign to its locale property as we’ve done here.</p>\n\n<h3 id=\"testing-localesthe-easy-way\">Testing Locales — The .easy Way</h3>\n\n<p>A quick foot note. Part of the magic of utilizing Foundation’s measurement and unit APIs is that they are locale aware. If you’re currently changing the location within the iOS simualtor to see how things shake out, there is another way you might prefer.</p>\n\n<p>Just dupe your scheme, and pick the desired locale:</p>\n\n<ul>\n  <li>Edit Scheme</li>\n  <li>Hit “Duplicate Scheme”, it’s in the bottom left in Xcode 9</li>\n  <li>Name it</li>\n  <li>Under Run -&gt; Options -&gt; Application Region, then choose the region to test with</li>\n</ul>\n\n<p>This is nice, because it’s a no fuss and deliberate approach. It requires no code changes or mucking around with the (always reliable 🤞) iOS simulator.</p>\n\n<p>Additionally, you can use the same approach to test string localizations within your interface by editing the “Application Language” in the same manner you edited the region.</p>\n\n<h3 id=\"wrapping-up\">Wrapping Up</h3>\n\n<p>It wasn’t until I started working on an international team that I truly began to appreciate accurate measurements within iOS. Or — even the correct unit of measurement <em>period</em>.</p>\n\n<p>While the rest of the world embraces the metric system, here I am sticking out like a sore thumb while communicating distances via the imperial system. Siri has a soul, and I know this because she is sick of answering how many miles equals 1 kilometer. I hear it in her cold, hard, digital voice when she answers it for 144th time for me 🤖.</p>\n\n<p>Let’s all aspire to not be that app that delivers the wrong units, or incorrect measurements, in our own software. Foundation has us covered.</p>\n\n<p>Until next time ✌️.</p>",
            "summary": "Measuring units, things or items in software won’t always be the most glamorous job for software engineers. Though not as thrilling as writing performant user interface libraries nor as fulfilling as conjuring up networking code that weaves concurrent execution with ease, measuring units in iOS is still done more often than not, wrong.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2017-12-17T00:00:00-06:00",
            "date_modified": "2017-12-17T00:00:00-06:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["Foundation"]},{
            "id": "http://localhost:4000/Copy-on-Write-in-iOS-11",
            "url": "http://localhost:4000/Copy-on-Write-in-iOS-11/",
            "title": "Copy on Write",
            "content_html": "<p>Foundation is the unsung hero of iOS development. Powerful due in part to its maturity and ubiquity — it boasts all of six major implementations, it treats engineers to everything from the basic object to annual optimizations under the hood at WWDC. And the best optimizations are the ones I don’t even have to make. They just happen.</p>\n\n<p>With copy on write semantics for Foundation collections, this week’s topic, that’s exactly what we get.</p>\n\n<h3 id=\"cow-primer\">C.o.W Primer</h3>\n\n<p>Both the amatuear and the veteran programmer know that we don’t go far without embracing collections, yet by and large there isn’t much thought or questioning that occurs as to what their doing behind the scenes or how exactly they work beyond our CompSci 101 course.</p>\n\n<p>It can sometimes serve as intimidating subject matter, but luckily copy on write is both a simple concept and, as such, is easy to conceptualize. The elevator pitch is that instances pointing to the same object shouldn’t need to employ full copies unless one of them, does in fact, mutate:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">NSMutableArray</span> <span class=\"o\">*</span><span class=\"n\">ar1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"err\">@</span><span class=\"p\">[</span><span class=\"s\">@\"TTIDG\"</span><span class=\"p\">,</span><span class=\"s\">@\"Pizza\"</span><span class=\"p\">]</span> <span class=\"n\">mutableCopy</span><span class=\"p\">];</span>  \n<span class=\"kt\">NSMutableArray</span> <span class=\"o\">*</span><span class=\"n\">ar2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ar1</span> <span class=\"n\">mutableCopy</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<p>Here, both variables hold the same data. So why create a full copy unless it’s actually needed? This means that instead of creating the full copy, we can just utilize pointers to the same backing store and enjoy a much more efficient O(1) operation.</p>\n\n<p>All we’re talking about here is an optimization strategy. Even better, the whole technique is all in the name. We shouldn’t copy data unless it’s written to, in which case — we have a reason to carry forward the actual copy. Copy on write.</p>\n\n<p>So, TL;DR — copies are super cheap now. In fact, they are almost downright free for defensive copying code. In the past, they were typically linear at best.</p>\n\n<h3 id=\"foundation-implications\">Foundation Implications</h3>\n\n<p>This means that our good friends NSSet, NSDictionary and NSArray will all benefit from the optimization made by the folks maintaining the Foundation Framework. Going back to our previous example:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">NSArray</span> <span class=\"o\">*</span><span class=\"n\">ar1</span> <span class=\"o\">=</span> <span class=\"err\">@</span><span class=\"p\">[</span><span class=\"s\">@\"TTIDG\"</span><span class=\"p\">,</span><span class=\"s\">@\"Pizza\"</span><span class=\"p\">];</span>  \n<span class=\"kt\">NSMutableArray</span> <span class=\"o\">*</span><span class=\"n\">ar2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ar1</span> <span class=\"n\">mutableCopy</span><span class=\"p\">];</span>\n\n<span class=\"c1\">// Currently, both arrays point to the same backing store</span>\n\n<span class=\"c1\">// Now a mutation occurred, with CoW - this is where the copy actually takes place  </span>\n<span class=\"p\">[</span><span class=\"n\">ar1</span> <span class=\"n\">removeLastItem</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<p>A large number of application flows might not ever reach a mutated state, thus the copy operation was effectively wasted effort. If it doesn’t occur, the only hit we’ll take with CoW is the allocation of the second collection — which likely won’t be much.</p>\n\n<p>But — be mindful of what it isn’t:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">NSArray</span> <span class=\"o\">*</span><span class=\"n\">ar1</span> <span class=\"o\">=</span> <span class=\"err\">@</span><span class=\"p\">[</span><span class=\"s\">@\"TTIDG\"</span><span class=\"p\">,</span><span class=\"s\">@\"Pizza\"</span><span class=\"p\">];</span>  \n<span class=\"kt\">NSMutableArray</span> <span class=\"o\">*</span><span class=\"n\">ar2</span> <span class=\"o\">=</span> <span class=\"n\">ar1</span><span class=\"p\">;</span>\n</code></pre></div></div>\n<p>This isn’t the same at all, and copy on write doesn’t apply. Here we’re pointing to the exact same reference in memory. Remember that this particular optimization is all about efficient copies. Even though pointing to a reference and copying data deals with sharing said data, they are much different in implentation.</p>\n\n<h3 id=\"applications\">Applications</h3>\n\n<p>Even though copy on write is a performance optimization, it shouldn’t soley be thought as one in pragmatic terms. It’s great that it’s there, we’ll benefit from it without having lifted a finger — but how we can leverage it to do things we maybe couldn’t before?</p>\n\n<p><a href=\"https://developer.apple.com/videos/play/wwdc2017/244/\">Session 244 at WWDC 17</a> offered a few great examples. Suppose we have an array property:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">@property</span> <span class=\"p\">(</span><span class=\"n\">strong</span><span class=\"p\">)</span> <span class=\"kt\">NSArray</span> <span class=\"o\">*</span><span class=\"n\">foo</span><span class=\"p\">;</span>\n</code></pre></div></div>\n<p>The intention of the declaration implies that it shouldn’t have mutable state. But hey — life comes at you fast:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Trolling  </span>\n<span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSMutableArray</span> <span class=\"k\">new</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<p>Now, consider this:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">@property</span> <span class=\"p\">(</span><span class=\"n\">copy</span><span class=\"p\">)</span> <span class=\"kt\">NSArray</span> <span class=\"o\">*</span><span class=\"n\">copiedArray</span><span class=\"p\">;</span>  \n<span class=\"kd\">@property</span> <span class=\"p\">(</span><span class=\"n\">strong</span><span class=\"p\">)</span> <span class=\"kt\">NSArray</span> <span class=\"o\">*</span><span class=\"n\">stongArray</span><span class=\"p\">;</span>\n\n<span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">copiedArray</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSMutableArray</span> <span class=\"k\">new</span><span class=\"p\">];</span>  \n<span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">strongArray</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSMutableArray</span> <span class=\"k\">new</span><span class=\"p\">];</span>\n\n<span class=\"c1\">// Logs out 'No'  </span>\n<span class=\"kt\">NSLog</span><span class=\"p\">(</span><span class=\"s\">@\"%@\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">copiedArray</span> <span class=\"nv\">isKindOfClass</span><span class=\"p\">:[</span><span class=\"kt\">NSMutableArray</span> <span class=\"kd\">class</span><span class=\"p\">]]</span> <span class=\"p\">?</span> <span class=\"s\">@\"Yes\"</span> <span class=\"p\">:</span> <span class=\"s\">@\"No\"</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Logs out 'Yes'  </span>\n<span class=\"kt\">NSLog</span><span class=\"p\">(</span><span class=\"s\">@\"%@\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">strongArray</span> <span class=\"nv\">isKindOfClass</span><span class=\"p\">:[</span><span class=\"kt\">NSMutableArray</span> <span class=\"kd\">class</span><span class=\"p\">]]</span> <span class=\"p\">?</span> <span class=\"s\">@\"Yes\"</span> <span class=\"p\">:</span> <span class=\"s\">@\"No\"</span><span class=\"p\">);</span>\n</code></pre></div></div>\n<p>The copy attribute has been around since the beginning — and it’s commonly put to great use with class clusters. What’s happening here is that sending a copy message to something that is mutable (i.e. the NSMutableArray here) will still return an immutable copy. Copy on write makes life even faster in such a scenario.</p>\n\n<p>Continuing on with Objective-Cisms — mutable collections are often used to build something up. This is a common technique found within many functions, where the author will then declare the return type as immutable. Yet, since a mutable array is a kind of array, this is perfectly legal:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"kt\">NSArray</span>  <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">allEmployees</span> <span class=\"p\">{</span>  \n    <span class=\"kt\">NSMutableArray</span> <span class=\"o\">*</span><span class=\"n\">container</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSMutableArray</span> <span class=\"k\">new</span><span class=\"p\">];</span>\n\n    <span class=\"c1\">//build up container with employees...  </span>\n    <span class=\"c1\">//i.e. [container addObject:anEmployee]</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">container</span><span class=\"p\">;</span>  \n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>And innocently enough, we’ve sharing mutable state again. The method header deceives any caller now, the 🍰 is a lie.</p>\n\n<p>Since we’ve got copy on write, we don’t even need to bother with such a qundary since copies are cheap. We can do the right thing and sleep easy on performance hits:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"kt\">NSArray</span>  <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">allEmployees</span> <span class=\"p\">{</span>  \n    <span class=\"kt\">NSMutableArray</span> <span class=\"o\">*</span><span class=\"n\">container</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSMutableArray</span> <span class=\"k\">new</span><span class=\"p\">];</span>\n\n    <span class=\"c1\">//build up container with employees...  </span>\n    <span class=\"c1\">//i.e. [container addObject:anEmployee]</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">container</span> <span class=\"n\">copy</span><span class=\"p\">];</span>  \n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>Also — Swift 👋?</p>\n\n<p>Think about the bridging process. If you, or perhaps another framework, have a foundation collection returned to you that one has to use in Swift code — you’re getting the value type of the collection since the language employs value type semantics.</p>\n\n<p>How does one enforce that 🤔?</p>\n\n<p>…with a copy on the reference type during the bridging process. So now if that bridged data was never mutated, the whole bridging operation’s efficiency is greatly improved. Which, I suppose, is a nice seque to wrap things up.</p>\n\n<h3 id=\"final-thoughts\">Final Thoughts</h3>\n\n<p>As I positied in one of <a href=\"http://localhost:4000/objective-c-in-2015\">my more popular articles a few years ago</a>, Objective-C has become stronger and more capable due to Swift’s presence alone. The sea of apps using Objective-C runs deep, and now their collections run faster. It’s not surprising, as copy on write semantics have been with Swift developers since the beginning.</p>\n\n<p>And now, here we are, with Objective-C getting in on the fun now. #DinosaurNotDead, am I right?</p>\n\n<p>Until next time ✌️.</p>",
            "summary": "Foundation is the unsung hero of iOS development. Powerful due in part to its maturity and ubiquity — it boasts all of six major implementations, it treats engineers to everything from the basic object to annual optimizations under the hood at WWDC. And the best optimizations are the ones I don’t even have to make. They just happen.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2017-11-07T00:00:00-06:00",
            "date_modified": "2017-11-07T00:00:00-06:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["Foundation"]},{
            "id": "http://localhost:4000/The-DeviceCheck-API",
            "url": "http://localhost:4000/The-DeviceCheck-API/",
            "title": "Device Check Overview",
            "content_html": "<p>Each WWDC, there is always the obscure API that finds its way into the annual “word bubble” slide of new toys for developers to use. Faintly sitting there, it stands to reason that Apple considers it a useful addition that only the few, and not the many, will use.</p>\n\n<p>DeviceCheck fits that bill, and then some. You might consider it a necessity from Cupertino &amp; Friends<strong>™</strong>, something they had to make or face the reality that engineers would find another way to do thing X or Y resulting in shady means to the same end. Because developers don’t do shady things, <a href=\"https://daringfireball.net/2017/04/uber_identifying_and_tagging_iphones\">like ever</a>.</p>\n\n<p>So, DeviceCheck is kinda what happens when most devs want to do things for perfectly valid business reasons, but there aren’t really any good ways to do it. It’s a curious little API, our topic of discussion this week.</p>\n\n<h3 id=\"so-what-is-it\">So, What Is It?</h3>\n\n<p>The TL;DR is nothing more than this: It’s an Apple approved, and guaranteed way, to identify your app as running on a valid Apple device while maintaining absolute user privacy.</p>\n\n<p>That’s not the most interesting of news, I suppose. The real discussion here lies within the <em>why</em> part of things. And the why spectrum, in this case, could range from toggling promotional offers on a certain device, linking purchases to accounts or auditing a device for fraudulent activity. For example, who here in the room has made two different usernames or profiles to extend a free trial of some sort?</p>\n\n<p>…</p>\n\n<p>…..</p>\n\n<p>……..</p>\n\n<p>🙋🏻‍♂️.</p>\n\n<p>That’s really it. We’re simply taking about helping one associate some given state for any given iOS (or tvOS) device in particular.</p>\n\n<p>To get your creative juices flowing, consider that you have two apps released. If they open App One, you could assign the device to state 01 — and when they open App Two, you can query the state as it will be persisted in the same fashion and then unlock some content, discount or reward.</p>\n\n<p>It’s an app-agnostic API, so leverage it as such if the occasion calls for it. But, also be aware if that presents a design constraint to you. Again, we’re talking about two bits <em>per device</em> — not two bits per app.</p>\n\n<p>So — how does it work?</p>\n\n<h3 id=\"the-api\">The API</h3>\n\n<p><a href=\"http://localhost:4000/privacy-and-single-sign-on\">I’ve always appreciated “just get to the point” type of APIs</a>, and that’s exactly what we get here. The setup allows a developer to store two bits of information (along with a timestamp) per one device. So, instead of peeking behind several doors that Apple would rather you leave shut to identify a device, you can simply get a few bits back and be done with it:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">curDevice</span> <span class=\"o\">=</span> <span class=\"kt\">DCDevice</span><span class=\"o\">.</span><span class=\"n\">current</span>\n\n<span class=\"k\">if</span> <span class=\"n\">curDevice</span><span class=\"o\">.</span><span class=\"n\">isSupported</span>  \n<span class=\"p\">{</span>  \n    <span class=\"n\">curDevice</span><span class=\"o\">.</span><span class=\"nf\">generateToken</span><span class=\"p\">(</span><span class=\"nv\">completionHandler</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">)</span> <span class=\"k\">in</span>  \n        <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">tokenData</span> <span class=\"o\">=</span> <span class=\"n\">data</span>  \n        <span class=\"p\">{</span>  \n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Received token (tokenData)\"</span><span class=\"p\">)</span>  \n        <span class=\"p\">}</span>  \n        <span class=\"k\">else</span>  \n        <span class=\"p\">{</span>  \n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Hit error: (error!.localizedDescription)\"</span><span class=\"p\">)</span>  \n        <span class=\"p\">}</span>  \n    <span class=\"p\">})</span>  \n<span class=\"p\">}</span>\n</code></pre></div></div>\n<blockquote>\n  <p>Note that the simulator won’t pass isSupported, so if you want to test it out— I guess do what we should be doing anyways and use the real thing 📱.</p>\n</blockquote>\n\n<p>With that code you’re on your first step (more to follow) to be able to store either:</p>\n\n<ul>\n  <li>00</li>\n  <li>01</li>\n  <li>10</li>\n  <li>11</li>\n</ul>\n\n<p>When you set that information, it remains valid and stored by Apple until you as the developer manually reset it or until you update it. That means you don’t have to code your way through tricky things like reinstallation, nuking all contents and settings or straight up deletion. It’s also worth noting that these values are unique per team ID.</p>\n\n<p>Also, be aware that like most tokens, it’s intended for single use. As you’ll see in just a minute, you likely use this token outside of your app and on your server. It will stay valid long enough if you need to retry a request, but the big Apple just recommends invoking the same method to generate another one.</p>\n\n<h3 id=\"a-closer-look\">A Closer Look</h3>\n\n<p>You may be looking at the previous code sample and wondering how that really helps us at all. How are the bits assigned? How do you set state? All we’re doing so far is getting a token. You might’ve expected something like this:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">curDevice</span> <span class=\"o\">=</span> <span class=\"kt\">DCDevice</span><span class=\"o\">.</span><span class=\"n\">current</span>  \n<span class=\"n\">curDevice</span><span class=\"o\">.</span><span class=\"nf\">setFirstBitState</span><span class=\"p\">(</span><span class=\"nv\">as</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// or</span>\n\n<span class=\"k\">if</span> <span class=\"n\">curDevice</span><span class=\"o\">.</span><span class=\"nf\">secondBitState</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"kc\">true</span>  \n<span class=\"p\">{</span>  \n    <span class=\"c1\">// Do something  </span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>It’s a fair question, and it’s because the client API (iOS or tvOS) only handles half of the transaction. On iOS, we’re given an ephemeral token which we send to our own servers. That validates authenticity, then we can either set the bit state or query it and fire a request off to Apple. Then Apple gives us the state we’re after.</p>\n\n<p>It looks like this:</p>\n\n<ol>\n  <li>Client uses DeviceCheck to get a token</li>\n  <li>It sends that over to our servers and we decide state</li>\n  <li>We pass the token and state to Apple, and done</li>\n</ol>\n\n<p>And then to query it later:</p>\n\n<ol>\n  <li>Client uses DeviceCheck to get a token</li>\n  <li>Your server queries the state of the device with Apple</li>\n  <li>It gets the response and your app takes the appropriate action</li>\n</ol>\n\n<p>This is not as heavy handed as it sounds. A simple POST and wrapping up your authentication key as a JSON Web Token gets you all the way there. A request to query bit state would just need to include a JSON payload like this:</p>\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">  \n    </span><span class=\"s2\">\"device_token\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"anAmazingUniqueToken\"</span><span class=\"w\">  \n    </span><span class=\"s2\">\"timestamp\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0934423486434</span><span class=\"p\">,</span><span class=\"w\">  \n    </span><span class=\"s2\">\"transaction_id\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"you come up with this\"</span><span class=\"w\">   \n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n<p>And then Apple would respond with:</p>\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">  \n    </span><span class=\"s2\">\"bit0\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\">  \n    </span><span class=\"s2\">\"bit1\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">  \n    </span><span class=\"s2\">\"last_update_time\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"2017-10\"</span><span class=\"w\">   \n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n<p>Coming back the other way, if one needs to update it - the payload is exactly the same except you include one, or both, of the bits you wish to update:</p>\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">  \n    </span><span class=\"s2\">\"device_token\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"anAmazingUniqueToken\"</span><span class=\"w\">  \n    </span><span class=\"s2\">\"transaction_id\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"you come up with this\"</span><span class=\"p\">,</span><span class=\"w\">  \n    </span><span class=\"s2\">\"timestamp\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0934423486434</span><span class=\"p\">,</span><span class=\"w\">  \n    </span><span class=\"s2\">\"bit0\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\">  \n    </span><span class=\"s2\">\"bit1\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\">  \n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n<p>In saying all of this, I assume you are aware of the other logistical trappings one must take to send web requests. For example, follow the Base 64 URL encoded JSON web token format and ensure that your authentication key employs the ES256 algorithm. Otherwise, you’ll be met with no helpful bits to use for state and instead get a nice BAD_AUTHENTICATION_TOKEN http error 🙈.</p>\n\n<p>For more on how to set these requests up, what data types to use and even some example requests using curl — <a href=\"https://developer.apple.com/documentation/devicecheck/accessing_and_modifying_per_device_data\">be sure to hit the docs</a>.</p>\n\n<h3 id=\"being-a-good-devicecheck-citizen\">Being a Good DeviceCheck Citizen</h3>\n\n<p>As with any API, there are right and wrong ways to go about things. With DeviceCheck, simple though it may seem, there are a few choice scenarios to be cognizant of.</p>\n\n<p>For starters, recall that time stamp that Apple gives us during our query:</p>\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">  \n    </span><span class=\"s2\">\"bit0\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\">  \n    </span><span class=\"s2\">\"bit1\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">  \n    </span><span class=\"s2\">\"last_update_time\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"2017-10\"</span><span class=\"w\">   \n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n<p>That update time is rounded to the nearest month. This could help you solve some problems that could arise from things like devices being sold to someone else. For example, if the bit state says they’ve done something they should only do once, but it’s been a year since they’ve tried that — pair that fact with other business logic to avoid locking a new customer away from content.</p>\n\n<p>That directly leads us to the next tip Apple recommends, which is that this is a <em>supplementary</em> source to help solve these specific problems. That is, it should be paired with your business logic. Getting the bit state is a great start and certainly welcome help, but pair it with logical checks that help you ensure you’re not stonewalling new users.</p>\n\n<p>It’s also mentioned that this shouldn’t affect your user interface much. I think this is fairly obvious, but an additional nudge never hurts. Most of us have several ways of knowing when to toss up your “first run” modal that introduces your app. Querying a bit state that requires at least three trips across the wire shouldn’t be one.</p>\n\n<p>Lastly, Apple gave us this API for a reason. In the <a href=\"https://developer.apple.com/videos/play/wwdc2017/702/?time=1530\">WWDC chat</a> over the topic, they straight up say that they will continue to remove sources of entropy outright or at least make sure they are under user control. Read: “If you abuse our ecosystem to tag phones we will find you and eliminate your methods.”</p>\n\n<h3 id=\"wrapping-up\">Wrapping Up</h3>\n\n<p>UDID querying is out. Linking back via an IP address is hacky and easily dodged. So now the act of uniquely identifying an iOS device, nefarious reasons or not, has first class support in iOS 11. I, for one, applaud Apple’s decision to include a safe and pragmatic way to do this. Because somewhere out there is a dev with a business requirement that needs to do something like this.</p>\n\n<p>Now, they can. And they don’t have to do any funky dances to do it.</p>\n\n<p>Until next time ✌️.</p>",
            "summary": "Each WWDC, there is always the obscure API that finds its way into the annual “word bubble” slide of new toys for developers to use. Faintly sitting there, it stands to reason that Apple considers it a useful addition that only the few, and not the many, will use.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2017-10-06T00:00:00-05:00",
            "date_modified": "2017-10-06T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["Device Check"]},{
            "id": "http://localhost:4000/iPhone-X-Dealing-with-Home-Indicator",
            "url": "http://localhost:4000/iPhone-X-Dealing-with-Home-Indicator/",
            "title": "Dealing with Home Indicator",
            "content_html": "<p>In a move that, well, <a href=\"https://daringfireball.net/linked/2017/09/10/bbc-confirmation\">everyone saw coming</a> — Apple unveiled the iPhone X. And along with it, a new little bar that sits happily towards the bottom bezel that invokes nostalgic feelings of a physical home button.</p>\n\n<p>To consumers it means a beautiful new marvel of both hardware and software to throw some dollars at come pre order time. To a lot of developers, it meant _what am I supposed do what that thing? _The answer, thankfully, is quite simple.</p>\n\n<p>This week, we’ll look at what Apple has supplied us with to handle the home indicator.</p>\n\n<h3 id=\"but-first\">But First</h3>\n\n<p>It’s not everyday we get new videos alongside a hardware announcement, and yet that’s exactly what happened shortly thereafter:</p>\n\n<div class=\"jekyll-twitter-plugin\"><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">14 NEW Apple Developer Videos 📲 LIVE NOW <a href=\"https://twitter.com/hashtag/WWDCApp?src=hash&amp;ref_src=twsrc%5Etfw\">#WWDCApp</a> and <a href=\"https://t.co/4rSiM9gd1W\">https://t.co/4rSiM9gd1W</a> 👈 <a href=\"https://twitter.com/hashtag/AppleTV4K?src=hash&amp;ref_src=twsrc%5Etfw\">#AppleTV4K</a> <a href=\"https://twitter.com/hashtag/iOS11?src=hash&amp;ref_src=twsrc%5Etfw\">#iOS11</a> <a href=\"https://twitter.com/hashtag/AppleWatchSeries3?src=hash&amp;ref_src=twsrc%5Etfw\">#AppleWatchSeries3</a> <a href=\"https://twitter.com/hashtag/ARKit?src=hash&amp;ref_src=twsrc%5Etfw\">#ARKit</a> <a href=\"https://twitter.com/hashtag/AppleEvent?src=hash&amp;ref_src=twsrc%5Etfw\">#AppleEvent</a> <a href=\"https://t.co/KkurLDxKNm\">pic.twitter.com/KkurLDxKNm</a></p>&mdash; Lauren Strehlow (@laurenstrehlow) <a href=\"https://twitter.com/laurenstrehlow/status/907683394485575680?ref_src=twsrc%5Etfw\">September 12, 2017</a></blockquote>\n<script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div>\n\n<p>In “<a href=\"https://developer.apple.com/videos/play/fall2017/801/\">Designing for iPhone X</a>”, long tenured Apple design guru Mike Stern lays down some ground rules. All things being equal, before you utilize the new functions below it’s incumbent that you pump the brakes first to see if your use case fits the bill.</p>\n\n<ul>\n  <li>Try to avoid interactive controls near the home indicator, especially those driven via gesture recognizers.</li>\n  <li>Don’t hide the indicator, add any adornments around it or generally attempt to change its appearance. Same goes for the camera bezel that’s planted at the top of iPhone X.</li>\n  <li>Typically you don’t want to hide the home indicator unless you’ve got a passive viewing experience (i.e. videos, photo slideshow, etc.).</li>\n</ul>\n\n<p><strong>TL;DR</strong> — Apple says leave the poor indicator alone. Most of the time.</p>\n\n<p>But, this post is about the other times 😉.</p>\n\n<h3 id=\"uiviewcontroller-additions\">UIViewController Additions</h3>\n\n<p>Whether you adore handling the status bar on a per controller basis or it was pure anathema to you, Apple has continued the trend of making such decisions on an instance by instance basis rather than opting for a global catch all design.</p>\n\n<p>Hiding the home indicator works essentially the same way status bar handling does:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">ViewController</span><span class=\"p\">:</span> <span class=\"kt\">UIViewController</span>  \n<span class=\"p\">{</span>  \n    <span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">prefersHomeIndicatorAutoHidden</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Bool</span>  \n    <span class=\"p\">{</span>  \n        <span class=\"k\">return</span> <span class=\"kc\">true</span>  \n    <span class=\"p\">}</span>  \n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>As mentioned, such scenarios are meant to be the outlier, and as such the default implementation returns false. There is, however, a particular comment in the documentation:</p>\n\n<blockquote>\n  <p>The system takes your preference into account, but returning <code class=\"highlighter-rouge\">YES</code> is not a guarantee that an indicator will be hidden.</p>\n</blockquote>\n\n<p>There doesn’t appear to be any mention of why or when UIKit would not respect your chosen preference, though it stands to reason that Apple will enforce what it thinks is best, when it thinks it’s best — boolean values regardless. So, that should make for some fun Stack Overflow posts.</p>\n\n<p>¯\\<em>(ツ)</em>/¯.</p>\n\n<p>Also, this may seem obvious but could be a source of initial confusion. Take particular mention to the fact that the function’s name ends with <em>autoHidden</em> and not <em>hidden</em>, which is to say that returning true from here means that UIKit will hide the indicator when it’s good and ready (normally, if the controller doesn’t receive any touch events across the span of a few seconds), <em>not</em> immediately.</p>\n\n<h3 id=\"signaling-uikit\">Signaling UIKit</h3>\n\n<p>Continuing with the status bar API parallels, simply overriding, or assigning to a variable conditionally controlling the overriden function, is not enough. We’ve yet another new addition to view controller’s robust family of setNeedsSomethingDone functions:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">ViewController</span><span class=\"p\">:</span> <span class=\"kt\">UIViewController</span>  \n<span class=\"p\">{</span>  \n    <span class=\"k\">var</span> <span class=\"nv\">shouldHideHomeIndicator</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n    \n    <span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">prefersHomeIndicatorAutoHidden</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Bool</span>  \n    <span class=\"p\">{</span>  \n        <span class=\"k\">return</span> <span class=\"n\">shouldHideHomeIndicator</span>  \n    <span class=\"p\">}</span>\n    \n    <span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">viewDidAppear</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">animated</span><span class=\"p\">:</span> <span class=\"kt\">Bool</span><span class=\"p\">)</span>  \n    <span class=\"p\">{</span>  \n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">viewDidAppear</span><span class=\"p\">(</span><span class=\"n\">animated</span><span class=\"p\">)</span>  \n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">shouldHideHomeIndicator</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>  \n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">setNeedsUpdateOfHomeIndicatorAutoHidden</span><span class=\"p\">()</span>  \n    <span class=\"p\">}</span>  \n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>This acts as a pass through function, as it simply signals to UIKit that we’ve changed the previous value selected for home indicator visibility. Unlike the status bar, though, this isn’t <em>technically</em> animatable since UIKit hides it on its own accord. So, code like this has no effect:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">viewDidAppear</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">animated</span><span class=\"p\">:</span> <span class=\"kt\">Bool</span><span class=\"p\">)</span>  \n<span class=\"p\">{</span>  \n    <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">viewDidAppear</span><span class=\"p\">(</span><span class=\"n\">animated</span><span class=\"p\">)</span>  \n    <span class=\"kt\">DispatchQueue</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"nf\">asyncAfter</span><span class=\"p\">(</span><span class=\"nv\">deadline</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"nf\">now</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span> <span class=\"p\">{</span>               \n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">shouldHideHomeIndicator</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>  \n        <span class=\"kt\">UIView</span><span class=\"o\">.</span><span class=\"nf\">animate</span><span class=\"p\">(</span><span class=\"nv\">withDuration</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">animations</span><span class=\"p\">:</span> <span class=\"p\">{</span>  \n            <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">setNeedsUpdateOfHomeIndicatorAutoHidden</span><span class=\"p\">()</span>  \n            <span class=\"p\">})</span>  \n        <span class=\"p\">}</span>  \n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>A simple assignment and a call to <code class=\"highlighter-rouge\">setNeedsUpdateOfHomeIndicatorAutoHidden()</code> will perform a slight alpha fade regardless of whether or not its included within an animation block.</p>\n\n<h3 id=\"container-controllers\">Container Controllers</h3>\n\n<p>The last new addition to view controller is a mechanism to inform UIKit if a child view controller should dictate home indicator’s visibility or not. If you’ve been around iOS long enough, you’ve likely harnessed container view controllers to better promote abstractions and encapsulation patterns.</p>\n\n<p>These contained controllers might find themselves well near the bottom of the screen, and if so — you may want the home indicator to leave you alone. A simple override returning the instance that’s obscured, or is doing the obscuring, addresses the issue:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">childViewControllerForHomeIndicatorAutoHidden</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">UIViewController</span><span class=\"p\">?</span>  \n<span class=\"p\">{</span>  \n    <span class=\"k\">return</span> <span class=\"n\">myChildController</span>  \n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>If you do indicate that a child controller should dictate visibility, it’s also its responsibility to override the function we previously discussed:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">MyChildViewController</span><span class=\"p\">:</span> <span class=\"kt\">UIViewController</span>  \n<span class=\"p\">{</span>  \n    <span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">prefersHomeIndicatorAutoHidden</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Bool</span>  \n    <span class=\"p\">{</span>  \n        <span class=\"k\">return</span> <span class=\"kc\">true</span>  \n    <span class=\"p\">}</span>  \n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>The function’s signature allows for a nil return value. If that’s the case, UIKit will look to the current controller to make decisions here — and if you’ve opted to not override that function, that decision will be “Show the home indicator”.</p>\n\n<p>As this can also be a runtime decision, UIKit will again request that you invoke its pass through function we just touched on to inform the framework it should query <code class=\"highlighter-rouge\">prefersHomeIndicatorAutoHidden()</code> once more:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">childViewControllerForHomeIndicatorAutoHidden</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">UIViewController</span><span class=\"p\">?</span>  \n<span class=\"p\">{</span>  \n    <span class=\"k\">return</span> <span class=\"n\">myChildController</span>  \n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"nf\">initializeChildController</span><span class=\"p\">()</span>  \n<span class=\"p\">{</span>  \n    <span class=\"n\">myChildController</span> <span class=\"o\">=</span> <span class=\"kt\">MyChildController</span><span class=\"p\">()</span>  \n    <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">setNeedsUpdateOfHomeIndicatorAutoHidden</span><span class=\"p\">()</span>  \n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>And that’s it.</p>\n\n<p>Though one could view this as more thought process that will need to be applied to an everyday iOS occurrence (i.e. handling controllers), you’ll find the API nearly identical to existing UIKit functions that handle similar problems.</p>\n\n<h3 id=\"update-answers-to-reader-questions\">Update: Answers to Reader Questions</h3>\n\n<p><a href=\"https://medium.com/@fabiankuenzel\"><strong>Fabian Kuenzel</strong></a> <strong>asks:</strong></p>\n\n<blockquote>\n  <p>Will the new home indicator also be laying on top of the bottom navigation of websites?</p>\n</blockquote>\n\n<p>Answers to that are detailed <a href=\"https://webkit.org/blog/7929/designing-websites-for-iphone-x/\">here</a>.</p>\n\n<p>I’m not a web dev afifcionado these days, but there appears to be a meta tag that handles automatic insets:</p>\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;meta</span> <span class=\"na\">name=</span><span class=\"s\">'viewport'</span> <span class=\"na\">content=</span><span class=\"s\">'initial-scale=1, viewport-fit=auto'</span><span class=\"nt\">&gt;</span>\n</code></pre></div></div>\n<p>The default value is <em>auto</em>, which should inset content — though you can override it to <em>cover</em> which covers the whole viewport. Though, if you should opt to take the whole screen, a new CSS function, constant(), allows you to use pre-defined constants to put padding around elements that respect the safe area. This is akin to iOS’ safeAreaLayoutGuide API.</p>\n\n<p>An example from their post:</p>\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>.post {  \n    padding: 12px;  \n    padding-left: constant(safe-area-inset-left);  \n    padding-right: constant(safe-area-inset-right);  \n}\n</code></pre></div></div>\n<p><a href=\"https://medium.com/@x0054\"><strong>Bogdan</strong></a> <strong>had more of a philosophical observation:</strong></p>\n\n<blockquote>\n  <p>I don’t understand why Apple didn’t just leave the home indicator off by default, or at least give the user an option to turn it off. It’s a nice feature to introduce new users to the phone, but eventually (like 10 minutes into using the phone) everyone will remember how to switch apps, and then it’s just an annoying and distracting bar. Am I missing something?</p>\n</blockquote>\n\n<p>That’s a great point.</p>\n\n<p><a href=\"https://marco.org/2017/09/18/courage\">Much like how the notch is more than a notch</a>, and almost closer to part of the hardware and iPhone brand recognition, I think the software equivlant of that is the home indicator. It’s part of its DNA, and additionally I’m betting Apple’s thinking is that its prescence instills user confidence in the UX. It avoids the “Wait why is that gone now? When does it show? When does it hide? Can I still go back home now that it’s now showing?” kind of things.</p>\n\n<p>That said, I do agree with you — it’s constant prescence seems a bit much, but I’ve yet to use an iPhone X in person so I’ll reserve judgement until then 🙂.</p>\n\n<p><a href=\"https://medium.com/@willikampmann\"><strong>Will Kampmann</strong></a> <strong>asks:</strong></p>\n\n<blockquote>\n  <p>Do you know what will happen in full-screen apps like games? Will this home handle be invoked by two swipes like the notification and control centers are on normal iPhones?</p>\n</blockquote>\n\n<p>There is an API to override this behavior, but Apple would really, really, <em>really</em> like you not to. The one use case they mention where you might? Full screen games. Here’s the Human Interface Guidelines on the matter:</p>\n\n<blockquote>\n  <p>In rare cases, immersive apps like games might require custom screen-edge gestures that take priority over the system’s gestures — the first swipe invokes the app-specific gesture and a second-swipe invokes the system gesture.</p>\n</blockquote>\n\n<p>It’s a simple override on any view controller:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">preferredScreenEdgesDeferringSystemGestures</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">UIRectEdge</span> <span class=\"p\">{</span>  \n    <span class=\"k\">return</span> <span class=\"o\">.</span><span class=\"n\">top</span>  \n<span class=\"p\">}</span>\n</code></pre></div></div>\n<h3 id=\"wrapping-up\">Wrapping Up</h3>\n\n<p>Ah, iPhone X considerations.</p>\n\n<p>Is it solely giggles and smiles for iOS engineers, or yet another view controller consideration to maintain and code against? Possibly a mix of the two. If time has taught us anything in the continuum of software development, it’s that time elapsed + an ecosystem = new APIs. In today’s smartphone landscape, it’s a little more realistic to say time elapsed + Apple’s ecosystem = new hardware = new APIs.</p>\n\n<p>We made it through a taller iPhone. We pushed on through different resolutions. We can handle a small camera nub in navigation bars and a little 2 point bar near the bottom bezel too 💪.</p>\n\n<p>Until next time ✌️.</p>",
            "summary": "In a move that, well, everyone saw coming — Apple unveiled the iPhone X. And along with it, a new little bar that sits happily towards the bottom bezel that invokes nostalgic feelings of a physical home button.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2017-09-13T00:00:00-05:00",
            "date_modified": "2017-09-13T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["Misc"]}]
}