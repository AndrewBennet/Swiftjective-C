{
    "version": "https://jsonfeed.org/version/1",
    "title": "Swiftjective-C",
    "description": "Swiftjective-C is a periodical over modern iOS software engineering. It houses tactful discussions over Swift, Objective-C and developing high quality apps while peering into various frameworks to see what makes them tick.\n",
    "home_page_url": "http://localhost:4000/",
    "feed_url": "http://localhost:4000/feed.json",
    "items": [
      {
            "id": "http://localhost:4000/uigraphicsimagerenderer",
            "url": "http://localhost:4000/uigraphicsimagerenderer/",
            "title": "UIGraphicsImageRenderer",
            "content_html": "<p>The history of photography is rife with interesting stories of how the medium developed. Among them, digital photography is one of the more exciting bits of its history. It’s still quite a nascent craft, with its history tracing back to as recently as 1957 when the fine folks at the National Institute of Standards and Technology slapped a photo into computer memory.</p>\n\n<p>The translation from the analog to the digital was an inflection point. We’ve experienced a similar shift on iOS starting with iOS 10, though many engineers have yet to discover or adopt the latest innovation for drawing images — <code class=\"highlighter-rouge\">UIGraphicsImageRenderer</code>.</p>\n\n<h3 id=\"setting-the-cgcontext\">Setting the (CG)Context</h3>\n<p>Core Graphics, based on the Quartz drawing engine, has provided iOS developers with lightweight 2D rendering capabilities since iOS 2. Its utility knows almost no bounds, as image masking, PDF document creation, parsing, and other similar functions are baked right in making it a no nonsense choice for any sort of drawing task.</p>\n\n<p>For that and many other reasons, if one hits the Googles on how to create an image from something on screen they’ll likely end up with something like this:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">drawSize</span> <span class=\"o\">=</span> <span class=\"kt\">CGSize</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n\n<span class=\"kt\">UIGraphicsBeginImageContext</span><span class=\"p\">(</span><span class=\"n\">drawSize</span><span class=\"p\">)</span>  \n<span class=\"k\">let</span> <span class=\"nv\">ctx</span> <span class=\"o\">=</span> <span class=\"kt\">UIGraphicsGetCurrentContext</span><span class=\"p\">()</span><span class=\"o\">!</span>\n\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"nf\">setFillColor</span><span class=\"p\">(</span><span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"o\">.</span><span class=\"n\">cgColor</span><span class=\"p\">)</span>  \n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"nf\">fill</span><span class=\"p\">(</span><span class=\"kt\">CGRect</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"n\">drawSize</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"n\">drawSize</span><span class=\"o\">.</span><span class=\"n\">height</span><span class=\"p\">))</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">img</span> <span class=\"o\">=</span> <span class=\"kt\">UIGraphicsGetImageFromCurrentImageContext</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<p>And it works, so we move on. Though, there are several valid reasons to pump the breaks:</p>\n\n<ul>\n  <li>UIGraphicsBegin/EndImageContext are sRGB only (sorry p3 color gamut).</li>\n  <li>It was before the age of blocks, which are common throughout Foundation, UIKit and virtually every framework on iOS.</li>\n  <li>Extensibility is possible, though sometimes a non trivial task.</li>\n</ul>\n\n<p>Given its age, it’s not a shocker to say Core Graphics provides an API that’s less than ideal too many of today’s standards. Though Swift’s syntactical sugar prowess has softened the call sites to Core Graphics code over many projects, it still is what it is — a C based API built for simpler times.</p>\n\n<p>In contrast, <code class=\"highlighter-rouge\">UIGraphicsImageRenderer</code> is built for tomorrow in mind:</p>\n\n<ul>\n  <li>It’s automagically fully color managed. For example, on the beautiful 9.7 inch iPad pro you’ll get a wide color context.</li>\n  <li>It’s a first class object.</li>\n  <li>It manages its context lifetime, unlocking some memory optimizations on the house from Cupertino &amp; Friends©.</li>\n  <li>The former implicitly means that it caches its context, meaning reuse is an efficient operation as opposed to using new renderers.</li>\n</ul>\n\n<h3 id=\"gaining-more-cgcontext\">Gaining More (CG)Context</h3>\n\n<p>Initializing and keeping a reference to a renderer is a solid start:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">renderer</span> <span class=\"o\">=</span> <span class=\"kt\">UIGraphicsImageRenderer</span><span class=\"p\">(</span><span class=\"nv\">size</span><span class=\"p\">:</span> <span class=\"kt\">CGSize</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>From there, the relevant parallel from the old way of doing things to the preferred, Apple approved way would be image renderer’s closure based functions for creating an image:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">image</span><span class=\"p\">(</span><span class=\"nv\">actions</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"kt\">UIGraphicsImageRendererContext</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">UIImage</span>\n</code></pre></div></div>\n\n<p>To compare apples to image renderers, one could create the same image as mentioned above from the legacy Core Graphics method by doing this:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">img</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">image</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">)</span> <span class=\"k\">in</span>  \n    <span class=\"k\">let</span> <span class=\"nv\">size</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"o\">.</span><span class=\"n\">bounds</span><span class=\"o\">.</span><span class=\"n\">size</span>  \n    <span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"o\">.</span><span class=\"nf\">setFill</span><span class=\"p\">()</span>  \n    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"nf\">fill</span><span class=\"p\">(</span><span class=\"kt\">CGRect</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">height</span><span class=\"p\">))</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The hard work of what’s happening here has always been abstracted away by Core Graphics since day one, but now it’s more honed in to the point where we simply spit out some drawing instructions within a block.</p>\n\n<p>The renderer also exposes convenient access to getting a hold of <code class=\"highlighter-rouge\">NSData</code> of resulting images as well:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">actions</span><span class=\"p\">:(</span><span class=\"kt\">UIGraphicsImageRendererContext</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">)</span> <span class=\"k\">in</span>  \n<span class=\"k\">let</span> <span class=\"nv\">size</span> <span class=\"o\">=</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"o\">.</span><span class=\"n\">bounds</span><span class=\"o\">.</span><span class=\"n\">size</span>  \n<span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"n\">blue</span><span class=\"o\">.</span><span class=\"nf\">setFill</span><span class=\"p\">()</span>  \n    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"nf\">fill</span><span class=\"p\">(</span><span class=\"kt\">CGRect</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">width</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">height</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">))</span>  \n<span class=\"p\">}</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">imageJPEGData</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"nf\">jpegData</span><span class=\"p\">(</span><span class=\"nv\">withCompressionQuality</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">actions</span><span class=\"p\">:</span> <span class=\"n\">actions</span><span class=\"p\">)</span>\n<span class=\"k\">let</span> <span class=\"nv\">imagePNGData</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"nf\">pngData</span><span class=\"p\">(</span><span class=\"nv\">actions</span><span class=\"p\">:</span> <span class=\"n\">actions</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>In each code sample, the typealiased <code class=\"highlighter-rouge\">DrawingActions</code> closure returns to us an instance of <code class=\"highlighter-rouge\">UIGraphicsImageRendererContext</code>. Using it we gain access high-level drawing functions. Though Apple clearly states “higher level” drawing functions, don’t think of it as a crutch. There is support for most drawing tasks, such as utilizing blend modes by leveraging <code class=\"highlighter-rouge\">CGBlendValue</code>:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">image</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">image</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">)</span> <span class=\"k\">in</span>  \n    <span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"n\">blue</span><span class=\"o\">.</span><span class=\"nf\">setFill</span><span class=\"p\">()</span>  \n    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"nf\">fill</span><span class=\"p\">(</span><span class=\"kt\">CGRect</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">140</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">140</span><span class=\"p\">))</span>\n\n    <span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"n\">yellow</span><span class=\"o\">.</span><span class=\"nf\">setFill</span><span class=\"p\">()</span>  \n    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"nf\">fill</span><span class=\"p\">(</span><span class=\"kt\">CGRect</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">140</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">140</span><span class=\"p\">),</span> <span class=\"nv\">blendMode</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">luminosity</span><span class=\"p\">)</span>  \n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>That said, you may be left missing the drawing functionality you might’ve thought left behind from the traditional context.</p>\n\n<p>For example, filling in an ellipses still requires a R.O.C.G.C. (regular old Core Graphics Context, obviously). To fill out the drawing functionality (pun somewhat intended), an image renderer context has one available.</p>\n\n<p>Take note of the last two lines, where the <code class=\"highlighter-rouge\">cgContext</code> allows us to fill out the circle:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">img</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">image</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">)</span> <span class=\"k\">in</span>  \n    <span class=\"k\">let</span> <span class=\"nv\">size</span> <span class=\"o\">=</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"o\">.</span><span class=\"n\">bounds</span><span class=\"o\">.</span><span class=\"n\">size</span>\n\n    <span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"n\">darkGray</span><span class=\"o\">.</span><span class=\"nf\">setStroke</span><span class=\"p\">()</span>  \n    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"nf\">stroke</span><span class=\"p\">(</span><span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"o\">.</span><span class=\"n\">bounds</span><span class=\"p\">)</span>\n\n    <span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"n\">blue</span><span class=\"o\">.</span><span class=\"nf\">setFill</span><span class=\"p\">()</span>  \n    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"nf\">fill</span><span class=\"p\">(</span><span class=\"kt\">CGRect</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">width</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">height</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n    <span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"n\">yellow</span><span class=\"o\">.</span><span class=\"nf\">setFill</span><span class=\"p\">()</span>  \n    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">cgContext</span><span class=\"o\">.</span><span class=\"nf\">fillEllipse</span><span class=\"p\">(</span><span class=\"nv\">in</span><span class=\"p\">:</span> <span class=\"kt\">CGRect</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">51</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"mi\">51</span><span class=\"p\">,</span> <span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">))</span>  \n    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">cgContext</span><span class=\"o\">.</span><span class=\"nf\">rotate</span><span class=\"p\">(</span><span class=\"nv\">by</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">)</span>  \n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"giving-a-renderer-more-cgcontext\">Giving a Renderer More (CG)Context</h3>\n<p>I really need to stop with the (CG)Context bit, but I feel too invested at this point so please just excuse me 🤠.</p>\n\n<p>You have noticed that a graphics renderer will also accept a <code class=\"highlighter-rouge\">UIGraphicsImageRendererFormat</code>object into two of its four available initializers:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">size</span><span class=\"p\">:</span> <span class=\"kt\">CGSize</span><span class=\"p\">,</span> <span class=\"nv\">format</span><span class=\"p\">:</span> <span class=\"kt\">UIGraphicsImageRendererFormat</span><span class=\"p\">)</span>  \n<span class=\"kd\">public</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">bounds</span><span class=\"p\">:</span> <span class=\"kt\">CGRect</span><span class=\"p\">,</span> <span class=\"nv\">format</span><span class=\"p\">:</span> <span class=\"kt\">UIGraphicsImageRendererFormat</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>This rendering format has a few options to aid in further specifying the intent of your resulting drawing operations. It also has a useful <code class=\"highlighter-rouge\">bounds </code>property we’ve been using in the previous code samples that’s derived from its associated graphics context. Using this formatter one can tweak opaque or scale preferences, among other things.</p>\n\n<p>For example, <code class=\"highlighter-rouge\">CALayer</code> and its A8 backing store format was introduced in iOS 12 and provides developers with free memory optimizations. If you’re certain, for example, that you’re drawing wide color content <em>using</em> sRGB colors, you can have the renderer optimize for that since the backing store would otherwise be larger to accommodate a larger color range rather than just 0 to 1:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// iOS 10/11</span>\n<span class=\"k\">let</span> <span class=\"nv\">format</span> <span class=\"o\">=</span> <span class=\"kt\">UIGraphicsImageRendererFormat</span><span class=\"p\">()</span>  \n<span class=\"n\">format</span><span class=\"o\">.</span><span class=\"n\">prefersExtendedRange</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n\n<span class=\"c1\">// iOS 12</span>\n<span class=\"k\">let</span> <span class=\"nv\">format</span> <span class=\"o\">=</span> <span class=\"kt\">UIGraphicsImageRendererFormat</span><span class=\"p\">()</span>  \n<span class=\"n\">format</span><span class=\"o\">.</span><span class=\"n\">preferredRange</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">standard</span> <span class=\"c1\">// Turn off iOS 12 optimization</span>\n</code></pre></div></div>\n\n<p>Many of these decisions will likely be tied to the current trait collection, so it stands to reason that the renderer format can also be fetched on a per trait collection basis as well.</p>\n\n<p>No need to mince in my own words here, Apple’s documentation explains this very well:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Returns a format optimized for the specified trait collection, taking into account properties such as displayScale and displayGamut.</span>\n<span class=\"c1\">// Traits that are not specified will be ignored, with their corresponding format properties defaulting to the values in preferredFormat.  </span>\n<span class=\"kd\">public</span> <span class=\"kd\">convenience</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"k\">for</span> <span class=\"nv\">traitCollection</span><span class=\"p\">:</span> <span class=\"kt\">UITraitCollection</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>No worries if you opt to forgo any of this, as UIKit provides sensible default values for you should you not provide explicit ones. As such, if you do nothing, UIKit gives you the resulting format from its factory method, <code class=\"highlighter-rouge\">defaultFormat</code> — which provides a format configured for the highest fidelity possible as supported by the device it’s executed on.</p>\n\n<p>Take care to make this choice upfront, however. If you want to configure things, do it at your renderer’s initialization point as the formatter itself holistically represents immutable configurations that it will always use during drawing operations.</p>\n\n<p>All of this hopefully should remind you how extensible and flexible an image renderer can be. For example, hanging a quick extension off of any view to create a circle avatar would be painless and performant (as performant as using <code class=\"highlighter-rouge\">cornerRadius</code> can really be, that is) since one could reuse the same renderer and its context:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">rendererKey</span><span class=\"p\">:</span> <span class=\"kt\">UInt8</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">extension</span> <span class=\"kt\">UIView</span> <span class=\"p\">{</span>\n<span class=\"k\">var</span> <span class=\"nv\">renderer</span><span class=\"p\">:</span> <span class=\"kt\">UIGraphicsImageRenderer</span><span class=\"o\">!</span> <span class=\"p\">{</span>  \n    <span class=\"k\">get</span> <span class=\"p\">{</span>  \n        <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">rendererInstance</span> <span class=\"o\">=</span> <span class=\"nf\">objc_getAssociatedObject</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">rendererKey</span><span class=\"p\">)</span> <span class=\"k\">as?</span> <span class=\"kt\">UIGraphicsImageRenderer</span> <span class=\"k\">else</span> <span class=\"p\">{</span>  \n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">renderer</span> <span class=\"o\">=</span> <span class=\"kt\">UIGraphicsImageRenderer</span><span class=\"p\">(</span><span class=\"nv\">bounds</span><span class=\"p\">:</span> <span class=\"n\">bounds</span><span class=\"p\">)</span>  \n            <span class=\"k\">return</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">renderer</span>  \n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">rendererInstance</span>\n    <span class=\"p\">}</span>  \n    <span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"n\">newValue</span><span class=\"p\">)</span> <span class=\"p\">{</span>  \n        <span class=\"nf\">objc_setAssociatedObject</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">rendererKey</span><span class=\"p\">,</span> <span class=\"n\">newValue</span><span class=\"p\">,</span> <span class=\"n\">objc_AssociationPolicy</span><span class=\"o\">.</span><span class=\"kt\">OBJC_ASSOCIATION_RETAIN</span><span class=\"p\">)</span>  \n    <span class=\"p\">}</span>  \n<span class=\"p\">}</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">circleImageView</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">UIImageView</span> <span class=\"p\">{</span>  \n        <span class=\"k\">let</span> <span class=\"nv\">img</span><span class=\"p\">:</span><span class=\"kt\">UIImage</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">image</span> <span class=\"p\">{</span> <span class=\"n\">ctx</span> <span class=\"k\">in</span>  \n            <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"nv\">in</span><span class=\"p\">:</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">cgContext</span><span class=\"p\">)</span>  \n        <span class=\"p\">}</span>\n\n        <span class=\"k\">let</span> <span class=\"nv\">imageView</span><span class=\"p\">:</span><span class=\"kt\">UIImageView</span> <span class=\"o\">=</span> <span class=\"kt\">UIImageView</span><span class=\"p\">(</span><span class=\"nv\">image</span><span class=\"p\">:</span> <span class=\"n\">img</span><span class=\"p\">)</span>  \n        <span class=\"n\">imageView</span><span class=\"o\">.</span><span class=\"n\">frame</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"o\">.</span><span class=\"n\">bounds</span>  \n        <span class=\"n\">imageView</span><span class=\"o\">.</span><span class=\"n\">clipsToBounds</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>  \n        <span class=\"n\">imageView</span><span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">cornerRadius</span> <span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"o\">.</span><span class=\"n\">bounds</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nf\">rounded</span><span class=\"p\">()</span>  \n        <span class=\"k\">return</span> <span class=\"n\">imageView</span>  \n    <span class=\"p\">}</span>  \n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Generate a circle image and image view of any view instance  </span>\n<span class=\"k\">let</span> <span class=\"nv\">anImageView</span> <span class=\"o\">=</span> <span class=\"n\">myExistingView</span><span class=\"o\">.</span><span class=\"nf\">circleImageView</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<h3 id=\"pdfs-ftw\">PDFs FTW</h3>\n<p>A quick sidebar to mention that the PDF variant of the abstract <code class=\"highlighter-rouge\">UIGraphicsRenderer</code> class is very similar to its image rendering sibling. In fact, their method declarations are almost interchangeable, save <code class=\"highlighter-rouge\">UIImage</code> vs <code class=\"highlighter-rouge\">Data</code>:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">renderer</span> <span class=\"o\">=</span> <span class=\"kt\">UIGraphicsPDFRenderer</span><span class=\"p\">(</span><span class=\"nv\">bounds</span><span class=\"p\">:</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">bounds</span><span class=\"p\">)</span>  \n<span class=\"k\">let</span> <span class=\"nv\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">pdfData</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">)</span> <span class=\"k\">in</span>  \n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"nf\">beginPage</span><span class=\"p\">()</span>\n    <span class=\"k\">let</span> <span class=\"nv\">header</span> <span class=\"o\">=</span> <span class=\"s\">\"Welcome to TTIDG!\"</span> <span class=\"k\">as</span> <span class=\"kt\">NSString</span>  \n    <span class=\"k\">let</span> <span class=\"nv\">attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span>  \n        <span class=\"kt\">NSAttributedStringKey</span><span class=\"o\">.</span><span class=\"nv\">font</span> <span class=\"p\">:</span> <span class=\"kt\">UIFont</span><span class=\"o\">.</span><span class=\"nf\">preferredFont</span><span class=\"p\">(</span><span class=\"nv\">forTextStyle</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">),</span>  \n        <span class=\"kt\">NSAttributedStringKey</span><span class=\"o\">.</span><span class=\"nv\">foregroundColor</span> <span class=\"p\">:</span> <span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"n\">blue</span>  \n    <span class=\"p\">]</span>\n\n    <span class=\"n\">header</span><span class=\"o\">.</span><span class=\"nf\">draw</span><span class=\"p\">(</span><span class=\"nv\">in</span><span class=\"p\">:</span> <span class=\"kt\">CGRect</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">pdfContextBounds</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">pdfContextBounds</span><span class=\"o\">.</span><span class=\"n\">height</span><span class=\"p\">),</span> <span class=\"nv\">withAttributes</span><span class=\"p\">:</span> <span class=\"n\">attributes</span><span class=\"p\">)</span>  \n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"wrapping-up\">Wrapping Up</h3>\n<p>Replacing the code that kinda just works with the code that’s more recent and supports more relevant formats is typically not high on the proverbial list.</p>\n\n<p>Maybe it should be, as is the case with <code class=\"highlighter-rouge\">UIGraphicsImageRenderer</code>. You likely won’t have to twist many arms to persuade iOS engineers to make the switch, “No ✋ — I don’t want block based, automatically color managed, extensible drawing code that already manages its context lifetime — that’s awful” said…..nobody?</p>\n\n<p>Until next time, may your drawing exploits with <code class=\"highlighter-rouge\">UIGraphicsImageRenderer</code> be many and productive 📸.</p>",
            "summary": "The history of photography is rife with interesting stories of how the medium developed. Among them, digital photography is one of the more exciting bits of its history. It’s still quite a nascent craft, with its history tracing back to as recently as 1957 when the fine folks at the National Institute of Standards and Technology slapped a photo into computer memory.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2018-08-01T00:00:00-05:00",
            "date_modified": "2018-08-01T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["UIKit"]},{
            "id": "http://localhost:4000/iOS-12-Notable-UIKit-Additions",
            "url": "http://localhost:4000/iOS-12-Notable-UIKit-Additions/",
            "title": "iOS 12: Notable UIKit Additions",
            "content_html": "<p>And here we are. We’ve finally got a good look at iOS 12 and all it has on offer. Though some chose to view it as a tame maintenance release, tagging it as such is a disservice and there was plenty to digest during the WWDC keynote.</p>\n\n<p>Each year, I dive in on the latest version of iOS and try to bring up some of the new APIs that our favorite framework, UIKit, has brought to the table. In no particular order, let’s dig in on some of the enhancements that caught my eye.</p>\n\n<h3 id=\"uitextinputtraits\">UITextInputTraits</h3>\n\n<p>Apple continues its push towards keeping its user’s data private and secure, so it’s no surprise to see Cupertino &amp; Friends© extend the password autofill APIs.</p>\n\n<p>New this year is the ability to suggest a new password for your users, <em>and</em> supply your password parameters dictated by business requirements to iOS when suggesting such a password. This is done via the <code class=\"highlighter-rouge\">UITextInputPasswordRules</code> class:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">createNewPasswordTextField</span> <span class=\"o\">=</span> <span class=\"kt\">UITextField</span><span class=\"p\">()</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">newPasswordReqs</span> <span class=\"o\">=</span> <span class=\"kt\">UITextInputPasswordRules</span><span class=\"p\">(</span><span class=\"nv\">descriptor</span><span class=\"p\">:</span> <span class=\"s\">\"required: lower; required: digit; max-consecutive: 3; minlength: 12;\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">createNewPasswordTextField</span><span class=\"o\">.</span><span class=\"n\">passwordRules</span> <span class=\"o\">=</span> <span class=\"n\">newPasswordReqs</span>\n\n<span class=\"c1\">// Now, when iOS suggests a new password - these rules will be used to generate it</span>\n</code></pre></div></div>\n<p>The pertinent information here is the descriptor parameter, which is a plain string that follows a certain syntax, à la the visual format language:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"s\">\"key: value;\"</span>\n</code></pre></div></div>\n\n<p>Think of it a dictionary entry that always is followed by semicolon. It’s quite close to CSS declarations. With it, you can specify the following items:</p>\n\n<ul>\n  <li>required : Self explanatory</li>\n  <li>allowed : Allow a subset of allowed characters</li>\n  <li>max-consecutive : Restrict the number of successive characters</li>\n</ul>\n\n<p>And character classes to match against those rules:</p>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">upper</code> : A-Z</li>\n  <li><code class=\"highlighter-rouge\">lower</code> : a-z</li>\n  <li>\n    <table>\n      <tbody>\n        <tr>\n          <td><code class=\"highlighter-rouge\">special</code> : -~!@#$%^&amp;*_+=`</td>\n          <td>(){}[:;”’&lt;&gt;,.? ] and space</td>\n        </tr>\n      </tbody>\n    </table>\n  </li>\n  <li><code class=\"highlighter-rouge\">ascii-printable</code> : All ACII printable</li>\n  <li><code class=\"highlighter-rouge\">unicode</code> : All unicode</li>\n</ul>\n\n<p>To further things a little, suppose you only wanted to allow the letters “j,o,r,d,a,n” because you want the strongest password that I’ll never, ever most definitely guess, then you could do this:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">UITextInputPasswordRules</span><span class=\"p\">(</span><span class=\"nv\">descriptor</span><span class=\"p\">:</span> <span class=\"s\">\"required: [j,o,r,d,a,n]; max-consecutive: 2; minlength: 12;\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Be aware that the framework has some validation against your supplied validation, resulting in some form of validationception.</p>\n\n<p>Your parameters have to <em>at least</em> use two instances of the ASCII uppercase letters, digits and ASDII lowercase letters classes. Other than that, it also must be longer than 12 characters.</p>\n\n<p>If you don’t meet this criteria, do you get some sort of runtime error or exception? Nope — the user agent just throws out your insecure, primitive suggestion and uses the default. Which is probably a good thing.</p>\n\n<p>As a bonus, you can do the same thing in HTML by using the <code class=\"highlighter-rouge\">passwordrules</code> attribute in your input element.</p>\n\n<h3 id=\"one-time-tfa-codes\">One Time TFA Codes</h3>\n\n<p>In one of my favorite “It just works” APIs that Apple supplies to developers, it’s hard to argue that there’s something more trivial to implement in iOS development that simultaneously brings real value to users than setting a text content type.</p>\n\n<p>The powerful heuristics of iOS sucks in passwords and phone numbers, can suggest a relevant address and more. And now, that more is TFA codes, accomplished by doing nothing more than choosing <code class=\"highlighter-rouge\">oneTimeCode</code>:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">aTFAtextField</span><span class=\"o\">.</span><span class=\"n\">textContentType</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">oneTimeCode</span>\n</code></pre></div></div>\n\n<p>This also joins the new value, <code class=\"highlighter-rouge\">newPassword</code>, which would enable the password creation prompts touched on above. The usual restrictions (if you can even call them that) is that the element accepting the password must be a text field, text view or a view that adopts the <code class=\"highlighter-rouge\">UITextInput</code> protocol.</p>\n\n<p>Of note, tvOS apps are also granted the same affordances when using the control center keyboard, the continuity keyboard or even Cupertino’s Remote App. And let’s face it, nobody wants to type on that platform so any shortcuts we can provide just promotes engagement that much more.</p>\n\n<p>Text content type is powerful, but also the definition of lightweight, simple and WYSIWYG. Sometimes what you aren’t is just as important as what you are. That’s also true with framework design.</p>\n\n<h3 id=\"graphics-rendering\">Graphics Rendering</h3>\n\n<p>As we’ll briefly discuss later on, iOS 12 has automatic backing store support for views. The depth of their content drives this. So, for example, if you are rendering a grey scale image on the screen iOS will employ an 8 bit per pixel backing store instead of the usual 64 bit per pixel backing store a portrait image would incur.</p>\n\n<p>The cost savings is significant, in the <a href=\"https://developer.apple.com/videos/play/wwdc2018/202/\">What’s New in Cocoa Touch</a> session, Apple engineer Josh Shaffer notes that the previous example goes from 2.2 megabytes of real estate down to <em>275 kilobytes</em>.</p>\n\n<p>As aforementioned, views get this out of the box. If you draw into offscreen bitmaps using <code class=\"highlighter-rouge\">UIGraphicsImageRenderer</code>, though, iOS won’t be able to predict the developer’s intentions with the resulting image. As such, a configurable buffer backing store style has been introduced so one can take part in the memory savings:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">rendererFormat</span> <span class=\"o\">=</span> <span class=\"kt\">UIGraphicsImageRendererFormat</span><span class=\"o\">.</span><span class=\"nf\">default</span><span class=\"p\">()</span>  \n<span class=\"n\">rendererFormat</span><span class=\"o\">.</span><span class=\"n\">preferredRange</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">extended</span> <span class=\"c1\">// For an extended range image</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">renderer</span> <span class=\"o\">=</span> <span class=\"kt\">UIGraphicsImageRenderer</span><span class=\"p\">(</span><span class=\"nv\">size</span><span class=\"p\">:</span> <span class=\"kt\">CGSize</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">),</span> <span class=\"nv\">format</span><span class=\"p\">:</span> <span class=\"n\">rendererFormat</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Above, we indicated our intention to utilize an extended range image. Though, we can also indicate that its unspecified, automatic or standard.</p>\n\n<h3 id=\"the-small-quick-win\">The Small Quick Win</h3>\n\n<p>Detecting user interface orientations is traditionally frowned upon via Apple’s official stance. And though trait collections offer us most of what we need, it’s still refreshing to see Apple come full circle on all the edge cases with two new additions here:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">device</span> <span class=\"o\">=</span> <span class=\"kt\">UIDevice</span><span class=\"o\">.</span><span class=\"n\">current</span>  \n<span class=\"k\">let</span> <span class=\"nv\">isFlat</span> <span class=\"o\">=</span> <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">orientation</span><span class=\"o\">.</span><span class=\"n\">isFlat</span>  \n<span class=\"k\">let</span> <span class=\"nv\">isValid</span> <span class=\"o\">=</span> <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">orientation</span><span class=\"o\">.</span><span class=\"n\">isValidInterfaceOrientation</span>\n</code></pre></div></div>\n\n<h3 id=\"darkness-for-days\">Darkness for Days</h3>\n\n<p>Also, we have dark mode on iOS, finally! Mojave doesn’t get all the fun!</p>\n\n<p>Err…shoot, no wait — we just have API support for it. But it doesn’t officially exist. But it also kinda does too, because the code is there. It’s shipped with Xcode.</p>\n\n<p>I don’t know. I’m just telling you that trait collections now know about it:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">darkTraitCollection</span> <span class=\"o\">=</span> <span class=\"kt\">UITraitCollection</span><span class=\"p\">(</span><span class=\"nv\">userInterfaceStyle</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">dark</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>…there’s obviously enumerations for it:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">@available(iOS 12.0, *)</span> <span class=\"kd\">public</span> <span class=\"kd\">enum</span> <span class=\"kt\">UIUserInterfaceStyle</span> <span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span>  \n    <span class=\"k\">case</span> <span class=\"n\">unspecified</span>  \n    <span class=\"k\">case</span> <span class=\"n\">light</span>  \n    <span class=\"k\">case</span> <span class=\"n\">dark</span>  \n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>…but they only apply to CarPlay on iOS 12 beta 1.</p>\n\n<p>So there you go 🤷🏻‍♂️.</p>\n\n<h3 id=\"notifications\">Notifications</h3>\n\n<p>Technically not part of UIKit, but I did have to highlight one welcome change aside from the new grouping capabilities. Look, dealing with notifications is often a pain from a developer perspective. While not a forgone conclusion, the more notification offerings we have to support, generally the issues that could arise grow exponentially.</p>\n\n<p>You have the system notification view to toggle app permissions within iOS’ settings, possibly your own user interface to allow for granular choices, APNS to go through and oh, let’s not forget the network to contend with too.</p>\n\n<p>So, the fact that you can deep link directly into your app’s notification settings from an incoming one is not a small improvement (via <code class=\"highlighter-rouge\">providesAppNotificationSettings</code>), but a very welcome change as developers continue their journey towards simplifying notification issues for them, the end user and customer support.</p>\n\n<p>🕺!</p>\n\n<h3 id=\"-and-the-free-ones-\">… And The Free Ones 🙌</h3>\n\n<p><a href=\"https://twitter.com/_inside/status/1003831980025372673\">iOS 12 is fast</a>. A lot of the improvements we’ll enjoy come from deep within the framework itself. Here, I’ve chosen to highlight API changes you’ll need to put some time into to reap benefits.</p>\n\n<p>But that’s the thing — our apps will feel a bit smoother, faster and coherent without us having done anything at all.</p>\n\n<p>The reasons why range from smarter cell prefetching via the API scheduling things serially, smarter CPU diversification, more intelligent backing stores for <code class=\"highlighter-rouge\">UIView</code> and Auto Layout (quite impressively) hitting O(n) instead of O(n²) for multiple common layout scenarios, to name a few.</p>\n\n<h3 id=\"wrapping-up\">Wrapping Up</h3>\n\n<p>Personally, I came away more impressed than I thought I would be with iOS 12. Initially, it appeared that a lot of the chatter preemptively declared that iOS 12 would be a day late and dollar short. Last year, we were treated to some marquee features within UIKit like drag and drop — so what could they throw down for us this year?</p>\n\n<p>But, as is typical, W.W.D.C. brought some new stuff we weren’t expecting, hardening updates and most importantly the new APIs. Exciting times, plus — our apps are just better by virtue of simply running on the new OS. UIKit will always be at the forefront, and this year was no exception as there’s still plenty of discussions left to be had around this year’s improvements.</p>\n\n<p>Saddle up 📱</p>",
            "summary": "And here we are. We’ve finally got a good look at iOS 12 and all it has on offer. Though some chose to view it as a tame maintenance release, tagging it as such is a disservice and there was plenty to digest during the WWDC keynote.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2018-06-08T00:00:00-05:00",
            "date_modified": "2018-06-08T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["UIKit"]},{
            "id": "http://localhost:4000/WWDC-18-The-Pregame-Quiz",
            "url": "http://localhost:4000/WWDC-18-The-Pregame-Quiz/",
            "title": "WWDC 2018: The Pregame Quiz",
            "content_html": "<p>It’s Christmas time for iOS engineers the world over. Mr.Cook and friends are a little less than a week away from pulling the curtains off of iOS 12. Will we see vast improvements, or the oft rumored “maintenance” release?</p>\n\n<p>Time will soon tell, but until then it’s time for the fourth annual T.T.I.D.G. WWDC Pregame Quiz!</p>\n\n<p>If you’d like a quick primer on how this all works or how it got started, check out the first three quizzes from <a href=\"http://localhost:4000/WWDC-2015-The-Pregame-Quiz\">2015</a> ,<a href=\"http://localhost:4000/WWDC-2016-The-Pregame-Quiz\">2016</a> and <a href=\"http://localhost:4000/WWDC-2017-The-Pregame-Quiz\">2017</a>.</p>\n\n<p>Participants — time to add the quiz operation to your queues⚡️!</p>\n\n<h3 id=\"ground-rules\">Ground Rules</h3>\n\n<p>There are three rounds, and the point break down is as follows:</p>\n\n<ul>\n  <li><strong>Round 1</strong> –1 point each answer</li>\n  <li><strong>Round 2</strong> - 2 points each answer</li>\n  <li><strong>Round 3</strong> - 3 points each answer</li>\n</ul>\n\n<p>The last question of each round is an optional wildcard question. Get it right, and your team gets <strong>4</strong> <strong>points</strong>, <em>but</em> miss it and the team will be <strong>deducted 2 points</strong>.</p>\n\n<h3 id=\"round-1swiftly-answered\">Round 1 — Swiftly Answered</h3>\n\n<p><strong>Question 1:</strong><br />\nThis technique, introduced in a WWDC 15 session, declared that Swift was the industries first <em>what</em> oriented programming language?</p>\n\n<p><strong>Question 2:</strong><br />\nOn June 2nd, 2014 — what app became the first publicly available app written in Swift?</p>\n\n<p><strong>Question 3:</strong><br />\nWhat’s the name of the instance method that’s <strong>not</strong> possible to use in pure Swift classes/objects that NSObject uses to invoke objc_msgSend and allow for dynamic method resolution?</p>\n\n<p><strong>Question 4:</strong></p>\n\n<p>Which new typealias introduced in Swift 4 extended support of archival and serialization to struct and enum types and enables type-safety for serializing to external formats such as JSON and plist?</p>\n\n<p><strong>Wildcard:</strong><br />\nDuring WWDC 14 when Swift was unveiled, what was the <em>very first</em> public Swift string variable set equal to during its inaugural demo introduction by Chris Lattner?</p>\n\n<h3 id=\"round-2ios--its-tools-storied-history\">Round 2 — iOS’ &amp; its Tools Storied History</h3>\n\n<p><strong>Question 1:</strong><br />\nWhat framework, added in iOS 5, gave rise to the popularity of photo editing apps by exposing a powerful set of built-in filters for manipulating video and still images?</p>\n\n<p><strong>Question 2:</strong><br />\nIt’s well known that Core Data, Keyed Archiver and User Defaults allow for persistency on iOS. What other persistency option is available by default on the platform?</p>\n\n<p><strong>Question 3:</strong><br />\nWhat CLI, originally released with Xcode 6 and housed within xcrun, allows one to perform various tasks on the iOS simulator, such as recording videos and opening URL schemes?</p>\n\n<p><strong>Question 4:</strong></p>\n\n<p>Developers sometimes crash their app in a controlled manner during development by invoking the abort(); function, but there is also a little known intrinsic function that generates a machine-specific trap instruction. What is it?</p>\n\n<p><strong>Wildcard:</strong><br />\nThis ridiculously long initializer, clocking in at 202 characters, is found within what Apple framework:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">initWithEnableFan</span><span class=\"p\">:</span>  \n<span class=\"nv\">enableAirConditioner</span><span class=\"p\">:</span>  \n<span class=\"nv\">enableClimateControl</span><span class=\"p\">:</span>  \n<span class=\"nv\">enableAutoMode</span><span class=\"p\">:</span>  \n<span class=\"nv\">airCirculationMode</span><span class=\"p\">:</span>  \n<span class=\"nv\">fanSpeedIndex</span><span class=\"p\">:</span>  \n<span class=\"nv\">fanSpeedPercentage</span><span class=\"p\">:</span>  \n<span class=\"nv\">relativeFanSpeedSetting</span><span class=\"p\">:</span>  \n<span class=\"nv\">temperature</span><span class=\"p\">:</span>  \n<span class=\"nv\">relativeTemperatureSetting</span><span class=\"p\">:</span>  \n<span class=\"nv\">climateZone</span><span class=\"p\">:</span>\n</code></pre></div></div>\n<h3 id=\"round-3the-random-apple-ones\">Round 3 — The Random Apple Ones</h3>\n\n<p><strong>Question 1:</strong><br />\nThis game is a now a triple A blockbuster shooter, but it was originally announced at MacWorld in 1999 and was set to release on the platform as a third person action game. What game is it?</p>\n\n<p><strong>Question 2:</strong><br />\nSteve Jobs infamously said that <em>what</em> was a “sweet solution” for developing on the iPhone before the advent of the App Store at WWDC 07’?</p>\n\n<p><strong>Question 3:</strong><br />\nThe iPhone’s revolutionary multitouch interface was prototyped by a team, colloquially referred to as the ENRI group, at Apple in their abandoned user-testing lab at 2 Infinite Loop — what was their original mission statement?</p>\n\n<p><strong>Question 4:</strong></p>\n\n<p>John Carmack, long a pioneer of the games industry, went toe to toe with Steve Jobs in advocating that which framework should be adopted as the Mac’s 3D Graphics API?</p>\n\n<p><strong>Wildcard:</strong><br />\nThough the iPhone’s touchscreen has made the paradigm commonplace in today’s world — Eric Arthur Johnson is believed to have invented the world’s very first touch screen as an engineer at England’s Royal Radar Establishment in 1965. What instrument did he create a touchscreen for?</p>",
            "summary": "It’s Christmas time for iOS engineers the world over. Mr.Cook and friends are a little less than a week away from pulling the curtains off of iOS 12. Will we see vast improvements, or the oft rumored “maintenance” release?",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2018-05-30T00:00:00-05:00",
            "date_modified": "2018-05-30T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["Trivia"]},{
            "id": "http://localhost:4000/NSPredicate-Objective-C",
            "url": "http://localhost:4000/NSPredicate-Objective-C/",
            "title": "NSPredicate",
            "content_html": "<p>When Swift hit, we were enamored over its simplicity compared to Objective-C. Then it quickly became key to roll with protocol oriented programming. Also, forget reference types and classes. The list goes on.</p>\n\n<p>And true — those things are great tools and have superb use cases. But I sense they are often lifted up as silver bullets without the necessary amount of thought that should probably be given to architectural decisions.</p>\n\n<p>So in 2018, the blog posts overfloweth with Swift hackery (even on my blog 🤷🏻‍♂️) and the conference talks wax poetic of its future using functional programming parlance (yup, I’ve done that too 🙋🏻‍♂️).</p>\n\n<p>Everyone seems excited about working with collections in Swift <strong>but</strong> we’ve also been able to do <em>similar</em> things in Objective-C since iOS 3. So today, I’m chatting about the power of NSPredicate and how you can sift through collections with it using the 🦖.</p>\n\n<p>I think it’s relevant to bring it back up, as now we’re seeing developers at this point who’ve started with Swift, and then later have circled back to maintain some Objective-C. If that’s you, it’s possible that you’ve been frustrated with the amount of boilerplate or iteration you’ve had to write when using collections in Objective-C.</p>\n\n<p>Today, I have might have something for you.</p>\n\n<h3 id=\"the-use-case\">The Use Case</h3>\n\n<p>We’ve come a long way in recent years when it comes to Objective-C collections. Not more than a handful of years ago, we had to tell the compiler we were much smarter than it was:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">aString</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"p\">)[</span><span class=\"n\">anArray</span> <span class=\"nv\">indexOfObject</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<p>Thanks Heavens, Cupertino and Friends© eventually tacked on generics by way of type erasure. This marked a significant improvement:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">NSArray</span>  <span class=\"o\">*</span><span class=\"n\">anArray</span> <span class=\"o\">=</span> <span class=\"err\">@</span><span class=\"p\">[</span><span class=\"s\">@\"Sup\"</span><span class=\"p\">];</span>  \n<span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">aString</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">anArray</span> <span class=\"n\">firstObject</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<p>But generics or not, we often interact with the contents of Objective-C collections by doing something like this:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">str</span> <span class=\"k\">in</span> <span class=\"n\">anArray</span><span class=\"p\">)</span>  \n<span class=\"p\">{</span>  \n    <span class=\"k\">if</span> <span class=\"p\">([</span><span class=\"n\">str</span> <span class=\"nv\">isEqualToString</span><span class=\"p\">:</span><span class=\"s\">@\"The Key\"</span><span class=\"p\">])</span>   \n    <span class=\"p\">{</span>  \n        <span class=\"c1\">// Do something  </span>\n    <span class=\"p\">}</span>  \n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>A lot of times, that’s kosher. But as the requirements become more complex and the relationships more varied, the code gets a bit iffy. If you subscribe to the notion that less code means less bugs and better maintenance, the simple act of querying collections can become a bother.</p>\n\n<p>Predicates can lessen the blow here. It’s not about being “tricky” or cute with our code, but pragmatic and succinct.</p>\n\n<h3 id=\"the-10000-foot-view\">The 10,000 Foot View</h3>\n\n<p>At its core, <code class=\"highlighter-rouge\">NSPredicate</code> is used to constrain or define the parameters for in memory filtering or when performing a fetch. It really got its bones when paired with Core Data. It’s like SQL, except less awful*.</p>\n\n<blockquote>\n  <p>I joke, it’s just that set based operations have never made sense to me 🙃.</p>\n</blockquote>\n\n<p>You supply it logical conditions, and it helps to return things that match said conditions. This means it provides support for basic comparisons, compound predicates, key path collections queries, subqueries, aggregates and more.</p>\n\n<p>As it’s used to sift through collections, you can expect Foundation classes to support it out of the box. Mutable varieties support in-place mutations from the results, whereas their immutable flavors will return a new instance:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// In place  </span>\n<span class=\"p\">[</span><span class=\"n\">mutableArray</span> <span class=\"nv\">filterUsingPredicate</span><span class=\"p\">:</span><span class=\"cm\">/*NSPredicate*/</span><span class=\"p\">]</span>\n\n<span class=\"c1\">// New instance returned  </span>\n<span class=\"p\">[</span><span class=\"n\">mutableArray</span> <span class=\"nv\">filteredArrayUsingPredicate</span><span class=\"p\">:</span><span class=\"cm\">/*NSPredicate*/</span><span class=\"p\">]</span>\n</code></pre></div></div>\n<p>Though predicates can be instantiated from [<code class=\"highlighter-rouge\">NSExpression][1]</code> , [<code class=\"highlighter-rouge\">NSCompoundPredicate][1]</code> or [<code class=\"highlighter-rouge\">NSComparisonPredicate][1]</code> — it can also be created using a string syntax. This is similar to the Visual Format Language that one can use to define layout constraints.</p>\n\n<p>We’ll be focusing on the utility of using the string syntax method.</p>\n\n<h3 id=\"the-setup\">The Setup</h3>\n\n<p>To illustrate, let’s consider the following code for the remainder of the post:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Pseudo code   </span>\n<span class=\"kt\">Person</span><span class=\"p\">:</span><span class=\"kt\">NSObject</span>  \n<span class=\"kt\">Identifier</span><span class=\"p\">:</span><span class=\"kt\">NSString</span>  \n<span class=\"kt\">Name</span><span class=\"p\">:</span><span class=\"kt\">NSString</span>  \n<span class=\"kt\">PayGrade</span><span class=\"p\">:</span><span class=\"kt\">NSNumber</span>\n\n<span class=\"c1\">// An some property somewhere containing Person instances  </span>\n<span class=\"kt\">NSArray</span>  <span class=\"o\">*</span><span class=\"n\">employees</span>\n</code></pre></div></div>\n<h3 id=\"query-time-️\">Query Time ⚡️</h3>\n\n<p>What follows for the rest of the post are straight forward examples of how to setup queries using the string format syntax.</p>\n\n<p>We can start with a simple search scenario. Let’s assume we’ve got an array containing identifiers representing Person objects:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span>  \n    <span class=\"s\">@\"erersdg32453tr\"</span><span class=\"p\">,</span>  \n    <span class=\"s\">@\"dfs8rw093jrkls\"</span><span class=\"p\">,</span>  \n    <span class=\"c1\">// etc  </span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>Now, we’d like to retrieve Person objects from an existing array of Person objects from these identifiers. Using a double nested for-loop, it could be accomplished as such:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Assume \"employees\" is an existing array of Person objects</span>\n<span class=\"kt\">NSArray</span>  <span class=\"o\">*</span><span class=\"n\">morningEventAttendees</span> <span class=\"o\">=</span> <span class=\"err\">@</span><span class=\"p\">[</span><span class=\"cm\">/*Identifiers of people listed above*/</span><span class=\"p\">];</span>\n<span class=\"kt\">NSMutableArray</span>  <span class=\"o\">*</span><span class=\"n\">peopleAttendingMorningEvent</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSMutableArray</span> <span class=\"k\">new</span><span class=\"p\">];</span>\n\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">userID</span> <span class=\"k\">in</span> <span class=\"n\">morningEventAttendees</span><span class=\"p\">)</span>  \n<span class=\"p\">{</span>  \n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">Person</span> <span class=\"o\">*</span><span class=\"n\">person</span> <span class=\"k\">in</span> <span class=\"n\">employees</span><span class=\"p\">)</span>  \n    <span class=\"p\">{</span>  \n        <span class=\"k\">if</span> <span class=\"p\">([</span><span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">identifier</span> <span class=\"nv\">isEqualToString</span><span class=\"p\">:</span><span class=\"n\">userID</span><span class=\"p\">])</span>  \n        <span class=\"p\">{</span>  \n            <span class=\"p\">[</span><span class=\"n\">peopleAttending</span> <span class=\"nv\">addObject</span><span class=\"p\">:</span><span class=\"n\">person</span><span class=\"p\">];</span>  \n        <span class=\"p\">}</span>  \n    <span class=\"p\">}</span>  \n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Now peopleAttendingMorningEvent has what we want</span>\n</code></pre></div></div>\n<p>The exact same result is accomplished using a predicate as such:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">NSPredicate</span> <span class=\"o\">*</span><span class=\"n\">morningAttendees</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSPredicate</span> <span class=\"nv\">predicateWithFormat</span><span class=\"p\">:</span><span class=\"s\">@\"SELF.identifier IN %@\"</span><span class=\"p\">,</span> <span class=\"n\">peopleAttendingMorningEvent</span><span class=\"p\">];</span>\n\n<span class=\"kt\">NSArray</span>  <span class=\"o\">*</span><span class=\"n\">peopleAttendingMorningEvent</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">employees</span> <span class=\"nv\">filteredArrayUsingPredicate</span><span class=\"p\">:</span><span class=\"n\">morningAttendees</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<p>💫.</p>\n\n<p>Predicate syntax allows for the use of SELF, which is used to great effect here. It represents the object contained within the array being operated on, so for us — Person objects.</p>\n\n<blockquote>\n  <p>Another bonus is that we’ve dropped the mutability of the array definition._</p>\n</blockquote>\n\n<p>It’s for this reason we can access the key paths associated with the object that SELF is representing. You’re seeing that above, as the <code class=\"highlighter-rouge\">identifier</code> property is referenced.</p>\n\n<p>Should you prefer, any key path can also be expressed via a variable using the “%K” syntax in its place. This version does the same as above:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">[</span><span class=\"kt\">NSPredicate</span> <span class=\"nv\">predicateWithFormat</span><span class=\"p\">:</span><span class=\"s\">@\"SELF.%K IN %@\"</span><span class=\"p\">,</span> <span class=\"s\">@\"identifier\"</span><span class=\"p\">,</span> <span class=\"n\">peopleAttendingMorningEvent</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<h3 id=\"compound-predicates\">Compound Predicates</h3>\n\n<p>It’s trivial to combine comparisons. Suppose our requirements now call for finding users attending events the same way as above, but now their paygrade must also be between 50,000 and 60,000.</p>\n\n<p>If traditional approaches win out, then our first if statement will only grow:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Same code as above same for this tweak  </span>\n<span class=\"k\">if</span> <span class=\"p\">([</span><span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">identifier</span> <span class=\"nv\">isEqualToString</span><span class=\"p\">:</span><span class=\"n\">userID</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">paygrade</span><span class=\"o\">.</span><span class=\"n\">integerValue</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">5</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">paygrade</span><span class=\"o\">.</span><span class=\"n\">integerValue</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">10</span><span class=\"p\">))</span>  \n<span class=\"p\">{</span>  \n    <span class=\"p\">[</span><span class=\"n\">peopleAttending</span> <span class=\"nv\">addObject</span><span class=\"p\">:</span><span class=\"n\">person</span><span class=\"p\">];</span>  \n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>But using a refactored predicate gets us there in a more idiomatic way:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">NSPredicate</span> <span class=\"o\">*</span><span class=\"n\">morningAttendees</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSPredicate</span> <span class=\"nv\">predicateWithFormat</span><span class=\"p\">:</span><span class=\"s\">@\"SELF.identifier IN %@ &amp;&amp; SELF.paygrade.integerValue BETWEEN {50000, 60000}\"</span><span class=\"p\">,</span> <span class=\"n\">peopleAttendingMorningEvent</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<p>The syntax allows for different operators denoting the same thing which can help hone in on readability, per your preference. For example:</p>\n\n<ul>\n  <li>“&amp;&amp;” or “AND”</li>\n  <li>\n    <table>\n      <tbody>\n        <tr>\n          <td>”</td>\n          <td> </td>\n          <td>” or “OR”</td>\n        </tr>\n      </tbody>\n    </table>\n  </li>\n  <li>”!” or “NOT”</li>\n</ul>\n\n<p>As expected, these are usually aggregated into one predicate by using them in tandem with the basic comparison operators you are likely expecting:</p>\n\n<h3 id=\"string-comparisons\">String Comparisons</h3>\n\n<p>We’re often tasked with matching values based off of string comparisons. It’s well known that Objective-C shines its unrequited love for verboseness in no greater light than when dealing with NSString:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">@\"Jordan\"</span>  \n<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">name</span> <span class=\"nv\">stringByAppendingString</span><span class=\"p\">:[</span><span class=\"kt\">NSString</span> <span class=\"nv\">stringWithFormat</span><span class=\"p\">:</span><span class=\"s\">@\"%@ %@\"</span><span class=\"p\">,</span> <span class=\"s\">@\"Wesley\"</span><span class=\"p\">,</span> <span class=\"s\">@\"Morgan\"</span><span class=\"p\">]]</span>\n</code></pre></div></div>\n<p>…whereas Swift just smirks and concatenates its own strings with much less fuss. As such, we can take heart that such verboseness doesn’t apply with NSPredicate and string comparisons.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Assume mutablePersonAr is a Person array with names of \"Karl\", \"Jordan\"  </span>\n<span class=\"kt\">NSPredicate</span> <span class=\"o\">*</span><span class=\"n\">namesStartingWithK</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSPredicate</span> <span class=\"nv\">predicateWithFormat</span><span class=\"p\">:</span><span class=\"s\">@\"SELF.name BEGINSWITH 'K'\"</span><span class=\"p\">];</span>\n<span class=\"c1\">// Now only contains Karl  </span>\n<span class=\"p\">[</span><span class=\"n\">mutablePersonAr</span> <span class=\"nv\">filterUsingPredicate</span><span class=\"p\">:</span><span class=\"n\">namesStartingWithK</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<p>Virtually any comparison can be achieved by way of the predicate syntax’s CONTAINS, BEGINSWITH, ENDSWITH and LIKE:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Assume mutablePersonAr is a Person array with names of \"Karl\", \"Kathryn\"  </span>\n<span class=\"kt\">NSPredicate</span> <span class=\"o\">*</span><span class=\"n\">namesStartingWithK</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSPredicate</span> <span class=\"nv\">predicateWithFormat</span><span class=\"p\">:</span><span class=\"s\">@\"SELF.name LIKE 'Kar*'\"</span><span class=\"p\">];</span>\n\n<span class=\"c1\">// Now only contains Karl  </span>\n<span class=\"p\">[</span><span class=\"n\">mutablePersonAr</span> <span class=\"nv\">filterUsingPredicate</span><span class=\"p\">:</span><span class=\"n\">namesStartingWithK</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<blockquote>\n  <p>You may have noticed the asterisk above, which like many similar DSLs out there, represents a wildcard.</p>\n</blockquote>\n\n<p>The ease of use really begins to come to the forefront when you combine comparison operators within one query:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">predicateFormat</span> <span class=\"o\">=</span> <span class=\"s\">@\"(SELF.name LIKE 'Kar*') AND (SELF.paygrade.intValue &gt;= 10)\"</span>\n\n<span class=\"kt\">NSPredicate</span> <span class=\"o\">*</span><span class=\"n\">namesStartingWithK</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSPredicate</span> <span class=\"nv\">predicateWithFormat</span><span class=\"p\">:</span><span class=\"n\">predicateFormat</span><span class=\"p\">];</span>\n\n<span class=\"c1\">// Now only contains Karl  </span>\n<span class=\"p\">[</span><span class=\"n\">mutablePersonAr</span> <span class=\"nv\">filterUsingPredicate</span><span class=\"p\">:</span><span class=\"n\">namesStartingWithK</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<p>Further, there is even support for a mix of NSPredicate’s SQLish syntax to be mashed up with regular expressions by way of the MATCHES syntax:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">[</span><span class=\"kt\">NSPredicate</span> <span class=\"nv\">predicateWithFormat</span><span class=\"p\">:</span><span class=\"s\">@\"SELF.phoneNumber MATCHES %@\"</span><span class=\"p\">,</span> <span class=\"n\">phoneNumberRegex</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<p>However, this is an opportune time to point out that the predicate format syntax is exactly what it is. A straight up string. And unless you’re Mavis Beacon, you’ll supply it with a typo every now and again.</p>\n\n<p>The good news is that’ll you find out fast — as a runtime exception awaits. What we gain in power and flexibility is, in some ways, mitigated by the loss of the safety net that static analysis provides.</p>\n\n<p>To illustrate, this slightly refactored sample from above will crash. Can you tell why?</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">predicateFormat</span> <span class=\"o\">=</span> <span class=\"s\">@\"SELF.name LIKE 'Kar*') AND (SELF.paygrade.intValue &gt;= 10)\"</span>\n\n<span class=\"kt\">NSPredicate</span> <span class=\"o\">*</span><span class=\"n\">namesStartingWithK</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSPredicate</span> <span class=\"nv\">predicateWithFormat</span><span class=\"p\">:</span><span class=\"n\">predicateFormat</span><span class=\"p\">];</span>\n\n<span class=\"c1\">// Now only contains Karl  </span>\n<span class=\"p\">[</span><span class=\"n\">mutablePersonAr</span> <span class=\"nv\">filterUsingPredicate</span><span class=\"p\">:</span><span class=\"n\">namesStartingWithK</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<p>To combat such issues, I’ve often paired predicates with NSStringFromSelector() to provide an additional layer of safety against typos and future refactoring:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">predicateFormat</span> <span class=\"o\">=</span> <span class=\"s\">@\"(SELF.%@ LIKE 'Kar*') AND (SELF.paygrade.intValue &gt;= 10)\"</span>\n\n<span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">kpName</span> <span class=\"o\">=</span> <span class=\"kt\">NSStringFromSelector</span><span class=\"p\">(</span><span class=\"kd\">@selector(identifier)</span><span class=\"p\">);</span>  \n<span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">kpPaygrade</span> <span class=\"o\">=</span> <span class=\"kt\">NSStringFromSelector</span><span class=\"p\">(</span><span class=\"kd\">@selector(paygrade)</span><span class=\"p\">);</span>\n\n<span class=\"kt\">NSPredicate</span> <span class=\"o\">*</span><span class=\"n\">namesStartingWithK</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSPredicate</span> <span class=\"nv\">predicateWithFormat</span><span class=\"p\">:</span><span class=\"n\">predicateFormat</span><span class=\"p\">,</span> <span class=\"n\">kpName</span><span class=\"p\">,</span> <span class=\"n\">kpPaygrade</span><span class=\"p\">];</span>\n\n<span class=\"c1\">// Now only contains Karl  </span>\n<span class=\"p\">[</span><span class=\"n\">mutablePersonAr</span> <span class=\"nv\">filterUsingPredicate</span><span class=\"p\">:</span><span class=\"n\">namesStartingWithK</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<p>A bit more heavy handed? Sure. Safer? Absolutely.</p>\n\n<h3 id=\"keypath-collection-queries\">KeyPath Collection Queries</h3>\n\n<p>Building upon the use of key paths, <code class=\"highlighter-rouge\">NSPredicate</code> boasts a full suite of tools to operate on them in the name of a better search. Consider the following:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Assume a Person object now has this property on it:  </span>\n<span class=\"c1\">// NSArray  *previousPay</span>\n\n<span class=\"c1\">// Find everyone who's average previous pay was over 10  </span>\n<span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">predicateFormat</span> <span class=\"o\">=</span> <span class=\"s\">@\"SELF.previousPay.@avg.doubleValue &gt; 10\"</span><span class=\"p\">;</span>\n<span class=\"kt\">NSPredicate</span> <span class=\"o\">*</span><span class=\"n\">previousPayOverTen</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSPredicate</span> <span class=\"nv\">predicateWithFormat</span><span class=\"p\">:</span><span class=\"n\">predicateFormat</span><span class=\"p\">];</span>\n\n<span class=\"c1\">// Everyone whose previous pay's average was greater than 10  </span>\n<span class=\"p\">[</span><span class=\"n\">mutablePersonAr</span> <span class=\"nv\">filterUsingPredicate</span><span class=\"p\">:</span><span class=\"n\">previousPayOverTen</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<p>You could switch our the @avg for:</p>\n\n<p>When you consider the amount of, albeit trivial, code that you might’ve had to author to achieve the same things outside of a predicate, these types of techniques can begin to become part of your regular toolchain.</p>\n\n<h3 id=\"digging-deeper-into-arrays\">Digging Deeper into Arrays</h3>\n\n<p>Much like key path queries, there is also support for inspecting implicit arrays to a finer degree:</p>\n\n<ul>\n  <li>array[FIRST]</li>\n  <li>array[LAST]</li>\n  <li>array[SIZE]</li>\n  <li>array[index]</li>\n</ul>\n\n<p>Building from the code sample above, this allows for queries such as this:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Find everyone who's had three previous different salaries  </span>\n<span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">predicateFormat</span> <span class=\"o\">=</span> <span class=\"s\">@\"previousPay[SIZE] == 3\"</span><span class=\"p\">;</span>\n\n<span class=\"kt\">NSPredicate</span> <span class=\"o\">*</span><span class=\"n\">threePreviousSalaries</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSPredicate</span> <span class=\"nv\">predicateWithFormat</span><span class=\"p\">:</span><span class=\"n\">predicateFormat</span><span class=\"p\">];</span>\n\n<span class=\"c1\">// These Person objects had three previous salaries  </span>\n<span class=\"p\">[</span><span class=\"n\">mutablePersonAr</span> <span class=\"nv\">filterUsingPredicate</span><span class=\"p\">:</span><span class=\"n\">threePreviousSalaries</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<p>And as we alluded to above, it’s perfectly find to apply multiple conditions:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Find everyone who's had three previous different salaries and whose first one was greater than 8  </span>\n<span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">predicateFormat</span> <span class=\"o\">=</span> <span class=\"s\">@\"(previousPay[SIZE] == 3) AND (previousPay[FIRST].intValue &gt; 8)\"</span><span class=\"p\">;</span>\n\n<span class=\"kt\">NSPredicate</span> <span class=\"o\">*</span><span class=\"n\">predicate</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSPredicate</span> <span class=\"nv\">predicateWithFormat</span><span class=\"p\">:</span><span class=\"n\">predicateFormat</span><span class=\"p\">];</span>\n<span class=\"p\">[</span><span class=\"n\">mutablePersonAr</span> <span class=\"nv\">filterUsingPredicate</span><span class=\"p\">:</span><span class=\"n\">predicate</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<p>Going even further, you get gain even more power by using either of the following:</p>\n\n<ul>\n  <li><strong>@distinctUnionOfArrays</strong></li>\n  <li><strong>@unionOfArrays</strong></li>\n  <li>@<strong>unionOfObjects</strong></li>\n  <li><strong>@distinctUnionOfObjects</strong></li>\n</ul>\n\n<p>Hang with me, but assume we had an array of arrays containing Person objects, and all that we needed were the unique identifiers of the Person instances among them:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Assume p1/2/3/4 are all hydrated Person objects  </span>\n<span class=\"kt\">NSArray</span>  <span class=\"o\">*&gt;</span> <span class=\"o\">*</span><span class=\"n\">previousEmployees</span> <span class=\"o\">=</span> <span class=\"err\">@</span><span class=\"p\">[</span><span class=\"err\">@</span><span class=\"p\">[</span><span class=\"n\">p1</span><span class=\"p\">],</span><span class=\"err\">@</span><span class=\"p\">[</span><span class=\"n\">p2</span><span class=\"p\">,</span><span class=\"n\">p1</span><span class=\"p\">,</span><span class=\"n\">p2</span><span class=\"p\">],</span><span class=\"err\">@</span><span class=\"p\">[</span><span class=\"n\">p1</span><span class=\"p\">],</span><span class=\"err\">@</span><span class=\"p\">[</span><span class=\"n\">p4</span><span class=\"p\">,</span><span class=\"n\">p2</span><span class=\"p\">],</span><span class=\"err\">@</span><span class=\"p\">[</span><span class=\"n\">p4</span><span class=\"p\">],</span><span class=\"err\">@</span><span class=\"p\">[</span><span class=\"n\">p4</span><span class=\"p\">],</span><span class=\"err\">@</span><span class=\"p\">[</span><span class=\"n\">p1</span><span class=\"p\">]];</span>\n\n<span class=\"c1\">// Get every unique ID  </span>\n<span class=\"kt\">NSArray</span> <span class=\"o\">*</span><span class=\"n\">unqiuePreviousEmployeeIDs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">previousEmployees</span> <span class=\"nv\">valueForKeyPath</span><span class=\"p\">:</span><span class=\"s\">@\"@distinctUnionOfObjects.identifier\"</span><span class=\"p\">];</span>\n\n<span class=\"c1\">// The array would contain only unique IDs</span>\n</code></pre></div></div>\n<p>Cool, no?</p>\n\n<p>The fun doesn’t stop there, as there is even support for subqueries:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Assume Person objects have a new property for their team:  </span>\n<span class=\"c1\">// NSArray  *team;</span>\n\n<span class=\"c1\">// Find everyone in an employee array who has people in their team with a pay over 1 and no previous pay history  </span>\n<span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">predicateFormat</span> <span class=\"o\">=</span> <span class=\"s\">@\"SUBQUERY(team, $teamMember, $teamMember.paygrade.intValue &gt; 1 AND $teamMember.previousPay == nil).@count &gt; 0\"</span><span class=\"p\">;</span>\n\n<span class=\"kt\">NSPredicate</span> <span class=\"o\">*</span><span class=\"n\">predicate</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSPredicate</span> <span class=\"nv\">predicateWithFormat</span><span class=\"p\">:</span><span class=\"n\">predicateFormat</span><span class=\"p\">];</span>\n<span class=\"p\">[</span><span class=\"n\">employeeAr</span> <span class=\"nv\">filterUsingPredicate</span><span class=\"p\">:</span><span class=\"n\">predicate</span><span class=\"p\">];</span>\n</code></pre></div></div>\n<p>Subqueries are quite useful should you find yourself needing to search on an array of objects which also contain a property that’s itself a collection. So here, we’ve got an array of Person objects, and we’re peeking into their teamMember array.</p>\n\n<h3 id=\"convenience-is-keypath\">Convenience is Key(Path)</h3>\n\n<p>Though <code class=\"highlighter-rouge\">NSPredicate</code> is built for search, it wouldn’t be Objective-C if you couldn’t bend things from their exact purpose <em>just</em> a tad. No exception here.</p>\n\n<p>When you think of a predicate, you think of filtering down a collection — meaning the return (or in place mutation) still contains the same stuff.</p>\n\n<p>But you can, well, make it <em>not</em> be the same things. And we actually did that in the previous code sample. The array of arrays above was used to return an array of identifiers — NSString instances. Keypathin’ makes it all possible.</p>\n\n<p>Here’s a more direct example:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// We want an array of identifier strings whose length is greater than 10  </span>\n<span class=\"kt\">NSString</span> <span class=\"o\">*</span><span class=\"n\">predicateFormat</span> <span class=\"o\">=</span> <span class=\"s\">@\"SELF.identifier.length &gt; 10\"</span><span class=\"p\">;</span>\n<span class=\"kt\">NSPredicate</span> <span class=\"o\">*</span><span class=\"n\">predicate</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSPredicate</span> <span class=\"nv\">predicateWithFormat</span><span class=\"p\">:</span><span class=\"n\">predicateFormat</span><span class=\"p\">];</span>\n<span class=\"kt\">NSArray</span>  <span class=\"o\">*</span><span class=\"n\">longEmployeeIDs</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"n\">employeeArray</span> <span class=\"nv\">filteredArrayUsingPredicate</span><span class=\"p\">:</span><span class=\"n\">predicate</span><span class=\"p\">]</span> <span class=\"nv\">valueForKey</span><span class=\"p\">:</span><span class=\"s\">@\"identifier\"</span><span class=\"p\">];</span>\n\n<span class=\"c1\">// Now longEmployeeIDs has not Person objects, but only strings</span>\n</code></pre></div></div>\n<h3 id=\"wrapping-up\">Wrapping Up</h3>\n\n<p>You can burn through Objective-C collections with sugary syntax. You can drill down to a particular subset of items without nested loops. It’s all much easier on the eyes with <code class=\"highlighter-rouge\">NSPredicate</code>.</p>\n\n<p>While Swift has first class language support to slice and dice collections, it’s really not much of a bother to utilize an object created to do much of the same things. Should you find yourself in a mature codebase or a newly minted one sporting The Dino (Objective-C), let the predicates flow freely.</p>\n\n<p>Until next time✌️.</p>",
            "summary": "When Swift hit, we were enamored over its simplicity compared to Objective-C. Then it quickly became key to roll with protocol oriented programming. Also, forget reference types and classes. The list goes on.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2018-05-18T00:00:00-05:00",
            "date_modified": "2018-05-18T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["Foundation"]},{
            "id": "http://localhost:4000/UILayoutGuide",
            "url": "http://localhost:4000/UILayoutGuide/",
            "title": "UILayoutGuide",
            "content_html": "",
            "summary": "",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2018-04-15T00:00:00-05:00",
            "date_modified": "2018-04-15T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["UIKit"]},{
            "id": "http://localhost:4000/Techniques-to-Connect-Websites-to-iOS-Apps",
            "url": "http://localhost:4000/Techniques-to-Connect-Websites-to-iOS-Apps/",
            "title": "Connecting iOS Apps with their Websites.",
            "content_html": "",
            "summary": "",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2018-02-03T00:00:00-06:00",
            "date_modified": "2018-02-03T00:00:00-06:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["Misc"]},{
            "id": "http://localhost:4000/NSMeasurement",
            "url": "http://localhost:4000/NSMeasurement/",
            "title": "NSMeasurement",
            "content_html": "",
            "summary": "",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2017-12-17T00:00:00-06:00",
            "date_modified": "2017-12-17T00:00:00-06:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["Foundation"]},{
            "id": "http://localhost:4000/Copy-on-Write-in-iOS-11",
            "url": "http://localhost:4000/Copy-on-Write-in-iOS-11/",
            "title": "Copy on Write",
            "content_html": "",
            "summary": "",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2017-11-07T00:00:00-06:00",
            "date_modified": "2017-11-07T00:00:00-06:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["Foundation"]},{
            "id": "http://localhost:4000/The-DeviceCheck-API",
            "url": "http://localhost:4000/The-DeviceCheck-API/",
            "title": "Device Check Overview",
            "content_html": "",
            "summary": "",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2017-10-06T00:00:00-05:00",
            "date_modified": "2017-10-06T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["Device Check"]},{
            "id": "http://localhost:4000/iPhone-X-Dealing-with-Home-Indicator",
            "url": "http://localhost:4000/iPhone-X-Dealing-with-Home-Indicator/",
            "title": "Dealing with Home Indicator",
            "content_html": "",
            "summary": "",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2017-09-13T00:00:00-05:00",
            "date_modified": "2017-09-13T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["Misc"]}]
}