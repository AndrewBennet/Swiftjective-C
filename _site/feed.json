{
    "version": "https://jsonfeed.org/version/1",
    "title": "Swiftjective-C",
    "description": "Swiftjective-C is a periodical over modern iOS software engineering. It houses tactful discussions over Swift, Objective-C and developing high quality apps while peering into various frameworks to see what makes them tick.\n",
    "home_page_url": "http://localhost:4000/",
    "feed_url": "http://localhost:4000/feed.json",
    "author": {
        "name": {"twitter":"jordanmorgan10","picture":"/assets/images/about/headshot.jpeg"}},
    "items": [
      {
            "id": "http://localhost:4000/On-Launching-Your-Indie-App",
            "url": "http://localhost:4000/On-Launching-Your-Indie-App/",
            "title": "On Launching Your Indie App",
            "content_html": "<p>Y.O.L.O.</p>\n\n<p>No, not the chant of today’s youth, declaring our ephemeral state of life wherein we should explore any dangerous activity our heart leads us towards. What I’m referring to is something much more sacred:</p>\n\n<p>You only launch once.</p>\n\n<p>And launch <a href=\"https://www.spendstack.com\" target=\"_blank\">Spend Stack</a> I did, last Thursday in fact. Therapy for me as much as it might be helpful for you - I’d love to leave a brain dump of how I went about things, in no particular order and commingled together.</p>\n\n<h3 id=\"north-star-apps\">North Star Apps</h3>\n<p>I’ve always found the concept of a North Star incredibly helpful. You have a goal, you’ve got others to look towards who’ve achieved that goal - and all of that gives you clarity on future decisions.</p>\n\n<p>So, what were my North Star apps? After deciding early on I’d love to do a paid up front model, I looked at the developers who do that best:</p>\n\n<ul>\n  <li><a href=\"https://www.darksky.net/app\">Dark Sky</a></li>\n  <li><a href=\"https://www.culturedcode.com\">Things 3</a></li>\n  <li><a href=\"https://www.gingerlabs.com\">Notability</a></li>\n  <li><a href=\"https://www.ia.net/writer\">iA Writer</a></li>\n</ul>\n\n<p>These apps are highly respected, are always charting and offer a premium experience with an up front buy in. These are the apps I want to be alongside of, and while it’ll take a lot of work to get there, it’s served me well to study others who’ve been doing the App Store dance extremely well.</p>\n\n<p>These all leverage best in class features of their respective platforms, lean into premium experiences while being cogent about it and they do a fantastic job of instilling user confidence. All of those things speak to me, and it’s a direction I’m passionate in taking Spend Stack.</p>\n\n<p>They are also all paid up front apps, the model I chose. Speaking of…</p>\n\n<h3 id=\"paid-up-front\">Paid Up Front</h3>\n<p>Your pricing models dictates a lot of other choices you’ll make, so this was a decision I made very early on.</p>\n\n<p>As a one man show, I’m good with far less users who are happy with the app than several orders of magnitude more who I’ve got to convert either via I.A.P.’s or a subscription. I prefer to offer you up the whole deal, no gated content or up selling required.</p>\n\n<p>A lot of people said this was a huge mistake business wise, and I can certainly see why they did. Paid up front apps are becoming a thing of the past, it has the most friction for acquisition and a lot of people simply aren’t willing to pay for apps. But, it’s still my favorite way to do business in the App Store.</p>\n\n<p>It does mean you have a tremendous responsibility though. If someone pays for your app, you absolutely have to deliver. That’s why I talk about the notion of being a best in class app so much, because if you are paid up front - you have to be one <em>and</em> you are expected to be one. For me, that’s motivating.</p>\n\n<p>Your user base is typically more involved too. People who pay money for an app are invested in them, and I don’t see this point brought up nearly enough as a major positive for paid up front business models. I’ve had several great conversations with a lot of them already, and we’ve even got a Reddit community going now to discuss the future of the app.</p>\n\n<p>From a support standpoint, being paid up front was critical to my initial launch success too. I replied back to each email timely, and that was a great experience all the way around. But, I was getting around 10-15 a day at about 500 downloads. Let’s say free apps yield about 10x more downloads, putting us hypothetically at 5,000 downloads if I had gone that route. I simply would’ve been drowning in email, and only a fraction of those users might be paying ones.</p>\n\n<h3 id=\"launch-checklist\">Launch Checklist</h3>\n<p>Once I had a business model and an app mostly built, I started in on what a launch might look like.</p>\n\n<p>I’m a Type A personality if there ever was one. I got lists on lists. And those lists are categorized by date and color coded. As such, my launch strategy was rigid and calculated. Anytime I had a thought about launching, it went through this flow:</p>\n\n<ul>\n  <li>Get it into Reminders straight away</li>\n  <li>Add any relevant notes to it, such as links.</li>\n  <li>Later that night, vet all of these thoughts. If they were something I wanted to actually explore, I’d pop them into a Notion doc.</li>\n</ul>\n\n<p>The aforementioned Notion doc was divided into three columns: Pre launch, launch day and post launch.</p>\n\n<p><img src=\"../assets/images/launchList.jpeg\" alt=\"Launch List\" /></p>\n\n<p>The things I had noted in the Launch and Post Launch sections are nothing unheard of - experiment and try new things, give search ads a spin, etc. It had notes on how to take time to craft some quality posts on the places you know of already; Product Hunt, some subreddits and similar places.</p>\n\n<p><img src=\"../assets/images/launchDay.jpeg\" alt=\"Launch Day\" /></p>\n\n<p>The key to each of these places is to ensure you follow the rules to the letter, plus - you know spam when you see it. Nobody wants to read it. Even if it’s a highly trafficked spot on the web, if Spend Stack didn’t seem like the right subject matter for it, I skipped it. You want things to go great at launch - but how you do it also matters in my opinion.</p>\n\n<h3 id=\"your-apps-story\">Your App’s Story</h3>\n<p>One of the most useful forms of spreading the word about Spend Stack was the one that was the most genuine, less market-y thing I did. Just simply telling the <a href=\"http://localhost:4000/introducing-spend-stack\">app’s story</a>. I wrote about the what and why of Spend Stack, and several people outside of our normal Twitter tech circle picked it up and resonated with it.</p>\n\n<p>I said it before and I’ll say it again - tell your app’s story! It’s a great thing to do, and everybody wins: They get to know you, form a connection behind why it exists and then they also can see the app’s value proposition first hand.</p>\n\n<p>If you go back and skim my post over Spend Stack’s story you’ll see it follows this exact format:</p>\n\n<ul>\n  <li>Here’s a problem I wanted to solve</li>\n  <li>Here’s the app I made that solves it</li>\n  <li>Here’s the story about how I got the idea and how it came together</li>\n</ul>\n\n<p>Simply put, as an indie you’re missing out if you’re not doing this. I really believe that.</p>\n\n<p>Think about each W.W.D.C. from the past few years, what does the keynote end with? It ends with a touching video showcasing the story behind their products, often showing developers talking about their struggles, triumphs and their family talking about the same thing. They do it because it resonates with us - it’s like looking in the mirror.</p>\n\n<p>You never know who’s going to really take to your story and identify with it. Those are great customers you’ll be able to make really happy.</p>\n\n<h3 id=\"the-preorder-thing\">The Preorder Thing</h3>\n<p>After announcing it, preordering just kind of happened. My timeline was setup to where if app review went fine (and it did, it was approved on the first go around) I would have two weeks until launch.</p>\n\n<p>I told press about it on a Monday, and then one week later I publicly announced it on Twitter. Since I was already approved, I just put it up for preorder and didn’t really think much of it.</p>\n\n<p>In hindsight - maybe that was super helpful for charting? I had about 80ish preorders, and while I’m not 100% this is way it works - I assume I started my launch day with those sales right off the bat. If so, that would’ve put me in a great place to start charting immediately.</p>\n\n<p>From there, the rest of the ~130 sales from launch day came and I guess that’s what gave me the push to end up at #14 under Productivity within the United States:</p>\n\n<p><img src=\"../assets/images/charting.JPG\" alt=\"Charting\" /></p>\n\n<h3 id=\"the-press\">The Press</h3>\n<p>A launch can live and die by the press. Yet, I was thankful to chart in the top 15 for Productivity for three days without hardly any of it. And, that’s not bragging - that’s regret coming through.</p>\n\n<p>Because if I <em>had</em> gotten press, surely I could’ve pumped that number up much higher. I’ve got some early data to back this up, too. On recent talks with users, I simply asked “How did you hear about Spend Stack?” And every single one, <em>every single one</em>, has said it was from a blog or website.</p>\n\n<p>The press can lift you up, plain and simple. Getting it, though - is hard. That’s another post in of itself, but the biggest mistake I made was reaching out far too late. I’ll touch on that more down below.</p>\n\n<p>In any event, the press I did get was super helpful. <a href=\"https://9to5mac.com/2019/07/18/spend-stack-list-app-budgeting-ios/\">9 to 5 Mac</a> picked it up, so did <a href=\"https://appadvice.com/post/spend-stack-helps-you-keep-an-accurate-running-total-with-smart-lists/1329068268/1114042886\">AppAdvice</a> and <a href=\"https://club.macstories.net\">Club MacStories</a> included it in their newsletter and some other publications whose primary audience is outside of the U.S. did too.</p>\n\n<p>I’ll always wonder if the press release I put out was part of that, but that’s kind of an opaque thing and hard to gauge. After all, you can’t manage what you can’t measure.</p>\n\n<p>Going forward, I’m taking the time to form friendships with the press so I can provide stories and news to them that provide value to their blogs/sites/etc. That’s the best outcome for each party involved.</p>\n\n<h3 id=\"ask-the-experts\">Ask the Experts</h3>\n<p>I’m a huge believer in asking for advice from people who are a lot smarter than you. Going by that metric for me, that’s a ton of people.</p>\n\n<p>Cold emails are hard to pull off, but they can work. But you have to know <em>why</em> they work. They work because you are genuinely reaching out to someone because you respect their domain knowledge, and you want to learn from them. They work because you are asking a pointed, specific question.</p>\n\n<p>I don’t want to toss out specific names since I didn’t ask if it was fine to include them in this post, but there were some people I really respect with a lot of influence who took the time to answer questions I had. It made a huge difference in terms of just straight up encouragement (app looks great!), to lessons learned (I wouldn’t do X or Y) to general advice (I had no luck with marketing this way, but did that way).</p>\n\n<h3 id=\"diy\">D.I.Y.</h3>\n<p>My launch was the antithesis of the lean startup methods. While there can be enourmous value in that approach, I think it’s fine as indies to go entirely the other direction. That is, if you want something done right(ish), do it yourself.</p>\n\n<p>And, I did a lot of things myself 😅:</p>\n\n<ul>\n  <li>The splash page</li>\n  <li>The promo video</li>\n  <li>The music for the promo video (I made it in GarageBand)</li>\n  <li>Design, UI/UX</li>\n  <li>Writing the press release</li>\n  <li>…basically all of it</li>\n</ul>\n\n<p>There are some services I checked into that package these things up, but each one had a trade off or got me 75% of the way there. Rolling up my sleeves and doing it on my own dime took longer, but it also saved me money and ensured I came away with something I was proud of.</p>\n\n<p>To make this shorter, the only thing I did <em>not</em> do myself was the app’s icon. It’s a know your strengths thing, and everything I was doing just wasn’t working. The icon is your poster child for an app, I really believe it’s money well spent to invest in it to make sure it’s done right.</p>\n\n<p>If I did it again, there is one other area I would outsource to someone I trust - my App Store screenshots. Right now, holistically speaking of Spend Stack, I’d wager that’s the weakest part of the package. It’s something I’m going to start improving right away.</p>\n\n<blockquote>\n  <p>For example, Spend Stack is internationalized to work with all currencies. But, you wouldn’t know it from my screenshots. Plus, there’s too much text.</p>\n</blockquote>\n\n<h3 id=\"the-mistakes\">The Mistakes</h3>\n<p>Let’s chat about where I left something on the table, so to speak. The biggest mistake? Without a doubt, it was my handling of the press.</p>\n\n<p>I reached out to them <em>entirely</em> too late in the process (about 8 days before launch). While some did pick it up (mentioned above), overall I didn’t give them enough time to dive into the app and form an opinion of it. If you’ve got a beta, let them know today.</p>\n\n<p>Take <a href=\"https://www.flightyapp.com\">Flighty</a>, which launched a day or two after I did. Some of the press that covered it mentioned that they had been using it for months. And, that’s what it takes to truly know an app.</p>\n\n<p>These writers are smart people. They need to get their hands dirty on an app to really know how they feel about it, let alone write a review of it. They are insanely busy too, with people like us all vying for their attention. It was simply  unrealistic to think anyone could’ve gone deep into Spend Stack in the timeline I provided.</p>\n\n<p>Next up, I launched too cheap. If anything - I would’ve launched at a higher price point. You get an iPad and iPhone app for $5, and as developers we all know it’s worth more than that. We’ve got to remember, though, it’s not us we have to convince and convey value to, it’s the consumer.</p>\n\n<p>The perception is already there that this should be a premium app if I’m asking you to pay me for it up front, and I don’t think developers should be afraid at all to lean into that. Especially indies. When I hit macOS, I don’t see any scenario where I would ship for less than $20.</p>\n\n<p>You see Things 3 doing this to perfection. As of today, their iPhone app sits at $10 and their iPad app is $20. They can do that because they’ve built up relationships and goodwill with their users. I can’t ship like that, this is just the beginning for Spend Stack, but again - that’s my North Star.</p>\n\n<h3 id=\"the-night-before-launch\">The Night Before Launch</h3>\n<p>One thing that was a huge mental load off, and time saver, was to get everything for launch day all prepped the day before.</p>\n\n<p>So, on Wednesday night I had my launch tweet ready, my Product Hunt post was all created, every asset was ready to share and anything else I had to tend to was good to go. I just had to wake up and hit tweet, post or whatever else the verb was.</p>\n\n<p>It made for a relatively calm morning, where I could just sit back and take it all in. My wife made a lovely card waiting for me when I woke up, and instead of running around trying to get everything out the door - I could sit back, drink my morning quad shot (YAY BUDDY! COFFFFAY 🤘) and just read it.</p>\n\n<h3 id=\"lastly-random-thoughts\">Lastly, Random Thoughts</h3>\n<p>Here are some things that were on my mind, but I didn’t know where to put them. So, herein I write a random list:</p>\n\n<ul>\n  <li><em>Be genuine.</em> Not only because it’s a better way to sell an app, but because it’s the right thing to do. Spend Stack won’t be right for everyone and I shouldn’t try to pretend that it is. If I post about Spend Stack on an online community, I don’t make it an advert for Spend Stack. I want to talk about it, and then see how I can relate my experiences to other people there to try and help them with the challenges they are facing.</li>\n  <li><em>Think about them.</em> If someone takes the time to type out a detailed bug report and it’s already on your radar, don’t just send back “Thanks, I know!” - take the time to let them know how much you appreciate it. And when it comes to the press, consider why they would even cover your app - what’s in it for them? Same for product choices, and really - anything else.</li>\n  <li><em>Make friends, not fans.</em> If you’re reading this, you’re likely an indie developer or are at least interested in iOS. I don’t ever want you to be my fan, I would much rather you be my friend. If someone bought your app and tweeted about it solely because they wanted to be nice and help, be sure to let them know you’ll do the same, and mean it. There can be a lot of ego in today’s social media driven society, but I truly believe that if you are just a nice person, people will naturally gravitate towards you, what you do and will listen to what you’re saying.</li>\n</ul>\n\n<blockquote>\n  <p>For more on that last point, I highly recommend reading the classic tome on the matter, <a href=\"https://www.amazon.com/How-Win-Friends-Influence-People/dp/0671027034\">How to Win Friends and Influence People</a> by Dale Carnegie.</p>\n</blockquote>\n\n<p>To close things out, if I had to write a one sentence thesis on launching specifically for indies, it would go something like this:</p>\n\n<p>Make a fantastic, best in class app and tell its story.</p>\n\n<h3 id=\"final-thoughts\">Final Thoughts</h3>\n<p>Launching an app is a crazy, unnerving experience. You just really don’t know what’s going to happen. Especially if you are a solo indie, your time, resources and mental capacity are stretched thin. You’ve got to be persistent, insistent and consistent about your app’s success.</p>\n\n<p>Though there’s certainly an art to launching, I’ve yet to crack its code. Glean what you can from what worked for me, but more importantly - take note of what <em>didn’t</em> work. Avoid those. Most importantly, if you’re launching soon, best of luck!</p>\n\n<p>Until next time ✌️</p>",
            "summary": "Y.O.L.O.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2019-07-27T00:00:00-05:00",
            "date_modified": "2019-07-27T00:00:00-05:00",
            "author": {
              "name": {"twitter":"jordanmorgan10","picture":"/assets/images/about/headshot.jpeg"}},
            "tags": ["The Indie Dev Diaries"]},{
            "id": "http://localhost:4000/Introducing-Spend-Stack",
            "url": "http://localhost:4000/Introducing-Spend-Stack/",
            "title": "Introducing Spend Stack",
            "content_html": "<p>Every app has a story.</p>\n\n<p>You’ve heard this before, right? Apple pushes it in their messaging, the press lets you know you should tell yours and general marketing revolves around it.</p>\n\n<p>But, each app also needs to solve a problem that’s a legitimate pain point for someone.  After several years - I’d love to tell you my app’s story and the problem it solved for me.</p>\n\n<p>Today, I’m pleased to <em>finally</em> introduce the world to <a href=\"https://apps.apple.com/app/spend-stack-smarter-lists/id1329068268\">Spend Stack</a>. It’s a list app that can keep an accurate total cost of its items that syncs to your devices, plus you can share and collaborate with others on any list you make. Live edits and all.</p>\n\n<p><img src=\"../assets/images/hero.png\" alt=\"Spend Stack\" /></p>\n\n<h3 id=\"the-elevator-pitch\">The Elevator Pitch</h3>\n<p>About five years ago, my wife and I started to budget in all cash. We meticulously split up our money into separate categories each pay period and we still do to this day.</p>\n\n<p>Spend Stack was born when we visited the grocery store during our first crack at this, and we found that it was mostly guesswork, difficult or not possible to keep a running total of our stuff. It’s a little aggravating if you walked into the store with $200 but your bill tallied about $250. If you live in the states, this is even more difficult because tax isn’t applied to the prices you see on the shelf.</p>\n\n<p>So, I wanted to keep a to-the-penny running total. That meant local sales tax included, pricing by weight, applying discounts via a percentage or fixed amount, etc.</p>\n\n<p>You can see where this is going - and this was the first reason I built Spend Stack. This is what our grocery list looks like today, and I have no problem keeping track of what something costs with tax, priced by weight and with a discount (as seen here):</p>\n\n<p><img src=\"/assets/images/groceries.png\" alt=\"Grocery List\" /></p>\n\n<p>At first, I found the problem very concrete, yet each solution I mocked up was entirely too abstract. Over time, even as an autodidact designer, I was able to hone it in to focus on the problem over anything else (another blog post in of itself). With each early, hacked together version we’d discover a different need or obstacle.</p>\n\n<p>My wife wanted to add pictures to items so I would finally stop buying the wrong Chobani (sorry, Jansyn!), so I’d add it in. Tech like CloudKit was naturally included by other factors - such as me not wanting account creation, but also needing lists synced across devices along with the ability to share and collaborate on them with others. Each validated need led to me cracking open Xcode and slotting it in:</p>\n\n<p><img src=\"/assets/images/ipadShare.png\" alt=\"iCloud Share\" /></p>\n\n<p>The list (no pun intended) goes on.</p>\n\n<h3 id=\"the-beta-days\">The Beta Days</h3>\n<p>As time went on and I showed it to friends, and those friends tested it out - one thing became clear. A lot of people had a use for a running total list app, but they all used it a bit differently. Some really leaned into the accurate running total, some just wanted to keep a simple one without taxes, discounts, or anything else. What I ended up building was something that could not only adapt to those needs, but try to excel at them.</p>\n\n<p>Today, using the tags system, optional checkbox support and more people make far more than the obvious grocery list. It’s been used for birthday lists, Christmas lists, vacation budget planning and more. A family friend even had her daughter track all the money she made doing chores to save up for a pet hamster, checking off tasks as she did them ❤.</p>\n\n<p>It’s changed a lot over the years, and at times I’ve just been stuck analyzing it inside and out. Paralysis by analysis. But I’ve always believed that high achievement takes place within the framework of high expectations. And my own were high.</p>\n\n<p>Recently, I looked at it, and I thought, “Hmmm, I think this is <em>kinda</em> good now”. So, I just hit the submit button. I arrived at a spot where I was actually “proud” of it. For the developer minded reader, here are some things I am personally happy about:</p>\n\n<ul>\n  <li>Full dynamic type support (before it was free with SwiftUI!)</li>\n  <li>Every size class and orientation is supported</li>\n  <li>Smaller things, like including glyphs for large content size items, à la tapping and holding on a tool bar item when large content sizes are active</li>\n  <li>Seamless (I realize that’s overused, but it’s earned here) syncing between devices</li>\n  <li>Full CloudKit sharing, this was not trivial to do</li>\n  <li>No use of <code class=\"highlighter-rouge\">reloadData</code>, everything is diffed and batch reloaded (<em>also</em> before it was free with SwiftUI)</li>\n  <li>Undo and redo support for <em>nearly</em> for every single CRUD action</li>\n  <li>And I think it looks okay</li>\n</ul>\n\n<p>As an aside, you can see that SwiftUI could be a time saver for me in the future. Hair Force One himself said as much when I cold emailed him about Spend Stack, and that was a fun moment for me:</p>\n\n<p><img src=\"/assets/images/hfo.jpg\" alt=\"Hair Force One\" /></p>\n\n<p>I basically did the things that draw me to apps I pay for. It’s a one time purchase, you can tell the developer cares and is unlikely to abandon it, it works on iPhone and iPad, etc.</p>\n\n<h3 id=\"the-human-connection\">The Human Connection</h3>\n<p>To close out the story aspect, I think it’s fun to show how, that to my wife and I, Spend Stack <em>truly</em> feels like part of the family. Let me explain.</p>\n\n<p>Back in 2013, I was a ball of anxiety when my wife was at the hospital about to deliver our oldest, Bennett. As I paced back and forth, she surprised me with what she said next:</p>\n\n<p>“Try getting out your laptop, work on Spend Stack and relax until my contractions kick in.”</p>\n\n<p>So, I did (and it did chill me out….a <em>little</em>. Here’s my genuine “this is fine” face):</p>\n\n<p><img src=\"/assets/images/bennyDev.jpg\" alt=\"Developing at the hospital 2013\" /></p>\n\n<p>Fast forward to 2016, and I was no more brave at the prospect of my wife delivering a human being that was currently nestled inside of her abdomen. But, until my middle child Remy was ready to arrive, it was the same story. We didn’t snap a picture of it that year, but looking back I found this one of Jansyn checking out the latest build in between naps at the hospital a few days postpartum:</p>\n\n<p><img src=\"/assets/images/remyDev.jpeg\" alt=\"Developing at the hospital 2016\" /></p>\n\n<p>…and in 2018 with my daughter Baylor:</p>\n\n<p><img src=\"/assets/images/baylorDev.jpg\" alt=\"Developing at the hospital 2018\" /></p>\n\n<p>It actually became a funny tradition between my wife and I. Of course, there were much bigger things to worry about once the contractions started. But until then, instead of watching me slowly devolve into a crazy, amped up and entirely too anxious husband, she gently suggested to code until our little ones decided to start the action. She’s a good one ❤.</p>\n\n<p>So it’s funny, this post is an end cap of sorts. We don’t plan on having more children, so the days of coding Spend Stack until my wife starts having contractions are behind me. At the same time, it’s finally releasing! Life is funny like that, with one chapter ending and another beginning.</p>\n\n<h3 id=\"final-thoughts\">Final Thoughts</h3>\n<p>So that’s my app’s story.</p>\n\n<p>It feels so good to launch. I can’t emphasis that enough. After years of hard work, it all culminates into this. I’m proud of it, and that was one of the biggest things I wanted out of the project. Something to put my name on and <em>really</em> own it.</p>\n\n<p>Your own app has a story too. And, if you’re not telling it, I think you’re missing out. I’d love to hear it, at the very least. There is always a human connection behind the pixels on your screen that gets lost in translation from idea to App Store - and for me it’s refreshing to discover them.</p>\n\n<p>Thanks for hearing about my own connection behind Spend Stack, and it’s live <a href=\"https://www.spendstack.com\" target=\"_blank\">here if you’d like to try it out yourself.</a></p>\n\n<p>Until next time ✌️.</p>",
            "summary": "Every app has a story.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2019-07-15T00:00:00-05:00",
            "date_modified": "2019-07-15T00:00:00-05:00",
            "author": {
              "name": {"twitter":"jordanmorgan10","picture":"/assets/images/about/headshot.jpeg"}},
            "tags": ["The Indie Dev Diaries"]},{
            "id": "http://localhost:4000/LinkPresentation-Introduction",
            "url": "http://localhost:4000/LinkPresentation-Introduction/",
            "title": "A LinkPresentation Introduction",
            "content_html": "<p>It wasn’t but <a href=\"http://localhost:4000/NSSecureCoding\">three posts ago</a> that I began my piece by opining about the forgotten heroes of WWDC.</p>\n\n<p>Bring me your nascent frameworks, subtle API changes or things that were not graced with any keynote or State of the Union time. Those are the unknown territories I enjoy roaming, and the excitement of browsing them is amplified even more so by the fact that the documentation for them hasn’t even landed yet during the beta period.</p>\n\n<p>Today, we arrive at such a destination for showing links starting with iOS 13: the new LinkPresentation framework.</p>\n\n<h3 id=\"overviewframework-linkpresentation\">Overview(framework: .linkPresentation)</h3>\n<p>The LinkPresentation framework has all the tools one might need to show rich, thumbnail previews of a URL. Though presentation is in its name, the brunt of its utility lies within its ability to retrieve meta data about URLs in a rather trivial fashion.</p>\n\n<p>The framework has actually been around for sometime now, as it appears in the runtime headers in the previous couple of iOS releases  - but now it’s been handed over to us mere commoners as well.</p>\n\n<p>Regardless, you’re likely familiar with it as an end user of iOS already:\n<img src=\"../assets/images/lpMessages.jpeg\" alt=\"Link Preview in Messages\" /></p>\n\n<p>Firing over a link, or really any URL, within Messages shows it in action.</p>\n\n<h3 id=\"retrieving-metadata\">Retrieving Metadata</h3>\n<p>One begins utilizing the framework by way of its <a href=\"https://developer.apple.com/documentation/linkpresentation/lpmetadataprovider\" target=\"_blank\"><code class=\"highlighter-rouge\">LPLinkMetadataProvider</code></a>. At first glance, its ease of use is apparent by the lack of any sort of <code class=\"highlighter-rouge\">LPMetadataProviderDelegate</code>, notification posting or similar feedback patterns.</p>\n\n<p>Instead, all you really need is one function:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">provider</span> <span class=\"o\">=</span> <span class=\"kt\">LPMetadataProvider</span><span class=\"p\">()</span>\n<span class=\"n\">provider</span><span class=\"o\">.</span><span class=\"nf\">startFetchingMetadata</span><span class=\"p\">(</span><span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"n\">theURL</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">metadata</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">md</span> <span class=\"o\">=</span> <span class=\"n\">metadata</span> <span class=\"p\">{</span>\n        <span class=\"kt\">DispatchQueue</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">async</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// Work with the metadata:</span>\n            <span class=\"c1\">// URL, title, icon, images, video and remote video URL data.</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>As with most closure based APIs found within the Apple ecosystem, one must take care to dispatch back to the main queue if you plan to do any user interface processing.</p>\n</blockquote>\n\n<p>The few lines of code above should suffice for most use cases, but there are some things to be aware of. The most important, however, is how the life cycle of these providers work, namely - they are one shot objects.</p>\n\n<p>Once they’ve kicked off their request, they are done. If you attempt to use it again, an exception is tossed immediately your way. Imagine if you were creating a <code class=\"highlighter-rouge\">List</code>, or a <code class=\"highlighter-rouge\">For Each</code>, of URL meta data in SwiftUI:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">PostRow</span> <span class=\"p\">:</span> <span class=\"kt\">UIViewRepresentable</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">post</span><span class=\"p\">:</span><span class=\"kt\">BlogPost</span>\n    <span class=\"k\">let</span> <span class=\"nv\">provider</span> <span class=\"o\">=</span> <span class=\"kt\">LPMetadataProvider</span><span class=\"p\">()</span>\n    \n    <span class=\"kd\">func</span> <span class=\"nf\">makeUIView</span><span class=\"p\">(</span><span class=\"nv\">context</span><span class=\"p\">:</span> <span class=\"kt\">Context</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">LPLinkView</span> <span class=\"p\">{</span>\n        <span class=\"kt\">LPLinkView</span><span class=\"p\">(</span><span class=\"nv\">url</span><span class=\"p\">:</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">postSlug</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"kd\">func</span> <span class=\"nf\">updateUIView</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">view</span><span class=\"p\">:</span> <span class=\"kt\">LPLinkView</span><span class=\"p\">,</span> <span class=\"nv\">context</span><span class=\"p\">:</span> <span class=\"kt\">Context</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">provider</span><span class=\"o\">.</span><span class=\"nf\">startFetchingMetadata</span><span class=\"p\">(</span><span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">postSlug</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">metadata</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n            <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">md</span> <span class=\"o\">=</span> <span class=\"n\">metadata</span> <span class=\"p\">{</span>\n                <span class=\"kt\">DispatchQueue</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">async</span> <span class=\"p\">{</span>\n                    <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">md</span>\n                    <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"nf\">sizeToFit</span><span class=\"p\">()</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>That would crash as soon as scrolling and view recycling kicks in. Instead, get a new instance for each request. Mind the movement of the <code class=\"highlighter-rouge\">provider</code> property into <code class=\"highlighter-rouge\">updateUIView</code>:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">PostRow</span> <span class=\"p\">:</span> <span class=\"kt\">UIViewRepresentable</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">post</span><span class=\"p\">:</span><span class=\"kt\">BlogPost</span>\n    \n    <span class=\"kd\">func</span> <span class=\"nf\">makeUIView</span><span class=\"p\">(</span><span class=\"nv\">context</span><span class=\"p\">:</span> <span class=\"kt\">Context</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">LPLinkView</span> <span class=\"p\">{</span>\n        <span class=\"kt\">LPLinkView</span><span class=\"p\">(</span><span class=\"nv\">url</span><span class=\"p\">:</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">postSlug</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"kd\">func</span> <span class=\"nf\">updateUIView</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">view</span><span class=\"p\">:</span> <span class=\"kt\">LPLinkView</span><span class=\"p\">,</span> <span class=\"nv\">context</span><span class=\"p\">:</span> <span class=\"kt\">Context</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// New instance for each update</span>\n        <span class=\"k\">let</span> <span class=\"nv\">provider</span> <span class=\"o\">=</span> <span class=\"kt\">LPMetadataProvider</span><span class=\"p\">()</span>\n        <span class=\"n\">provider</span><span class=\"o\">.</span><span class=\"nf\">startFetchingMetadata</span><span class=\"p\">(</span><span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">postSlug</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">metadata</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n            <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">md</span> <span class=\"o\">=</span> <span class=\"n\">metadata</span> <span class=\"p\">{</span>\n                <span class=\"kt\">DispatchQueue</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">async</span> <span class=\"p\">{</span>\n                    <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">md</span>\n                    <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"nf\">sizeToFit</span><span class=\"p\">()</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>The same idea applies to collection or table views. Beyond that primary consideration, providers can also set a timeout (which defaults to a reasonable 30 seconds) or cancel the request outright. The error value, if present, is also derived from <code class=\"highlighter-rouge\">LPError</code>:</p>\n\n<ul>\n  <li>.unknown</li>\n  <li>.metadataFetchFailed</li>\n  <li>.metadataFetchCancelled</li>\n  <li>.metadataFetchTimedOut</li>\n</ul>\n\n<p>Assuming the <code class=\"highlighter-rouge\">com.apple.security.network.client</code> entitlement is setup, the provider object is ready to work and it’ll fetch details on remote URLs without much to think about implementation wise. Though, you can stay local just the same. <code class=\"highlighter-rouge\">LPMetadataProvider</code> can operate on your own app’s URLs, in which case the (also new) <a href=\"https://developer.apple.com/documentation/quicklookthumbnailing\" target=\"_blank\">quicklook thumbnailing API</a> will be used to present it.</p>\n\n<h3 id=\"presenting-link-previews\">Presenting Link Previews</h3>\n<p>Of course, data is often only as useful to users as the views they are presented within. To that end, LinkPresentation offers a pre-baked solution which you may have noticed in the code above; <code class=\"highlighter-rouge\">LPLinkView</code>.</p>\n\n<p>A link view will base its visual representation of the link off of the information that was acquired by its meta data. A simple assignment within a meta data provider’s closure in <code class=\"highlighter-rouge\">startFetchingMetadata(for:)</code> will be a common pattern:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">linkView</span> <span class=\"o\">=</span> <span class=\"kt\">LPLinkView</span><span class=\"p\">(</span><span class=\"nv\">url</span><span class=\"p\">:</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">postSlug</span><span class=\"p\">)</span>\n<span class=\"k\">let</span> <span class=\"nv\">provider</span> <span class=\"o\">=</span> <span class=\"kt\">LPMetadataProvider</span><span class=\"p\">()</span>\n<span class=\"n\">provider</span><span class=\"o\">.</span><span class=\"nf\">startFetchingMetadata</span><span class=\"p\">(</span><span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">postSlug</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">metadata</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">md</span> <span class=\"o\">=</span> <span class=\"n\">metadata</span> <span class=\"p\">{</span>\n        <span class=\"kt\">DispatchQueue</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">async</span> <span class=\"p\">{</span>\n            <span class=\"n\">linkView</span><span class=\"o\">.</span><span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">md</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Results would look something along these lines:\n<img src=\"../assets/images/links.png\" alt=\"Link Preview in Messages\" /></p>\n\n<p>Since link views can be sorted any which way in an interface, it has some smarts to size itself accordingly. It has its own intrinsic size set - but as we’ve done in the code samples, invoking <code class=\"highlighter-rouge\">sizeToFit()</code> can aid in getting its constraints in a sensible state for automatic cell sizing scenarios.</p>\n\n<p>Fortunately, this class is much more than static view. Depending on the meta data associated with it, you can expect inline video playback for Youtube content, maps for Apple Maps and all the images included in a Tweet as you see above.</p>\n\n<h3 id=\"efficiency-considerations\">Efficiency Considerations</h3>\n<p>If you anticipate hitting the same URL again, you’ll be happy to see that <code class=\"highlighter-rouge\">LPMetaData</code> conforms to <a href=\"http://localhost:4000/NSSecureCoding\"><code class=\"highlighter-rouge\">NSSecureCoding</code></a> right out of the box. Since meta data providers have a limited lifespan by design, caching makes a lot of sense here from both an API design and user experience perspective. Skipping network calls for the same URL within a close time period is always a good idea.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">data</span> <span class=\"o\">=</span> <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"kt\">NSKeyedArchiver</span><span class=\"o\">.</span><span class=\"nf\">archivedData</span><span class=\"p\">(</span><span class=\"nv\">withRootObject</span><span class=\"p\">:</span> <span class=\"n\">retrievedMetadata</span><span class=\"p\">,</span> <span class=\"nv\">requiringSecureCoding</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">do</span> <span class=\"p\">{</span>\n        <span class=\"k\">try</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"nv\">to</span><span class=\"p\">:</span> <span class=\"n\">fileURL</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// Dragons</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Then later pull it back out if the request is for a cached URL</span>\n</code></pre></div></div>\n\n<p>Further, a common flow for URLs is to pop them over to the share sheet via <code class=\"highlighter-rouge\">UIActivityViewController</code>. Passing only the URL still works - just not as well. Now, if you’re already conforming to <code class=\"highlighter-rouge\">UIActivityItemSource</code> to pass off data, just implement the new <code class=\"highlighter-rouge\">activityViewControllerLinkMetadata(_) -&gt; LPLinkMetaData</code> function to return the link’s content that you’ve already retrieved:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">activityViewControllerLinkMetadata</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">activityViewController</span><span class=\"p\">:</span> <span class=\"kt\">UIActivityViewController</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">LPLinkMetadata</span><span class=\"p\">?</span> <span class=\"p\">{</span>\n    <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">metadata</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>This route ensures the share sheet will show the link’s data instantly, instead of asynchronously pulling it in via another meta data request. Plus, it’s a gift that keeps on giving. If the users goes straight to Messages for the share request, the data is handed right off once more.</p>\n\n<blockquote>\n  <p>Also, if you’ve got local data already, it’s completely fine to create your own meta data object and fill in its contents yourself. There’s nothing that says this meta data has to come from the network.</p>\n</blockquote>\n\n<h3 id=\"final-thoughts\">Final Thoughts</h3>\n<p>Sometimes you need to roll your own solution to get a job done in software engineering. UIKit, or whatever the framework is, could have the pieces you need but might lack the holistic vision of what you’re after. This was the case with link previews. If you’ve rolled your own, well - today’s innovation is now tomorrow’s deprecation. But this time, it’s for all of the right reasons.</p>\n\n<p>Let Apple take another menial task off of your plate. In the same spirit of SwiftUI’s announcement, the more we can afford to Cupertino and Friends©, then the more we can spend time on making our own app’s shine. Now, we check making link previews off of our own list.</p>\n\n<p>Until next time ✌️.</p>",
            "summary": "It wasn’t but three posts ago that I began my piece by opining about the forgotten heroes of WWDC.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2019-06-21T00:00:00-05:00",
            "date_modified": "2019-06-21T00:00:00-05:00",
            "author": {
              "name": {"twitter":"jordanmorgan10","picture":"/assets/images/about/headshot.jpeg"}},
            "tags": ["LinkPresentation"]},{
            "id": "http://localhost:4000/iOS-13-Notable-UIKit-Additions",
            "url": "http://localhost:4000/iOS-13-Notable-UIKit-Additions/",
            "title": "iOS 13: Notable UIKit Additions",
            "content_html": "<p>Phew.</p>\n\n<p>This year’s WWDC has simply been a monster of the best kind. SwiftUI is a seismic shift, yet it’s <em>far</em> from the only relevant news. Now that we’ve finally got a good look at iOS 13 (and, for the pedantic, iPadOS) and all it has on offer - the problem now becomes knowing where to start and how to focus your attention.</p>\n\n<p>Each year, I dive in on the latest version of iOS and try to surface some of the new APIs that our favorite framework, UIKit, has brought to the table. There is plenty to look at this year, so let’s dive right in on some of my favorite additions.</p>\n\n<p>If you want to catch up on this series first, view the <a href=\"http://localhost:4000/iOS-11-notable-uikit-additions\">iOS 11</a> and <a href=\"http://localhost:4000/iOS-12-notable-uikit-additions\">iOS 12</a> versions of this article.</p>\n\n<p>For now, let’s chat UIKit and iOS 13 centerpieces!</p>\n\n<h3 id=\"diffing\">Diffing</h3>\n<p>Last year, Apple and friends dove in on how to do batch updates the right way. It was a needed session, but the sentiment afterwards was still the same as it ever has been, <em>it’s still hard to get right</em>.</p>\n\n<p>Well, at least it was.</p>\n\n<p>Now, UIKit offers powerful diffing which pipes right on down to your collection and table views to perform batch updates on your behalf. This is accomplished via a dedicated data source object which works in tandem with snapshots of your ever mutating data.</p>\n\n<p>Take this sample data model:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ExampleRow</span><span class=\"p\">:</span> <span class=\"kt\">Hashable</span> <span class=\"p\">{</span>\n    <span class=\"kd\">static</span> <span class=\"k\">let</span> <span class=\"nv\">cellID</span> <span class=\"o\">=</span> <span class=\"s\">\"testID\"</span>\n    <span class=\"k\">let</span> <span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"kt\">String</span>\n    <span class=\"k\">let</span> <span class=\"nv\">identifier</span> <span class=\"o\">=</span> <span class=\"kt\">UUID</span><span class=\"p\">()</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">hash</span><span class=\"p\">(</span><span class=\"n\">into</span> <span class=\"nv\">hasher</span><span class=\"p\">:</span> <span class=\"k\">inout</span> <span class=\"kt\">Hasher</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">hasher</span><span class=\"o\">.</span><span class=\"nf\">combine</span><span class=\"p\">(</span><span class=\"n\">identifier</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    <span class=\"kd\">static</span> <span class=\"kd\">func</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"nv\">lhs</span><span class=\"p\">:</span> <span class=\"kt\">ExampleRow</span><span class=\"p\">,</span> <span class=\"nv\">rhs</span><span class=\"p\">:</span> <span class=\"kt\">ExampleRow</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Bool</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">lhs</span><span class=\"o\">.</span><span class=\"n\">identifier</span> <span class=\"o\">==</span> <span class=\"n\">rhs</span><span class=\"o\">.</span><span class=\"n\">identifier</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// And this at the controller level for brevity</span>\n<span class=\"kd\">enum</span> <span class=\"kt\">Section</span><span class=\"p\">:</span> <span class=\"kt\">CaseIterable</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"n\">firstSection</span>\n    <span class=\"k\">case</span> <span class=\"n\">secondSection</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">exampleData</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">ExampleRow</span><span class=\"p\">(</span><span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"s\">\"One\"</span><span class=\"p\">),</span> <span class=\"kt\">ExampleRow</span><span class=\"p\">(</span><span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"s\">\"Two\"</span><span class=\"p\">),</span> <span class=\"kt\">ExampleRow</span><span class=\"p\">(</span><span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"s\">\"Three\"</span><span class=\"p\">)]</span>\n</code></pre></div></div>\n\n<p>One can apply such a data model to populate either a table or collection view. In our case, a table view - wherein its data source is typed as such:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">var</span> <span class=\"nv\">dataSource</span><span class=\"p\">:</span> <span class=\"kt\">UITableViewDiffableDataSource</span><span class=\"o\">&lt;</span><span class=\"kt\">SectionIdentifierType</span><span class=\"p\">,</span> <span class=\"kt\">ItemIdentifierType</span><span class=\"o\">&gt;!</span>\n<span class=\"c1\">// Or a UICollectionViewDiffableDataSource</span>\n</code></pre></div></div>\n\n<p>Both the section and item identifier must be <code class=\"highlighter-rouge\">hashable</code> - and they’ll correspond to your sections and their contents when initialized. So, for a single section table view with our data model, it could look like this:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">dataSource</span> <span class=\"o\">=</span> <span class=\"kt\">UITableViewDiffableDataSource</span><span class=\"o\">&lt;</span><span class=\"kt\">Section</span><span class=\"p\">,</span> <span class=\"kt\">ExampleRow</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"nv\">tableView</span><span class=\"p\">:</span> <span class=\"n\">tv</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">tableview</span><span class=\"p\">,</span> <span class=\"n\">indexPath</span><span class=\"p\">,</span> <span class=\"n\">exampleRow</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">UITableViewCell</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"nv\">demoCell</span> <span class=\"o\">=</span> <span class=\"n\">tableview</span><span class=\"o\">.</span><span class=\"nf\">dequeueReusableCell</span><span class=\"p\">(</span><span class=\"nv\">withIdentifier</span><span class=\"p\">:</span> <span class=\"n\">cellIdentifier</span><span class=\"p\">,</span> <span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"n\">indexPath</span><span class=\"p\">)</span>\n    <span class=\"n\">demoCell</span><span class=\"o\">.</span><span class=\"n\">textLabel</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">exampleRow</span><span class=\"o\">.</span><span class=\"n\">title</span>\n    <span class=\"k\">return</span> <span class=\"n\">demoCell</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This describes to the table view what the data model will look like and how it should be handled, but initially populating it something works much the same way with a concrete <code class=\"highlighter-rouge\">NSDiffableDataSourceSnapshot&lt;SectionIdentifierType, ItemIdentifierType&gt;</code>:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">snapshot</span> <span class=\"o\">=</span> <span class=\"kt\">NSDiffableDataSourceSnapshot</span><span class=\"o\">&lt;</span><span class=\"kt\">Section</span><span class=\"p\">,</span> <span class=\"kt\">ExampleRow</span><span class=\"o\">&gt;</span><span class=\"p\">()</span>\n<span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"nf\">appendSections</span><span class=\"p\">([</span><span class=\"o\">.</span><span class=\"n\">firstSection</span><span class=\"p\">])</span>\n<span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"nf\">appendItems</span><span class=\"p\">(</span><span class=\"n\">exampleData</span><span class=\"p\">)</span>\n<span class=\"n\">dataSource</span><span class=\"o\">.</span><span class=\"nf\">apply</span><span class=\"p\">(</span><span class=\"n\">snapshot</span><span class=\"p\">,</span> <span class=\"nv\">animatingDifferences</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Doing so would give us this:\n<img src=\"../assets/images/firstSnapshot.png\" alt=\"Data Snapshot\" /></p>\n\n<p>By applying the diff to the existing data source handler for the table view, the C.R.U.D. operations are applied. This is essentially the flow each time.</p>\n\n<p>The existing data source handler has a reference to the current diff, so if you simply wanted to add three items to our table view, it might go something like this:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">snapshot</span> <span class=\"o\">=</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">dataSource</span><span class=\"o\">.</span><span class=\"nf\">snapshot</span><span class=\"p\">()</span>\n<span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"nf\">appendItems</span><span class=\"p\">([</span><span class=\"kt\">ExampleRow</span><span class=\"p\">(</span><span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"s\">\"Six\"</span><span class=\"p\">),</span> <span class=\"kt\">ExampleRow</span><span class=\"p\">(</span><span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"s\">\"Eigth\"</span><span class=\"p\">),</span> <span class=\"kt\">ExampleRow</span><span class=\"p\">(</span><span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"s\">\"Nine\"</span><span class=\"p\">)],</span> <span class=\"nv\">toSection</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">firstSection</span><span class=\"p\">)</span>\n<span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">dataSource</span><span class=\"o\">.</span><span class=\"nf\">apply</span><span class=\"p\">(</span><span class=\"n\">snapshot</span><span class=\"p\">,</span> <span class=\"nv\">animatingDifferences</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>The result:\n<img src=\"../assets/images/secondSnapshot.png\" alt=\"Second Data Snapshot\" /></p>\n\n<p>Peering into the header for diffable snapshot reveals all sorts of things you’d want it do, such as updates, moves, etc.</p>\n\n<blockquote>\n  <p>One can apply snaphots from any queue, as well. The only requirement is consistency. So, if you update off of main, then one should <em>always</em> apply snapshots off of main.</p>\n</blockquote>\n\n<p>The flow is much different than what you were used to (a common theme for just about everything announced this year at dub dub), as reliance on a data source conformer along with index paths have less of an emphasis. But the changes are welcome, and they both eliminate a common source of friction for developers and provide a more fluid user experience to consumers.</p>\n\n<h3 id=\"compositional-layouts\">Compositional Layouts</h3>\n<p>Ever wonder how one might go about making the layout in the Apps or Games tab within the App Store on iOS? You’ve got a central vertically scrolling layout, interspersed with horizontally scrolling layouts. While composing collection or table views within one another works (and is widely used), with iOS 13 - there’s a better way.</p>\n\n<p>Enter collection view’s new compositional layout:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">itemSize</span> <span class=\"o\">=</span> <span class=\"kt\">NSCollectionLayoutSize</span><span class=\"p\">(</span><span class=\"nv\">widthDimension</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"nf\">fractionalWidth</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">),</span>\n                                             <span class=\"nv\">heightDimension</span><span class=\"p\">:</span><span class=\"o\">.</span><span class=\"nf\">fractionalHeight</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">))</span>\n<span class=\"k\">let</span> <span class=\"nv\">item</span> <span class=\"o\">=</span> <span class=\"kt\">NSCollectionLayoutItem</span><span class=\"p\">(</span><span class=\"nv\">layoutSize</span><span class=\"p\">:</span> <span class=\"n\">itemSize</span><span class=\"p\">)</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">groupSize</span> <span class=\"o\">=</span> <span class=\"kt\">NSCollectionLayoutSize</span><span class=\"p\">(</span><span class=\"nv\">widthDimension</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"nf\">fractionalWidth</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">),</span>\n                                      <span class=\"nv\">heightDimension</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"nf\">fractionalHeight</span><span class=\"p\">(</span><span class=\"mf\">0.25</span><span class=\"p\">))</span>\n<span class=\"k\">let</span> <span class=\"nv\">group</span> <span class=\"o\">=</span> <span class=\"kt\">NSCollectionLayoutGroup</span><span class=\"o\">.</span><span class=\"nf\">horizontal</span><span class=\"p\">(</span><span class=\"nv\">layoutSize</span><span class=\"p\">:</span> <span class=\"n\">groupSize</span><span class=\"p\">,</span>\n                                                 <span class=\"nv\">subitems</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">item</span><span class=\"p\">])</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">section</span> <span class=\"o\">=</span> <span class=\"kt\">NSCollectionLayoutSection</span><span class=\"p\">(</span><span class=\"nv\">group</span><span class=\"p\">:</span> <span class=\"n\">group</span><span class=\"p\">)</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">layout</span> <span class=\"o\">=</span> <span class=\"kt\">UICollectionViewCompositionalLayout</span><span class=\"p\">(</span><span class=\"nv\">section</span><span class=\"p\">:</span> <span class=\"n\">section</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// Now assign it as the layout</span>\n<span class=\"n\">collectionView</span> <span class=\"o\">=</span> <span class=\"kt\">UICollectionView</span><span class=\"p\">(</span><span class=\"nv\">frame</span><span class=\"p\">:</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">bounds</span><span class=\"p\">,</span> <span class=\"nv\">collectionViewLayout</span><span class=\"p\">:</span> <span class=\"n\">layout</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>The above code produces a table view like experience, where each row spans the full width of the view and each row is about one quarter of its height. At first glance, one might assume our old line breaking layout of yore, <code class=\"highlighter-rouge\">UICollectionViewFlowLayout</code>, would yield the same results with less code.</p>\n\n<p>And you’re right. But looking at it purely with those optics is also missing the point. As the name suggests, composability comes naturally with this new layout. Looking closer we can see by reading from bottom to top that:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// An item's size</span>\n<span class=\"k\">let</span> <span class=\"nv\">itemSize</span> <span class=\"o\">=</span> <span class=\"kt\">NSCollectionLayoutSize</span><span class=\"p\">(</span><span class=\"nv\">widthDimension</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"nf\">fractionalWidth</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">),</span>\n                                             <span class=\"nv\">heightDimension</span><span class=\"p\">:</span><span class=\"o\">.</span><span class=\"nf\">fractionalHeight</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">))</span>\n\n<span class=\"c1\">// An item in a group</span>\n<span class=\"k\">let</span> <span class=\"nv\">item</span> <span class=\"o\">=</span> <span class=\"kt\">NSCollectionLayoutItem</span><span class=\"p\">(</span><span class=\"nv\">layoutSize</span><span class=\"p\">:</span> <span class=\"n\">itemSize</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// A group size</span>\n<span class=\"k\">let</span> <span class=\"nv\">groupSize</span> <span class=\"o\">=</span> <span class=\"kt\">NSCollectionLayoutSize</span><span class=\"p\">(</span><span class=\"nv\">widthDimension</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"nf\">fractionalWidth</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">),</span>\n                                      <span class=\"nv\">heightDimension</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"nf\">fractionalHeight</span><span class=\"p\">(</span><span class=\"mf\">0.25</span><span class=\"p\">))</span>\n\n<span class=\"c1\">// A group has a group size with items</span>\n<span class=\"k\">let</span> <span class=\"nv\">group</span> <span class=\"o\">=</span> <span class=\"kt\">NSCollectionLayoutGroup</span><span class=\"o\">.</span><span class=\"nf\">horizontal</span><span class=\"p\">(</span><span class=\"nv\">layoutSize</span><span class=\"p\">:</span> <span class=\"n\">groupSize</span><span class=\"p\">,</span>\n                                                 <span class=\"nv\">subitems</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">item</span><span class=\"p\">])</span>\n\n<span class=\"c1\">// A section has groups</span>\n<span class=\"k\">let</span> <span class=\"nv\">section</span> <span class=\"o\">=</span> <span class=\"kt\">NSCollectionLayoutSection</span><span class=\"p\">(</span><span class=\"nv\">group</span><span class=\"p\">:</span> <span class=\"n\">group</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// A layout has sections</span>\n<span class=\"k\">let</span> <span class=\"nv\">layout</span> <span class=\"o\">=</span> <span class=\"kt\">UICollectionViewCompositionalLayout</span><span class=\"p\">(</span><span class=\"nv\">section</span><span class=\"p\">:</span> <span class=\"n\">section</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>…it builds on top of itself with a (mostly) <em>has a</em> relationship. This means more complex layouts can be achieved with far less cognitive load than it used to require. Code is read much more than it’s written, and this setup makes layouts easier to reason about.</p>\n\n<p>I think Apple saw this, too. Collection view has been around since iOS 6, and in 2018 they gave us the aforementioned session on how to do custom layouts sprinkled with a “We know you find this a bit difficult” kind of sentiment.</p>\n\n<p>Going further, compositional layout gives us this notion of a <code class=\"highlighter-rouge\">NSCollectionLayoutDimension</code>. Using it, one could size things many different ways:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">fractionalHeight</span> <span class=\"o\">=</span> <span class=\"kt\">NSCollectionLayoutDimension</span><span class=\"o\">.</span><span class=\"nf\">fractionalHeight</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"k\">let</span> <span class=\"nv\">absoluteHeight</span> <span class=\"o\">=</span> <span class=\"kt\">NSCollectionLayoutDimension</span><span class=\"o\">.</span><span class=\"nf\">absolute</span><span class=\"p\">(</span><span class=\"mf\">44.0</span><span class=\"p\">)</span>\n<span class=\"k\">let</span> <span class=\"nv\">estimatedHeight</span> <span class=\"o\">=</span> <span class=\"kt\">NSCollectionLayoutDimension</span><span class=\"o\">.</span><span class=\"nf\">estimated</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Even better, one can easily mix and match an axis to scroll on, a lá the App Store scenario, by way of <code class=\"highlighter-rouge\">UICollectionLayoutSectionOrthogonalScrollingBehavior</code>:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">section</span> <span class=\"o\">=</span> <span class=\"kt\">NSCollectionLayoutSection</span><span class=\"p\">(</span><span class=\"nv\">group</span><span class=\"p\">:</span> <span class=\"n\">group</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// Default scrolling, more or less</span>\n<span class=\"n\">section</span><span class=\"o\">.</span><span class=\"n\">orthogonalScrollingBehavior</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">continuous</span>\n\n<span class=\"c1\">// Rests at the leading edge of the *group's* boundary</span>\n<span class=\"n\">section</span><span class=\"o\">.</span><span class=\"n\">orthogonalScrollingBehavior</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">continuousGroupLeadingBoundary</span>\n\n<span class=\"c1\">// Hey, we know this one! Paging driven by the collection view's bounds.</span>\n<span class=\"n\">section</span><span class=\"o\">.</span><span class=\"n\">orthogonalScrollingBehavior</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">paging</span>\n\n<span class=\"c1\">// Paging is driven by the section layout group's dimension</span>\n<span class=\"n\">section</span><span class=\"o\">.</span><span class=\"n\">orthogonalScrollingBehavior</span> <span class=\"o\">=</span> <span class=\"n\">groupPaging</span> \n</code></pre></div></div>\n\n<p>The API design is very well put together and lends itself well to later refactors. And, though I cannot assert with absolute authority that it was Steve Breen who authored it, anyone who rolls up to dub dub to emcee a session wearing a T-Shirt with wolves on it while wearing blue jeans is someone who goes so hard in the paint that I wouldn’t even question it if it weren’t.</p>\n\n<p>Steve Breen is the G.O.A.T. of dub dub talks - and I’ve learned quite a lot from all of his content so far. For all of the hoorahs SwiftUI has (deservedly so) received, it can be easy to forget that engineers such as Steve are still here to ensure UIKit stays relevant, efficient and a pragmatic choice to build apps with.</p>\n\n<blockquote>\n  <p>You may have asked yourself why the <code class=\"highlighter-rouge\">NS</code> prefix is here in a <code class=\"highlighter-rouge\">UIKit</code> world? Catalyst, and UIKit for Mac, is likely the reason.</p>\n</blockquote>\n\n<h3 id=\"scenes\">Scenes</h3>\n<p>When it comes to vanilla UIKit, this is probably the most foundational change. At its core, scenes allow for iPadOS to kick off multiple instances of your app even though they still all run within one process. Though, even if you aren’t targeting iPadOS - it’s still a wise choice to adopt the model in your app. The tea leaves are here and they aren’t exactly subtle.</p>\n\n<p>Create a new project using the single view template in Xcode 11 and look at the files:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">AppDelegate</span><span class=\"o\">.</span><span class=\"n\">swift</span>\n<span class=\"kt\">SceneDelegate</span><span class=\"o\">.</span><span class=\"n\">swift</span> <span class=\"c1\">// New, conforms to UIWindowSceneDelegate</span>\n</code></pre></div></div>\n\n<p>And in the <code class=\"highlighter-rouge\">info.plist</code>:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;key&gt;</span>UIApplicationSceneManifest<span class=\"nt\">&lt;/key&gt;</span>\n    <span class=\"nt\">&lt;dict&gt;</span>\n        <span class=\"nt\">&lt;key&gt;</span>UIApplicationSupportsMultipleScenes<span class=\"nt\">&lt;/key&gt;</span>\n        <span class=\"nt\">&lt;true/&gt;</span>\n        <span class=\"nt\">&lt;key&gt;</span>UISceneConfigurations<span class=\"nt\">&lt;/key&gt;</span>\n        <span class=\"nt\">&lt;dict&gt;</span>\n            <span class=\"nt\">&lt;key&gt;</span>UIWindowSceneSessionRoleApplication<span class=\"nt\">&lt;/key&gt;</span>\n            <span class=\"nt\">&lt;array&gt;</span>\n                <span class=\"nt\">&lt;dict&gt;</span>\n                    <span class=\"nt\">&lt;key&gt;</span>UILaunchStoryboardName<span class=\"nt\">&lt;/key&gt;</span>\n                    <span class=\"nt\">&lt;string&gt;</span>LaunchScreen<span class=\"nt\">&lt;/string&gt;</span>\n                    <span class=\"nt\">&lt;key&gt;</span>UISceneConfigurationName<span class=\"nt\">&lt;/key&gt;</span>\n                    <span class=\"nt\">&lt;string&gt;</span>Default Configuration<span class=\"nt\">&lt;/string&gt;</span>\n                    <span class=\"nt\">&lt;key&gt;</span>UISceneDelegateClassName<span class=\"nt\">&lt;/key&gt;</span>\n                    <span class=\"nt\">&lt;string&gt;</span>$(PRODUCT_MODULE_NAME).SceneDelegate<span class=\"nt\">&lt;/string&gt;</span>\n                    <span class=\"nt\">&lt;key&gt;</span>UISceneStoryboardFile<span class=\"nt\">&lt;/key&gt;</span>\n                    <span class=\"nt\">&lt;string&gt;</span>Main<span class=\"nt\">&lt;/string&gt;</span>\n                <span class=\"nt\">&lt;/dict&gt;</span>\n            <span class=\"nt\">&lt;/array&gt;</span>\n        <span class=\"nt\">&lt;/dict&gt;</span>\n    <span class=\"nt\">&lt;/dict&gt;</span>\n<span class=\"nt\">&lt;/key&gt;</span>\n</code></pre></div></div>\n\n<p>The path of least resistance is to conceptually take your root view construction out of the app delegate, and instead consider the concept of several scenes that could occur - and assign views to those.</p>\n\n<p>The .plist approach, of course, isn’t the only way. You can skip the manifest and roll it in code:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// In your app delegate objecet...</span>\n<span class=\"kd\">func</span> <span class=\"nf\">application</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">application</span><span class=\"p\">:</span> <span class=\"kt\">UIApplication</span><span class=\"p\">,</span> <span class=\"n\">configurationForConnecting</span> <span class=\"nv\">connectingSceneSession</span><span class=\"p\">:</span> <span class=\"kt\">UISceneSession</span><span class=\"p\">,</span> <span class=\"nv\">options</span><span class=\"p\">:</span> <span class=\"kt\">UIScene</span><span class=\"o\">.</span><span class=\"kt\">ConnectionOptions</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">UISceneConfiguration</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"kt\">UISceneConfiguration</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"Default Configuration\"</span><span class=\"p\">,</span> <span class=\"nv\">sessionRole</span><span class=\"p\">:</span> <span class=\"n\">connectingSceneSession</span><span class=\"o\">.</span><span class=\"n\">role</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// And then in your scene delegate</span>\n<span class=\"kd\">func</span> <span class=\"nf\">scene</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">scene</span><span class=\"p\">:</span> <span class=\"kt\">UIScene</span><span class=\"p\">,</span> <span class=\"n\">willConnectTo</span> <span class=\"nv\">session</span><span class=\"p\">:</span> <span class=\"kt\">UISceneSession</span><span class=\"p\">,</span> <span class=\"n\">options</span> <span class=\"nv\">connectionOptions</span><span class=\"p\">:</span> <span class=\"kt\">UIScene</span><span class=\"o\">.</span><span class=\"kt\">ConnectionOptions</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">windowScene</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">scene</span> <span class=\"k\">as?</span> <span class=\"kt\">UIWindowScene</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"p\">}</span>\n    <span class=\"k\">let</span> <span class=\"nv\">window</span> <span class=\"o\">=</span> <span class=\"kt\">UIWindow</span><span class=\"p\">(</span><span class=\"nv\">windowScene</span><span class=\"p\">:</span> <span class=\"n\">windowScene</span><span class=\"p\">)</span>\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">rootViewController</span> <span class=\"o\">=</span> <span class=\"kt\">UIViewController</span><span class=\"p\">()</span>\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"nf\">makeKeyAndVisible</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This is a larger subject that I’m personally excited to dive more into, as other app-delegatey things have also moved (such as accepting CloudKit shares). The shift from thinking of an app delegate as a keeper of multiple sessions instead of a 1:1 execution flow allows for all sorts of exciting scenarios.</p>\n\n<h3 id=\"glyphs-and-images\">Glyphs and Images</h3>\n<p>No doubt you’ve heard about a 1,500+ strong icon pack that the crack Apple design team has provided. For the curious among us, you can even download a <a href=\"https://developer.apple.com/design/downloads/SF-Symbols.dmg\" target=\"_blank\">dedicated macOS app</a> to view them all right now.</p>\n\n<p><em>Cool! An icon pack!</em></p>\n\n<p>Nay, it’s much more than that. The subtleties are what become difficult about glpyhs - getting them all in the correct weights and sizes, ensuring sure line heights stay in harmony with system fonts or making them big when they should be and small when they shouldn’t.</p>\n\n<p>And, that’s only after you’ve got them all exported out and then you’ve got to tack on the time it takes to maintain them as well. But that’s pre iOS 13, because a lot of these pain points have been solved:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// A pencil glyph</span>\n<span class=\"k\">let</span> <span class=\"nv\">glyph</span> <span class=\"o\">=</span> <span class=\"kt\">UIImage</span><span class=\"p\">(</span><span class=\"nv\">systemName</span><span class=\"p\">:</span> <span class=\"s\">\"pencil\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// Or overload it according to a traitCollection or image config</span>\n<span class=\"k\">let</span> <span class=\"nv\">canExpandGlyph</span> <span class=\"o\">=</span> <span class=\"kt\">UIImage</span><span class=\"p\">(</span><span class=\"nv\">systemName</span><span class=\"p\">:</span> <span class=\"s\">\"square.split.2x1\"</span><span class=\"p\">,</span> <span class=\"nv\">compatibleWith</span><span class=\"p\">:</span> <span class=\"n\">regularWidthCollection</span><span class=\"p\">)</span>\n<span class=\"k\">let</span> <span class=\"nv\">didExpandGlyph</span> <span class=\"o\">=</span> <span class=\"kt\">UIImage</span><span class=\"p\">(</span><span class=\"nv\">systemName</span><span class=\"p\">:</span> <span class=\"s\">\"square.split.2x1.filled\"</span><span class=\"p\">,</span> <span class=\"nv\">compatibleWith</span><span class=\"p\">:</span> <span class=\"n\">compactWidthCollection</span><span class=\"o\">.</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>While other overloads and techniques exist, that code sample is enough to get you up and going. And that’s a good thing.</p>\n\n<p>Another little gimme <code class=\"highlighter-rouge\">UIImage</code> has given us are class level instances for common user experience actions, like closing or adding an item:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">closeGlyph</span> <span class=\"o\">=</span> <span class=\"kt\">UIImage</span><span class=\"o\">.</span><span class=\"n\">close</span>\n<span class=\"k\">let</span> <span class=\"nv\">addGlyph</span> <span class=\"o\">=</span> <span class=\"kt\">UIImage</span><span class=\"o\">.</span><span class=\"n\">add</span>\n<span class=\"k\">let</span> <span class=\"nv\">removeGlyph</span> <span class=\"o\">=</span> <span class=\"kt\">UIImage</span><span class=\"o\">.</span><span class=\"n\">remove</span>\n</code></pre></div></div>\n\n<p>These are just convenience initializers (not in the concrete Swift term) that boil down to what Cupertino and Friends© have deemed most appropriate for those items. For example, in the first beta of iOS 13, <code class=\"highlighter-rouge\">UIImage.close</code> is returning the “xmark” glyph.</p>\n\n<p>Going further, with the highlighted emphasis Apple has placed upon <code class=\"highlighter-rouge\">UITraitCollection</code>, it’s not a lot of work to make an image (or color) toggle based upon the trait collection housing it. See this <a href=\"https://gist.github.com/timonus/8b4feb47eccb6dde47ca6320d8fc6b11\" target=\"_blank\">gist</a>, via <a href=\"https://twitter.com/timonus\" target=\"_blank\">Tim</a>, to get a feel for what that looks like.</p>\n\n<h3 id=\"bonus---inset-grouped\">Bonus - Inset Grouped</h3>\n<p>This is a small one, albeit one that we should have seen coming for the last year. If you follow <a href=\"https://github.com/ResearchKit/ResearchKit\" target=\"_blank\">Research Kit’s</a> development, then it was clear where iOS was taking some of its new table view styles:</p>\n\n<p><img src=\"../assets/images/RK2Stable.png\" alt=\"Research Kit 2.0\" /></p>\n\n<p>The grouped table view hearkens back to the original grouped style, yet it adds a subtle corner radius to the beginning and end cells. The Research Kit team added this style as part of its version 2 release. It’s a style that’s easily achieved on your own, but why would you?</p>\n\n<p>Enter <a href=\"https://developer.apple.com/documentation/uikit/uitableview/style/insetgrouped\" target=\"_blank\">.insetGrouped</a>:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">tableView</span> <span class=\"o\">=</span> <span class=\"kt\">UITableView</span><span class=\"p\">(</span><span class=\"nv\">frame</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">zero</span><span class=\"p\">,</span> <span class=\"nv\">style</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">insetGrouped</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Now, you’ll get this new style for free.</p>\n\n<h3 id=\"double-bonus---uitraitcollection\">Double Bonus - UITraitCollection</h3>\n<p>I alluded to this earlier, but seriously! So much changed with trait collections, so much was added and so much responsibility was bequeathed unto it with iOS 13 that you just need to book up on it. It’s a post for another day, but many would-be problems were solved with it in iOS 13, making things like dark mode friendly to adopt.</p>\n\n<h3 id=\"final-thoughts\">Final Thoughts</h3>\n<p>WWDC 2019 will certainly be remembered as the year SwiftUI started. With such a powerfully abstracted declarative framework, who knows where it might end up. I can’t believe I’m writing this, but SwiftUI could end up being the best way to create even Android apps years from now (doubtful, <em>but</em> not as doubtful as that statement was before last week).</p>\n\n<p>But, even though SwiftUI is <em>not</em> UIKit, the latter is certainly here to stay. And this year, it became better than it ever has been.</p>\n\n<p>Until next time ✌️.</p>",
            "summary": "Phew.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2019-06-07T00:00:00-05:00",
            "date_modified": "2019-06-07T00:00:00-05:00",
            "author": {
              "name": {"twitter":"jordanmorgan10","picture":"/assets/images/about/headshot.jpeg"}},
            "tags": ["UIKit"]},{
            "id": "http://localhost:4000/WWDC-2019-The-Pregame-Quiz",
            "url": "http://localhost:4000/WWDC-2019-The-Pregame-Quiz/",
            "title": "WWDC 2019: The Pregame Quiz",
            "content_html": "<p>Dark mode, Marzipan and who knows what else await us which means we’re not far from Tim Cook and Friends revealing iOS 13 to the world. With a ton of services announcements already taken care of such as Apple TV+, Apple News+ and more - the tea leaves indicate that they’re going hard on pure API news this year.</p>\n\n<p>At this point it’s all conjecture, so let’s ready up with the fifth annual Swiftjective-C WWDC Pregame Quiz!</p>\n\n<p>If you’d like a quick primer on how this all works or how it got started, check out the first four quizzes from <a href=\"http://localhost:4000/WWDC-2015-The-Pregame-Quiz\">2015</a> ,<a href=\"http://localhost:4000/WWDC-2016-The-Pregame-Quiz\">2016</a>, <a href=\"http://localhost:4000/WWDC-2017-The-Pregame-Quiz\">2017</a> and <a href=\"http://localhost:4000/WWDC-2018-The-Pregame-Quiz\">2018</a>.</p>\n\n<p>Now - Lets.Play(with:🔥)!</p>\n\n<h3 id=\"ground-rules\">Ground Rules</h3>\n\n<p>There are three rounds, and the point break down is as follows:</p>\n\n<ul>\n  <li><strong>Round 1</strong> – 1 point each answer</li>\n  <li><strong>Round 2</strong> - 2 points each answer</li>\n  <li><strong>Round 3</strong> - 3 points each answer</li>\n</ul>\n\n<p>The last question of each round is an optional wildcard question. Get it right, and your team gets <strong>4</strong> <strong>points</strong>, <em>but</em> miss it and the team will be <strong>deducted 2 points</strong>.</p>\n\n<h3 id=\"round-1swift-decisions\">Round 1 — Swift Decisions</h3>\n\n<p><strong>Question 1:</strong><br />\nWhat’s the name of the Swift attribute, added in Swift 5 to bolster dynamic language interoperability, that allows one to call named types like you’d call functions using a simple syntactic sugar?</p>\n\n<p>Example:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"err\">@</span><span class=\"p\">(</span><span class=\"n\">the</span> <span class=\"n\">attribute</span> <span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"kd\">struct</span> <span class=\"kt\">SwiftjectiveC</span> \n<span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">showArticles</span><span class=\"p\">(</span><span class=\"nv\">withTags</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">])</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">instance</span> <span class=\"o\">=</span> <span class=\"kt\">SwiftjectiveC</span><span class=\"p\">()</span>\n\n<span class=\"nf\">instance</span><span class=\"p\">(</span><span class=\"s\">\"Foundation\"</span><span class=\"p\">,</span> <span class=\"s\">\"Swift\"</span><span class=\"p\">)</span>\n<span class=\"c1\">// This will desugar down to instance.showArticles(withTags: [\"Foundation\", \"Swift\"])</span>\n</code></pre></div></div>\n\n<p><strong>Question 2:</strong><br />\nIn Swift, variables are initialized before they are used by a concept enforced by LLVM’s optimizer. What is this concept in computer science referred to as?</p>\n\n<p><strong>Question 3:</strong><br />\nSIMD Vector and Result types were finally added to Swift in an official capacity in what version?</p>\n\n<p><strong>Question 4:</strong> <br />\nBefore Apple’s Swift was announced, there already existed a parallel programming language by the same name - who were its developers?</p>\n\n<p><strong>Wildcard:</strong><br />\nBefore Swift was a popular programming language at Apple, it was also the codename for an Apple-designed processor - which one was it?</p>\n\n<h3 id=\"round-2ios-history-101\">Round 2 — iOS History 101</h3>\n\n<p><strong>Question 1:</strong><br />\nAuto Layout, long a core component of laying out user interfaces on macOS, didn’t arrive on iOS until which major release?</p>\n\n<p><strong>Question 2:</strong><br />\nSecurity is a hallmark feature of iOS, and this specific feature involves placing data in random locations in memory and works alongside ARM’s XN (Execute Never) feature to prevent buffer overflow attacks - what is it?</p>\n\n<p><strong>Question 3:</strong><br />\nWhen iOS was still shrouded in secrecy within Apple, how old was the youngest engineer working on iOS 1.0?</p>\n\n<p><strong>Question 4:</strong> <br />\nWhen the iPhone was first launched on June 29th, 2007 its operating system wasn’t yet referred to as iOS until iOS 4. What was its original name?</p>\n\n<p><strong>Wildcard:</strong><br />\nLeading the way to haggle all of your friends who appear as green bubbles in your conversations, in which version of iOS did iMessage debut?</p>\n\n<h3 id=\"round-3apple-myth-and-lore\">Round 3 — Apple Myth and Lore</h3>\n\n<p><strong>Question 1:</strong><br />\nLeading up to its March 25th, 2019 “It’s Showtime” keynote, Apple live streamed Carplay displaying a six hour ride - where was its end destination?</p>\n\n<p><strong>Question 2:</strong><br />\nSteve Jobs, long known as being a master of details, hotly debated <em>what</em> aspect of an Apple Store’s bathroom signs?</p>\n\n<p><strong>Question 3:</strong><br />\nWhat was the very first thing <em>ever</em> rendered in a Safari browser, produced by Ken Kocienda during its development?</p>\n\n<p><strong>Question 4:</strong> <br />\nTo ensure that a visiting Ross Perot wouldn’t think Apple and its employees were too rich for investment - Steve Jobs had himself and Randy Adams hide what objects before he arrived?</p>\n\n<p><strong>Wildcard:</strong><br />\nWhat original Apple employee quickly sold off their 10% share of the company in 1977 for only $800 (which would be worth billions today)?</p>\n\n<h3 id=\"answer-key\">Answer Key</h3>\n<p><b>Round 1:</b></p>\n<ol>\n  <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0216-dynamic-callable.md\">@dynamicCallable</a></li>\n  <li><a href=\"http://localhost:4000on-definitive-initialization/\">Definitive Initialization.</a></li>\n  <li>Swift 5.</li>\n  <li>The University of Chicago and Argonne National Laboratory.</li>\n  <li>Wildcard: <a href=\"https://en.wikipedia.org/wiki/List_of_Apple_codenames\">The Apple A6 and A6X chips.</a></li>\n</ol>\n\n<p><b>Round 2:</b></p>\n<ol>\n  <li>iOS 6.</li>\n  <li>Address Space Layout Randomization.</li>\n  <li>18 years old, Scott Goodson.</li>\n  <li>iPhone OS.</li>\n  <li>Wildcard: iOS 5.</li>\n</ol>\n\n<p><b>Round 3:</b></p>\n<ol>\n  <li>Cupertino.</li>\n  <li><a href=\"https://www.businessinsider.com/steve-jobs-attention-to-detail-2011-10#when-he-was-hospitalized-he-rejected-masks-because-they-were-ugly-8\">The shade of gray they should be colored as.</a></li>\n  <li><a href=\"https://asciiwwdc.com/2014/sessions/237\">A black obelisk!</a> Fun fact, it actually rendered in the wrong direction.</li>\n  <li><a href=\"https://www.forbes.com/sites/connieguglielmo/2012/10/03/untold-stories-about-steve-jobs-friends-and-colleagues-share-their-memories/#4932fdc6c584\">Their Porsche 911s</a></li>\n  <li>Wildcard: One of its oft forgotten co-founders, Ronald Wayne.</li>\n</ol>",
            "summary": "Dark mode, Marzipan and who knows what else await us which means we’re not far from Tim Cook and Friends revealing iOS 13 to the world. With a ton of services announcements already taken care of such as Apple TV+, Apple News+ and more - the tea leaves indicate that they’re going hard on pure API news this year.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2019-05-23T00:00:00-05:00",
            "date_modified": "2019-05-23T00:00:00-05:00",
            "author": {
              "name": {"twitter":"jordanmorgan10","picture":"/assets/images/about/headshot.jpeg"}},
            "tags": ["Trivia"]},{
            "id": "http://localhost:4000/NSSecureCoding",
            "url": "http://localhost:4000/NSSecureCoding/",
            "title": "NSSecureCoding",
            "content_html": "<p>Every year when Apple announces a new operating system, I find myself transfixed to the now famous word cloud slide (or tag or bubble cloud depending on who you ask). I’m talking about the “Oh Yeahs” and the “We also did this” API changes that weren’t deemed worthy enough of a call out during the keynote or state of the union address. Thus, such changes will find themselves relegated to its own cozy corner within the word cloud slide.</p>\n\n<p>However, I find that I have quite a predilection for such API changes. The ones that might not make the press or be the chatter among devs undoubtedly taking over each coffee shop in San Jose are the ones which are often extremely valuable to our work. They just aren’t as “sexy”, as such, the spotlight eludes them.</p>\n\n<p>This week, let’s chat about one such enhancement that’s been around since iOS 6, <code class=\"highlighter-rouge\">NSSecureCoding</code>.</p>\n\n<h3 id=\"archiving-and-serialization\">Archiving and Serialization</h3>\n<p>Every iOS app will eventually be a consumer, or producer, of some sort of data. This data can represent itself in several different ways, each of which requires its own nuanced approach in terms of security and how its used:</p>\n\n<ul>\n  <li><strong>Raw Data:</strong> The actual stream of bites representing information.</li>\n  <li><strong>Primitive Data:</strong> A <a href=\"https://en.wikipedia.org/wiki/Unicode#UTF\" target=\"_blank\">UTF</a> representation of primitive data. On iOS, this typically ends up as JSON.</li>\n  <li><strong>Structured Data:</strong> This is how you’ve chosen to model your data in a strongly typed way. Think of taking some primitive data, and injecting it into a model.</li>\n</ul>\n\n<p>At each point in the life cycle of some data, there are different ways in which developers must handle it. For example, if you are expecting a tiny text file to be returned from your server - you might be tipped off that something is dreadfully wrong if the file is ten gigs when its still in a primitive state:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">DataChecks</span> \n<span class=\"p\">{</span>\n    <span class=\"kd\">static</span> <span class=\"k\">let</span> <span class=\"nv\">maxTextSize</span> <span class=\"o\">=</span> <span class=\"mi\">1048576</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">textData</span> <span class=\"o\">=</span> <span class=\"nf\">someTextFile</span><span class=\"p\">()</span>\n\n<span class=\"k\">guard</span> <span class=\"n\">textData</span><span class=\"o\">.</span><span class=\"n\">length</span> <span class=\"o\">&lt;</span> <span class=\"kt\">DataChecks</span><span class=\"o\">.</span><span class=\"n\">maxTextSize</span> <span class=\"k\">else</span> \n<span class=\"p\">{</span>\n    <span class=\"c1\">// Funny business</span>\n    <span class=\"k\">return</span>\n<span class=\"p\">}</span>\n\n</code></pre></div></div>\n\n<p>Conversely, one would also be aware of some tomfoolery afoot if deserializing that data to JSON brought about a much different result:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">data</span> <span class=\"o\">=</span> <span class=\"kt\">NSData</span><span class=\"p\">()</span>\n<span class=\"k\">let</span> <span class=\"nv\">parsedJSON</span><span class=\"p\">:</span><span class=\"kt\">Any</span>\n\n<span class=\"k\">do</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">option</span> <span class=\"o\">=</span> <span class=\"kt\">JSONSerialization</span><span class=\"o\">.</span><span class=\"kt\">ReadingOptions</span><span class=\"p\">(</span><span class=\"nv\">rawValue</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">// If this works, we know the data will be strings/arrays/etc.</span>\n    <span class=\"c1\">// Things like XML, for example, would fail here.</span>\n    <span class=\"n\">parsedJSON</span> <span class=\"o\">=</span> <span class=\"k\">try</span> <span class=\"kt\">JSONSerialization</span><span class=\"o\">.</span><span class=\"nf\">jsonObject</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"n\">data</span> <span class=\"k\">as</span> <span class=\"kt\">Data</span><span class=\"p\">,</span> <span class=\"nv\">options</span><span class=\"p\">:</span> <span class=\"n\">option</span><span class=\"p\">)</span>\n<span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">{</span> <span class=\"cm\">/* Dragons.here */</span> <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Whether its by using a some type of checksum on a raw data blob or ensuring primitive data becomes what you expect it to, as a programmer you’re actively taking steps to make sure that the data you’re playing with, plays nice.</p>\n\n<p>Then, down the road, the data eventually needs to make its way on disk. Consider this example of caching some posts in a hypothetical blogging app:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">Post</span><span class=\"p\">:</span> <span class=\"kt\">NSCoding</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">title</span><span class=\"p\">:</span><span class=\"kt\">String</span><span class=\"p\">?</span>\n\n    <span class=\"c1\">// For brevity these are unimplemented...</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">with</span> <span class=\"nv\">aCoder</span><span class=\"p\">:</span> <span class=\"kt\">NSCoder</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"cm\">/* Imagine this is donesis */</span> <span class=\"p\">}</span>\n    \n    <span class=\"kd\">required</span> <span class=\"nf\">init</span><span class=\"p\">?(</span><span class=\"n\">coder</span> <span class=\"nv\">aDecoder</span><span class=\"p\">:</span> <span class=\"kt\">NSCoder</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"cm\">/* And this too */</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Later on down the road, you might do something like this...</span>\n<span class=\"kd\">func</span> <span class=\"nf\">updatePostsCache</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">saveURL</span> <span class=\"o\">=</span> <span class=\"kt\">URL</span><span class=\"p\">(</span><span class=\"nv\">fileURLWithPath</span><span class=\"p\">:</span> <span class=\"s\">\"someDestination\"</span><span class=\"p\">)</span>\n    <span class=\"k\">let</span> <span class=\"nv\">archiver</span> <span class=\"o\">=</span> <span class=\"kt\">NSKeyedArchiver</span><span class=\"o\">.</span><span class=\"nf\">archivedData</span><span class=\"p\">(</span><span class=\"nv\">withRootObject</span><span class=\"p\">:</span> <span class=\"n\">posts</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"n\">archiver</span><span class=\"o\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"nv\">to</span><span class=\"p\">:</span> <span class=\"n\">saveURL</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// And eventually get it back out...</span>\n<span class=\"k\">let</span> <span class=\"nv\">postCache</span><span class=\"p\">:[</span><span class=\"kt\">Data</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"cm\">/* Data loaded up */</span>\n<span class=\"k\">let</span> <span class=\"nv\">posts</span> <span class=\"o\">=</span> <span class=\"k\">try</span> <span class=\"n\">postCache</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"p\">{</span> <span class=\"n\">postData</span> <span class=\"k\">in</span>\n    <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">postBlob</span> <span class=\"o\">=</span> <span class=\"k\">try</span> <span class=\"kt\">NSKeyedUnarchiver</span><span class=\"o\">.</span><span class=\"nf\">unarchiveTopLevelObject</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"n\">postData</span><span class=\"p\">),</span> <span class=\"k\">let</span> <span class=\"nv\">post</span> <span class=\"o\">=</span> <span class=\"n\">postBlob</span> <span class=\"k\">as?</span> <span class=\"kt\">Post</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"k\">throw</span> <span class=\"cm\">/* Error handling */</span> <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">post</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>And, just like the scenarios above, malicious actors could step in at this point as well. Foundation would rather not have that happen, but it also could use your help to ensure that it doesn’t.</p>\n\n<h3 id=\"understanding-the-unarchiving-pipeline\">Understanding the Unarchiving Pipeline</h3>\n<p>To get a feel for how things could go wrong here, it’s key to understand what exactly <code class=\"highlighter-rouge\">NSKeyedUnarchiver</code> is doing when it unarchives your structured data. When your data is stored, it’ll look a little something like this in the archive:</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"$class\"</span><span class=\"p\">:</span><span class=\"s2\">\"Post\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"title\"</span><span class=\"p\">:</span><span class=\"s2\">\"...\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>Later on, when one goes to pull it back out via unarchiving, <code class=\"highlighter-rouge\">NSKeyedUnarchiver</code> will dynamically look for a class with the same name of the key (passed in via its initializer) in your app’s bundle. Then, a few things happen:</p>\n\n<ul>\n  <li>An instance of that class gets allocated in memory</li>\n  <li>Then, it’s initialized to allow it to decode</li>\n  <li>Lastly, <code class=\"highlighter-rouge\">awakeAfter(using:)</code> gets invoked to allow for any final state considerations</li>\n</ul>\n\n<p>That all looks reasonable, but consider this - the unarchiver will do this on <em>whatever</em> key you pass. So if a #TerribleHumanBeing injected some nonsense in there, this is what happens:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">unarchiver</span><span class=\"o\">.</span><span class=\"nf\">decodeObject</span><span class=\"p\">(</span><span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"kt\">NSKeyedArchiverRootObjectKey</span><span class=\"p\">)</span>\n<span class=\"kt\">BadTerribleThings</span><span class=\"o\">.</span><span class=\"nf\">alloc</span><span class=\"p\">()</span>\n<span class=\"kt\">BadTerribleThings</span><span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">?(</span><span class=\"nv\">coder</span><span class=\"p\">:)</span>\n<span class=\"kt\">BadTerribleThings</span><span class=\"o\">.</span><span class=\"nf\">awakeAfer</span><span class=\"p\">(</span><span class=\"nv\">using</span><span class=\"p\">:)</span>\n</code></pre></div></div>\n\n<p>😱.</p>\n\n<p>Under the hood, when we invoked <code class=\"highlighter-rouge\">unarchiveTopLevelObject(with:)</code> an instance of <code class=\"highlighter-rouge\">KSKeyedUnarchiver</code> popped up and tried to decode an object for the given key. Now, you can see why this line really matters:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">postBlob</span> <span class=\"o\">=</span> <span class=\"k\">try</span> <span class=\"kt\">NSKeyedUnarchiver</span><span class=\"o\">.</span><span class=\"nf\">unarchiveTopLevelObject</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"n\">postData</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>…because even though we’ll fail since the downcast will not pass, and even though we’ll discard the object - the archiver still could’ve just allocated some BS.</p>\n\n<p>And said BS could do a few different things to really flip your biscuits.</p>\n\n<p>Perhaps it might change some global state 💀!<br />\nOr initialize some sort of singleton 🙅🏻‍♂️!<br />\n…or perform any other attack vector that they can dream up ⚰️.<br /></p>\n\n<blockquote>\n  <p>You might think that’s dramatic, but archives can be maliciously constructed. Plus, if <a href=\"https://twitter.com/stroughtonsmith/status/1123741346425180161?s=20\" target=\"_blank\">Steve Troughton-Smith</a> can make Marzipan work when Marzipan isn’t released on apps that he doesn’t have the source code too - trust no one.</p>\n</blockquote>\n\n<p>So what’s a dev to do? Of course, the answer is to use <code class=\"highlighter-rouge\">NSSecureCoding</code> - and even better, it’s typically <em>a one line change</em>.</p>\n\n<h3 id=\"secure-serialization\">Secure Serialization</h3>\n<p>The <code class=\"highlighter-rouge\">NSSecureCoding</code> protocol directly inherits from <code class=\"highlighter-rouge\">NSCoding</code> - and as the name implies it performs the same functions as its parent but in a more secure fashion. Using it, we’ll avoid any arbitrary code execution attacks as mentioned above.</p>\n\n<p>Normally, I’d dive into the intricacies of the API - but this one only adds a single static boolean property for you to override at the class level.</p>\n\n<p>Continuing with our <code class=\"highlighter-rouge\">Post</code> class:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">Post</span><span class=\"p\">:</span> <span class=\"kt\">NSSecureCoding</span>\n<span class=\"p\">{</span>\n    <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">supportsSecureCoding</span><span class=\"p\">:</span> <span class=\"kt\">Bool</span> <span class=\"p\">{</span>\n        <span class=\"k\">get</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// The rest of the class code omitted for brevity</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Now, the archivers will subtly change their process:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Before secure coding</span>\n<span class=\"n\">decoder</span><span class=\"o\">.</span><span class=\"nf\">decodeObjectForKey</span><span class=\"p\">(</span><span class=\"s\">\"Posts\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// After</span>\n<span class=\"n\">decoder</span><span class=\"o\">.</span><span class=\"nf\">decodeObject</span><span class=\"p\">(</span><span class=\"nv\">of</span><span class=\"p\">:</span><span class=\"kt\">Post</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"s\">\"Posts\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>This makes all the difference, because now archivers can directly preflight its contents to ensure it has the types you expect when secure coding is used.</p>\n\n<p>Internally, this is achieved by some bookkeeping done for us by archivers creating an <em>allowed class list</em>. This list contains all of the classes that can be securely decoded and encoded. Think of it as some malformed naughty or nice list, but only real and not used by a portly man donning a red suit.</p>\n\n<p>Considering it, here’s what the process above looks like now:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">unarchiver</span><span class=\"o\">.</span><span class=\"nf\">decodeObject</span><span class=\"p\">(</span><span class=\"nv\">of</span><span class=\"p\">:</span><span class=\"kt\">Post</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"kt\">NSKeyedArchiverRootObjectKey</span><span class=\"p\">)</span>\n<span class=\"c1\">// Class check would fail if it's not a post, and then return with a failure</span>\n<span class=\"c1\">// Thus, this code below would no longer happen...</span>\n<span class=\"kt\">BadTerribleThings</span><span class=\"o\">.</span><span class=\"nf\">alloc</span><span class=\"p\">()</span>\n<span class=\"kt\">BadTerribleThings</span><span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">?(</span><span class=\"nv\">coder</span><span class=\"p\">:)</span>\n<span class=\"kt\">BadTerribleThings</span><span class=\"o\">.</span><span class=\"nf\">awakeAfer</span><span class=\"p\">(</span><span class=\"nv\">using</span><span class=\"p\">:)</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>You can see this list yourself, as coders have a set property containing its contents: <code class=\"highlighter-rouge\">aCoder.allowedClasses</code></p>\n</blockquote>\n\n<p>Crisis averted, but <code class=\"highlighter-rouge\">NSSecureCoding</code> also comes with another bonus: static type checking. If you’ve got any manual decode calls with conditional downcasts, those can now go away</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Before</span>\n<span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">myPost</span> <span class=\"o\">=</span> <span class=\"n\">coder</span><span class=\"o\">.</span><span class=\"nf\">decodeObject</span><span class=\"p\">(</span><span class=\"nv\">forKey</span><span class=\"p\">:</span><span class=\"s\">\"Post\"</span><span class=\"p\">)</span> <span class=\"k\">as?</span> <span class=\"kt\">Post</span>\n\n<span class=\"c1\">// After</span>\n<span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">myPost</span> <span class=\"o\">=</span> <span class=\"n\">coder</span><span class=\"o\">.</span><span class=\"nf\">decodeObject</span><span class=\"p\">(</span><span class=\"nv\">of</span><span class=\"p\">:</span><span class=\"kt\">Post</span><span class=\"o\">.</span><span class=\"k\">self</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span><span class=\"s\">\"Post\"</span><span class=\"p\">)</span> \n</code></pre></div></div>\n\n<p>However, there are a few other intricacies around subclasses to consider. If one’s class <em>doesn’t</em> override <code class=\"highlighter-rouge\">init(coder:)</code>, it can still conform to <code class=\"highlighter-rouge\">NSSecureCoding</code> without any changes if it’s a subclass of another class that does conform. Though, if it does override <code class=\"highlighter-rouge\">init(coder:)</code> it also must decode any nested objects using <code class=\"highlighter-rouge\">decodeObjectOfClass:forKey</code>:.</p>\n\n<h3 id=\"on-failing\">On Failing</h3>\n<p>When decoding fails as above, whether by a programmer’s error or malicious intent, it’s known as a secure decoding violation. Additionally, other failure states exist, such as a type mismatch (expecting an object and receiving a primitive) or perhaps the archive faces corruption.</p>\n\n<p>What happens in this scenario is entirely up to you, and you can control it via <code class=\"highlighter-rouge\">NSDecodingPolicyFailure</code></p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">enum</span> <span class=\"kt\">NSCoder</span><span class=\"o\">.</span><span class=\"kt\">NSDecodingFailurePolicy</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"n\">raiseException</span>\n    <span class=\"k\">case</span> <span class=\"n\">setErrorAndReturn</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The default choice is to raise an exception, but you can opt for a simple error assignment to the coder and continue execution. So, if it indeed a class injection were occurring, it’d fail and the coder would invoke <code class=\"highlighter-rouge\">failWithError(_ error: Error)</code>.</p>\n\n<p>Recall that Swift can’t catch Objective-C or++ exceptions, so be thoughtful here. If you’d opt for <code class=\"highlighter-rouge\">setErrorAndReturn</code> the coder will have its error property set, and it would return nil. You can also tailor this error to be specific for your own use case:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Assume class injection, a failure from corruption, etc</span>\n<span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">post</span> <span class=\"o\">=</span> <span class=\"n\">unarchiver</span><span class=\"o\">.</span><span class=\"nf\">decodeObject</span><span class=\"p\">(</span><span class=\"nv\">of</span><span class=\"p\">:</span><span class=\"kt\">Post</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"s\">\"Post\"</span><span class=\"p\">)</span> <span class=\"k\">else</span> \n<span class=\"p\">{</span>\n    <span class=\"n\">unarchiver</span><span class=\"o\">.</span><span class=\"nf\">failWithError</span><span class=\"p\">(</span><span class=\"kt\">CocoaError</span><span class=\"o\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">coderValueNotFound</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"kc\">nil</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// obj will be nil, or 0 if its a primitive type</span>\n<span class=\"c1\">// Now handle the populated error however you see fit</span>\n</code></pre></div></div>\n\n<h3 id=\"bonus-points-why-now\">Bonus Points: Why Now?</h3>\n<p>Aside from my love of writing about the outliers of iOS, why write a post about an API that’s quite old in iOS years? The answer is that I suspect more developers will be wanting for more information over it shortly. Starting with iOS 12, the legacy way of using both keyed archiver/unarchiver are now deprecated:</p>\n\n<p><img src=\"../assets/images/badCoder.jpg\" alt=\"Deprecation\" /></p>\n\n<p>The deprecations means both classes gained new variants of <a href=\"https://developer.apple.com/documentation/foundation/nskeyedunarchiver/2983380-unarchivedobject\" target=\"_blank\">those methods</a> which allow for <a href=\"https://developer.apple.com/documentation/foundation/nskeyedarchiver/2962880-archiveddata\" target=\"_blank\">gated class checks</a> as well.</p>\n\n<p>Further, support for adhering on a per-class basis with the class boolean, <code class=\"highlighter-rouge\">supportSecureCoding</code>, was only added in iOS 10. So, with iOS 13 on the horizon - this means that the lot of us will turn to iOS 12 as our minimum build target, thus the non-secure archiving deprecation will be showing in serialization scenarios within Xcode all over the world quite soon.</p>\n\n<h3 id=\"wrapping-up\">Wrapping Up</h3>\n<p>Refactoring all of ones archiving and serialization pipeline to make sure its vending the intended class might not be the most thrilling task on the backlog. But it’s a quick win, and it yields a more secure app.</p>\n\n<p>And if we’re being honest, the chances of a malicious attack targeting your app through this particular vector might be slim. But it never happens <em>until it does</em>. Plus, when the tide goes out - you can tell who was skinny dipping. Don’t be the dev who got toasted because they forgot to use a more secure archiving technique.</p>\n\n<p>Until next time ✌️.</p>",
            "summary": "Every year when Apple announces a new operating system, I find myself transfixed to the now famous word cloud slide (or tag or bubble cloud depending on who you ask). I’m talking about the “Oh Yeahs” and the “We also did this” API changes that weren’t deemed worthy enough of a call out during the keynote or state of the union address. Thus, such changes will find themselves relegated to its own cozy corner within the word cloud slide.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2019-05-03T00:00:00-05:00",
            "date_modified": "2019-05-03T00:00:00-05:00",
            "author": {
              "name": {"twitter":"jordanmorgan10","picture":"/assets/images/about/headshot.jpeg"}},
            "tags": ["Foundation"]},{
            "id": "http://localhost:4000/making-pancakes",
            "url": "http://localhost:4000/making-pancakes/",
            "title": "I Made Some Pancakes",
            "content_html": "<p>Wouldn’t you know it - today I made some pancakes for breakfast. I know, I know - pics or it didn’t happen:</p>\n\n<p><img src=\"../assets/images/pancakes.jpg\" alt=\"DopePancakes\" /></p>\n\n<p>And it was the weirdest thing.</p>\n\n<p>As I was sitting there mixing up the batter, getting the cast iron skillet heated up <em>just</em> right - I found myself humming along as I popped on Spotify to give me some tunes to push these from good-enough pancakes to straight up artisanal masterpieces. I wasn’t rushed at all. For whatever reason, I was only completely focused on making these pancakes and I was having the time of my life.</p>\n\n<p>For me, that’s huge.</p>\n\n<h3 id=\"what-i-wasnt-thinking-of\">What I Wasn’t Thinking Of</h3>\n<p>Life is busy for all of us. As a married dad of three kiddos, I find myself objectively busier than I used to be. Given that, I find that there’s times when my mental space and anxiety can constantly be playing their “Greatest Hits” album over and over:</p>\n\n<ul>\n  <li>How can I find time to release this side project?</li>\n  <li>Will it even matter when I do? <a href=\"http://localhost:4000/the-chart-that-lies\" target=\"_blank\">Time spent on it doesn’t really matter.</a></li>\n  <li>Beyond side projects, how do I do even better at my job?</li>\n  <li>Oh yeah - real life. When am I going to finish all of this laundry?</li>\n  <li>I’m so close to being out of debt, it’s exhausting putting all my disposable income towards it.</li>\n  <li>But then, do I just trade debt payments for saving for a down payment on a house? I want to enjoy my good income for once! Maybe I’ll buy a new iPad.</li>\n  <li>Hmm, that’s a lot though. Wow, you know what - it’s crazy that my oldest will need a cell phone before I know it!</li>\n  <li>Oh shoot - <strong>all</strong> of my kids will need a cell phone 😬!</li>\n  <li>and a car 😬😬,</li>\n  <li>and go to college 😬😬😬,</li>\n  <li>and also probably get married 😬😬😬😬.</li>\n  <li>💀.</li>\n</ul>\n\n<p>The point is, I typically would not take time to make any pancakes. Let alone, during a weekday. There’s just too much to do that I simply can’t afford myself the joy of cracking open a box of premade pancake batter and seeing them through to fruition. Ouch.</p>\n\n<h3 id=\"when-life-hits-you-with-a-sigabrt\">When Life Hits You with a SIGABRT()</h3>\n<p>When you find yourself thinking ahead so fast that you can’t take the time to make pancakes, or enjoy a movie on Netflix or just take 15 minutes to talk with a loved one - you have to realize that’s your brain telling you to quite literally relax.</p>\n\n<p>If you’re at this point, you might be carrying on like I do when I need to chill out but haven’t realized it yet:<br /><br />\n<strong>Did your mom call you?</strong> <em>I’ll call back later, I need to finish this post.</em> <br />\n<strong>Is it nice outside?</strong> <em>I’ll take the walk another time, this project needed to finish up yesterday.</em><br />\n<strong>A new video game out you’d enjoy?</strong> <em>I’ll play it later, I’ve gotta ship my side project now so I can learn from users, otherwise I won’t be following the lean startup principles!</em><br /></p>\n\n<p>You aren’t at all a bad person if you do these things, I think we all do. Most texts suggest ways to avoid those situations all together, but I personally don’t find that a realistic goal.</p>\n\n<p>No matter the epiphany you experience today, tomorrow or the next week you’ll eventually start back on your old ways. I think that’s healthy, actually - if we didn’t, we’d never start back in on working towards our goals again. Like anything - the answer is balance.</p>\n\n<h3 id=\"finding-the-pancake-moments\">Finding the Pancake Moments</h3>\n\n<p>Why was it that I felt so peaceful, calm and balanced today? Enough to wake up early and jam on some delish pancakes. I’ve yearned to answer that type of question for a long time. And, being an engineer, long ago I started to document my “pancake” moments when they did pop up to later try extrapolate why they arrived.</p>\n\n<p>What I’ve found really isn’t that exciting. There are a few commonalities among the corpus - such as a vacation or time off on the horizon, a date night with my wife, a fun event with one of my kids is coming, etc. But as I dug deeper into my Day One journal archives, I began to realize that I typically only journal when I’m at a high point.</p>\n\n<p>This was convenient for my current investigation, but the reality is that I couldn’t really nail down why sometimes I take time for myself, and other times I don’t. This time, I’d have to accept that this wasn’t a problem I could analyze several different ways and apply a few late nights to eventually uncover the answer to.</p>\n\n<blockquote>\n  <p>As a funny aside, when I was digging through my journal during this time my wife popped around the corner and casually asked “Watcha doin?”. I said I was simply reading my journal, as saying I was in the middle of an in-depth investigation into why I can let myself relax enough to make pancakes and generally be normal was too odd of an answer.</p>\n</blockquote>\n\n<p>The truth is that taking time to enjoy life’s many simple pleasures isn’t something that’s a trivial matter. If it was, there wouldn’t be numerous books, conferences or classes explaining how to do it. This blog post certainly doesn’t offer up the silver bullet either.</p>\n\n<p>What we can do, then, is simply take our own advice - <em>savor</em> and <em>enjoy</em> those little “pancake” moments when they come. Even if we can’t replicate them systemically, we can take heart that there is assuredly another one on the horizon.</p>\n\n<p>Conversely, just as important is being sure not to put them off. If you do, you’re the lucky winner of free conference tickets to BurnOut Conf. Neglecting some time for yourself is like putting a band-aid over a bullet hole. Eventually, you’re gonna feel it.</p>\n\n<h3 id=\"wrapping-up\">Wrapping Up</h3>\n<p>As indie developers, we find ourselves punishing our drive and a perceived lack-thereof if we don’t spend each free moment working towards our app, but then we put ourselves into a mental rut if we always do. But honestly, I’m kinda okay with life’s ebbs and flows - enjoying the times when I’m magnificently firing on all cylinders and all is in order, as much as the chaotic weeks where I feel like everything is just not working out.</p>\n\n<p>This isn’t a novel, new or groundbreaking realization. In fact, any of your favorite authors found on the interwebs have likely written about it in their own way at some point.</p>\n\n<p>And yet - so often I find myself needing to be reminded of it.</p>\n\n<p>So if I may be so bold, perhaps you don’t need a huge life change, to work constantly to ship the side project, or read a self help book while implementing some other drastic change (or maybe you do, that’s cool too honestly).</p>\n\n<p>Maybe you just need to make some freakin’ pancakes 🥞.</p>\n\n<p>Until next time ✌️.</p>",
            "summary": "Wouldn’t you know it - today I made some pancakes for breakfast. I know, I know - pics or it didn’t happen:",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2019-04-02T00:00:00-05:00",
            "date_modified": "2019-04-02T00:00:00-05:00",
            "author": {
              "name": {"twitter":"jordanmorgan10","picture":"/assets/images/about/headshot.jpeg"}},
            "tags": ["The Indie Dev Diaries"]},{
            "id": "http://localhost:4000/iCloud-Photo-Handling",
            "url": "http://localhost:4000/iCloud-Photo-Handling/",
            "title": "Handling iCloud Assets",
            "content_html": "<p>There is a reason Cupertino &amp; Friends© encourage us to leverage UIKit and its components in our own apps.</p>\n\n<p>They have a decade’s worth of talent and hardening baked right into them. While you should stray from a mechanism that can undermine your own structure, sometimes you just need to roll up your sleeves, toss Apple’s preheated solutions to the side and do it yourself. Building your own version of component X or Y is fatalistic in software development, after all.</p>\n\n<p>That’s where we find ourselves this week. While <code class=\"highlighter-rouge\">UIImagePickerController</code> has a lot baked in and should be used most of the time, this post is about that <em>other</em> time.</p>\n\n<p>And, if you find yourself building a media picker, fetching assets found in iCloud can be deceptively tricky.</p>\n\n<h3 id=\"fetch-options\">Fetch Options</h3>\n<p>Everything in the Photos framework is generally vended via a manager singleton (i.e. <code class=\"highlighter-rouge\">PHImageManager</code>, <code class=\"highlighter-rouge\">PHCachingImageManager</code>) - and what you want to retrieve from them is specified in from an optional options object, <code class=\"highlighter-rouge\">PHFetchOptions</code>.</p>\n\n<p>Generally, if you ran this code and saw images getting piped back to you - it’d be easy to call it a day:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// In viewDidLoad</span>\n<span class=\"k\">let</span> <span class=\"nv\">mostRecentMedia</span> <span class=\"o\">=</span> <span class=\"kt\">PHFetchOptions</span><span class=\"p\">()</span>\n<span class=\"n\">mostRecentMedia</span><span class=\"o\">.</span><span class=\"n\">sortDescriptors</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">NSSortDescriptor</span><span class=\"p\">(</span><span class=\"nv\">key</span><span class=\"p\">:</span> <span class=\"s\">\"creationDate\"</span><span class=\"p\">,</span> <span class=\"nv\">ascending</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">)]</span>\n<span class=\"k\">let</span> <span class=\"nv\">allPhotos</span><span class=\"p\">:</span><span class=\"kt\">PHFetchResult</span> <span class=\"o\">=</span> <span class=\"kt\">PHAsset</span><span class=\"o\">.</span><span class=\"nf\">fetchAssets</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"n\">mostRecentMedia</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// In a cellForRow for a collection or table view</span>\n<span class=\"k\">let</span> <span class=\"nv\">asset</span> <span class=\"o\">=</span> <span class=\"n\">allPhotos</span><span class=\"o\">.</span><span class=\"nf\">object</span><span class=\"p\">(</span><span class=\"nv\">at</span><span class=\"p\">:</span> <span class=\"n\">indexPath</span><span class=\"o\">.</span><span class=\"n\">item</span><span class=\"p\">)</span>\n<span class=\"k\">let</span> <span class=\"nv\">size</span> <span class=\"o\">=</span> <span class=\"kt\">CGSize</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">80</span><span class=\"p\">)</span>\n\n<span class=\"kt\">PHCachingImageManager</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">requestImage</span><span class=\"p\">(</span><span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"n\">asset</span><span class=\"p\">,</span> <span class=\"nv\">targetSize</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"nv\">contentMode</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">aspectFill</span><span class=\"p\">,</span> <span class=\"nv\">options</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">,</span> <span class=\"nv\">resultHandler</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"k\">in</span>\n    <span class=\"c1\">// Ensure we're dealing with the same cell when the asset returns</span>\n    <span class=\"c1\">// In case its since been recycled</span>\n    <span class=\"k\">if</span> <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">localAssetID</span> <span class=\"o\">==</span> <span class=\"n\">asset</span><span class=\"o\">.</span><span class=\"n\">localIdentifier</span> \n    <span class=\"p\">{</span>\n        <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">theImageViewImage</span> <span class=\"o\">=</span> <span class=\"n\">image</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</code></pre></div></div>\n<p>While the Photos Framework does benefit from sensible API design, it’s a somewhat hidden forgone conclusion that media living in iCloud will be staying there from the previous code sample. Adding to the possible confusion is that they will technically appear from the fetch, as their corresponding <code class=\"highlighter-rouge\">PHAsset</code> will be returned - it’s just that looking for the media yields no result:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">PHCachingImageManager</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">requestImage</span><span class=\"p\">(</span><span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"n\">asset</span><span class=\"p\">,</span> <span class=\"nv\">targetSize</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"nv\">contentMode</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">aspectFill</span><span class=\"p\">,</span> <span class=\"nv\">options</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">,</span> <span class=\"nv\">resultHandler</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"k\">in</span>\n    <span class=\"k\">if</span> <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">localAssetID</span> <span class=\"o\">==</span> <span class=\"n\">asset</span><span class=\"o\">.</span><span class=\"n\">localIdentifier</span> \n    <span class=\"p\">{</span>\n        <span class=\"c1\">// Media found in iCloud will report a nil result for the image here</span>\n        <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">theImageViewImage</span> <span class=\"o\">=</span> <span class=\"n\">image</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</code></pre></div></div>\n<p>Considering fetching an image’s common use case, such as displaying them in a grid, you can add other common bugs to this scenario as well such as cell reuse.</p>\n\n<p>Lipso facto - if you ran this code and saw no images being populated even though assets were being fetched, it can be hard to know where to look.</p>\n\n<h3 id=\"in-the-clouds\">In the Clouds</h3>\n<p>The first step to solving a problem isn’t really admitting you have one in programming, it’s identifying really what you’re trying to solve to begin with. And here, we need to know how to identify which assets are indeed housed within iCloud and not yet on the device.</p>\n\n<p>Hitting the Googles can yield some straight up wild solutions, partly due to the fact that Apple doesn’t have a simple <code class=\"highlighter-rouge\">isIniCloud</code> boolean to indicate as much. The answer for us is housed within the <code class=\"highlighter-rouge\">info</code> dictionary that pervades much of UIKit’s closures.</p>\n\n<p>For our previous fetch, we can reliably know if the asset is in iCloud via the <code class=\"highlighter-rouge\">PHImageResultIsInCloudKey</code> key that will be returned in the aforementioned dictionary:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">PHCachingImageManager</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">requestImage</span><span class=\"p\">(</span><span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"n\">asset</span><span class=\"p\">,</span> <span class=\"nv\">targetSize</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"nv\">contentMode</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">aspectFill</span><span class=\"p\">,</span> <span class=\"nv\">options</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">,</span> <span class=\"nv\">resultHandler</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">info</span> <span class=\"k\">in</span>\n    <span class=\"k\">if</span> <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">localAssetID</span> <span class=\"o\">==</span> <span class=\"n\">asset</span><span class=\"o\">.</span><span class=\"n\">localIdentifier</span> \n    <span class=\"p\">{</span>\n        <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">img</span> <span class=\"o\">=</span> <span class=\"n\">image</span> <span class=\"k\">else</span> \n        <span class=\"p\">{</span> \n            <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">isIniCloud</span> <span class=\"o\">=</span> <span class=\"n\">info</span><span class=\"p\">?[</span><span class=\"kt\">PHImageResultIsInCloudKey</span><span class=\"p\">]</span> <span class=\"k\">as?</span> <span class=\"kt\">NSNumber</span><span class=\"p\">,</span> <span class=\"n\">isIniCloud</span><span class=\"o\">.</span><span class=\"n\">boolValue</span> <span class=\"o\">==</span> <span class=\"kc\">true</span>\n            <span class=\"p\">{</span>\n                <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"nf\">showLoadingFromCloudUI</span><span class=\"p\">()</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"k\">return</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">theImageViewImage</span> <span class=\"o\">=</span> <span class=\"n\">img</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</code></pre></div></div>\n\n<p>Now, we’ve provided clarity to the user to at least know why media isn’t displaying for a particular item. Progress.</p>\n\n<h3 id=\"hot-reloads\">Hot Reloads</h3>\n<p>Assuming we’re in a collection or table view situation here, what we’d see now is that we’ve identified the asset is in iCloud, and we could even track its progression and see it successfully download. As with the fetch, we can get this done by using another options construct, namely <code class=\"highlighter-rouge\">PHImageRequestOptions</code>:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">reqOptions</span> <span class=\"o\">=</span> <span class=\"kt\">PHImageRequestOptions</span><span class=\"p\">()</span>\n<span class=\"n\">reqOptions</span><span class=\"o\">.</span><span class=\"n\">isNetworkAccessAllowed</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n<span class=\"n\">reqOptions</span><span class=\"o\">.</span><span class=\"n\">progressHandler</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">progress</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Asset download progress is at </span><span class=\"se\">\\(</span><span class=\"n\">progress</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">PHCachingImageManager</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">requestImage</span><span class=\"p\">(</span><span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"n\">asset</span><span class=\"p\">,</span> <span class=\"nv\">targetSize</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"nv\">contentMode</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">aspectFill</span><span class=\"p\">,</span> <span class=\"nv\">options</span><span class=\"p\">:</span> <span class=\"n\">reqOptions</span><span class=\"p\">,</span> <span class=\"nv\">resultHandler</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">info</span> <span class=\"k\">in</span>\n    <span class=\"k\">if</span> <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">localAssetID</span> <span class=\"o\">==</span> <span class=\"n\">asset</span><span class=\"o\">.</span><span class=\"n\">localIdentifier</span> \n    <span class=\"p\">{</span>\n        <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">img</span> <span class=\"o\">=</span> <span class=\"n\">image</span> <span class=\"k\">else</span> \n        <span class=\"p\">{</span> \n            <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">isIniCloud</span> <span class=\"o\">=</span> <span class=\"n\">info</span><span class=\"p\">?[</span><span class=\"kt\">PHImageResultIsInCloudKey</span><span class=\"p\">]</span> <span class=\"k\">as?</span> <span class=\"kt\">NSNumber</span><span class=\"p\">,</span> <span class=\"n\">isIniCloud</span><span class=\"o\">.</span><span class=\"n\">boolValue</span> <span class=\"o\">==</span> <span class=\"kc\">true</span>\n            <span class=\"p\">{</span>\n                <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"nf\">showLoadingFromCloudUI</span><span class=\"p\">()</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"k\">return</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">theImageViewImage</span> <span class=\"o\">=</span> <span class=\"n\">img</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>Though documentation states that one needs to set <code class=\"highlighter-rouge\">isNetworkAccessAllowed</code>\nto <code class=\"highlighter-rouge\">true</code> for this to work, I’ve seen it done without using it.</p>\n</blockquote>\n\n<p>One could be potentially flummoxed if they were to see these downloads complete, yet their asset request doesn’t do anything after the fact. Do you need to request the asset again? Why would it show up if you were to scroll the collection or table view up and down again?</p>\n\n<ol>\n  <li>Yes, and no.</li>\n  <li>It would, because now the asset is in memory.</li>\n</ol>\n\n<p>The answer to this scenario is in the docs, but it’s a blink and you’ll miss it comment at the end of a document describing how to request user access to media:</p>\n\n<blockquote>\n  <p>Use the register(_:) method to observe photo library changes before fetching content. After the user grants your app access to the photo library, Photos sends change messages for any empty fetch results you retrieved earlier, notifying you that library content for those fetches is now available.</p>\n</blockquote>\n\n<p>Photo libraries can mutate at any point, so the key for developers who are making their home baked media picker is to react to those changes. You can do so by adopting the <code class=\"highlighter-rouge\">PHPhotoLibraryChangeObserver</code> protocol and implementing only one method.</p>\n\n<p>Before we go and snag media from the user, it’s pertinent to register for changes in the library first:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">PHPhotoLibrary</span><span class=\"o\">.</span><span class=\"nf\">shared</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">register</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>…and then adopt <code class=\"highlighter-rouge\">func photoLibraryDidChange(_ changeInstance: PHChange)</code>. As I’m not one to reinvent the wheel, Apple has a perfect example of how #todothisright within their Photos documentation:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">photoLibraryDidChange</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">changeInstance</span><span class=\"p\">:</span> <span class=\"kt\">PHChange</span><span class=\"p\">)</span> \n<span class=\"p\">{</span>\n    <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">changes</span> <span class=\"o\">=</span> <span class=\"n\">changeInstance</span><span class=\"o\">.</span><span class=\"nf\">changeDetails</span><span class=\"p\">(</span><span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"n\">fetchResult</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"p\">}</span>\n\n    <span class=\"c1\">// Change notifications may originate from a background queue.</span>\n    <span class=\"c1\">// As such, re-dispatch execution to the main queue before acting</span>\n    <span class=\"c1\">// on the change, so you can update the UI.</span>\n    <span class=\"kt\">DispatchQueue</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">sync</span> \n    <span class=\"p\">{</span>\n        <span class=\"c1\">// Hang on to the new fetch result.</span>\n        <span class=\"n\">fetchResult</span> <span class=\"o\">=</span> <span class=\"n\">changes</span><span class=\"o\">.</span><span class=\"n\">fetchResultAfterChanges</span>\n\n        <span class=\"c1\">// If we have incremental changes, animate them in the collection view.</span>\n        <span class=\"k\">if</span> <span class=\"n\">changes</span><span class=\"o\">.</span><span class=\"n\">hasIncrementalChanges</span> \n        <span class=\"p\">{</span>\n            <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">collectionView</span> <span class=\"o\">=</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">collectionView</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"nf\">fatalError</span><span class=\"p\">()</span> <span class=\"p\">}</span>\n            <span class=\"c1\">// Handle removals, insertions, and moves in a batch update.</span>\n            <span class=\"n\">collectionView</span><span class=\"o\">.</span><span class=\"nf\">performBatchUpdates</span><span class=\"p\">({</span>\n                <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">removed</span> <span class=\"o\">=</span> <span class=\"n\">changes</span><span class=\"o\">.</span><span class=\"n\">removedIndexes</span><span class=\"p\">,</span> <span class=\"o\">!</span><span class=\"n\">removed</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span> \n                <span class=\"p\">{</span>\n                    <span class=\"n\">collectionView</span><span class=\"o\">.</span><span class=\"nf\">deleteItems</span><span class=\"p\">(</span><span class=\"nv\">at</span><span class=\"p\">:</span> <span class=\"n\">removed</span><span class=\"o\">.</span><span class=\"nf\">map</span><span class=\"p\">({</span> <span class=\"kt\">IndexPath</span><span class=\"p\">(</span><span class=\"nv\">item</span><span class=\"p\">:</span> <span class=\"nv\">$0</span><span class=\"p\">,</span> <span class=\"nv\">section</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">}))</span>\n                <span class=\"p\">}</span>\n                <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">inserted</span> <span class=\"o\">=</span> <span class=\"n\">changes</span><span class=\"o\">.</span><span class=\"n\">insertedIndexes</span><span class=\"p\">,</span> <span class=\"o\">!</span><span class=\"n\">inserted</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span> \n                <span class=\"p\">{</span>\n                    <span class=\"n\">collectionView</span><span class=\"o\">.</span><span class=\"nf\">insertItems</span><span class=\"p\">(</span><span class=\"nv\">at</span><span class=\"p\">:</span> <span class=\"n\">inserted</span><span class=\"o\">.</span><span class=\"nf\">map</span><span class=\"p\">({</span> <span class=\"kt\">IndexPath</span><span class=\"p\">(</span><span class=\"nv\">item</span><span class=\"p\">:</span> <span class=\"nv\">$0</span><span class=\"p\">,</span> <span class=\"nv\">section</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">}))</span>\n                <span class=\"p\">}</span>\n                <span class=\"n\">changes</span><span class=\"o\">.</span><span class=\"n\">enumerateMoves</span> <span class=\"p\">{</span> <span class=\"n\">fromIndex</span><span class=\"p\">,</span> <span class=\"n\">toIndex</span> <span class=\"k\">in</span>\n                    <span class=\"n\">collectionView</span><span class=\"o\">.</span><span class=\"nf\">moveItem</span><span class=\"p\">(</span><span class=\"nv\">at</span><span class=\"p\">:</span> <span class=\"kt\">IndexPath</span><span class=\"p\">(</span><span class=\"nv\">item</span><span class=\"p\">:</span> <span class=\"n\">fromIndex</span><span class=\"p\">,</span> <span class=\"nv\">section</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n                                            <span class=\"nv\">to</span><span class=\"p\">:</span> <span class=\"kt\">IndexPath</span><span class=\"p\">(</span><span class=\"nv\">item</span><span class=\"p\">:</span> <span class=\"n\">toIndex</span><span class=\"p\">,</span> <span class=\"nv\">section</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">})</span>\n            <span class=\"c1\">// We are reloading items after the batch update since `PHFetchResultChangeDetails.changedIndexes` refers to</span>\n            <span class=\"c1\">// items in the *after* state and not the *before* state as expected by `performBatchUpdates(_:completion:)`.</span>\n            <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">changed</span> <span class=\"o\">=</span> <span class=\"n\">changes</span><span class=\"o\">.</span><span class=\"n\">changedIndexes</span><span class=\"p\">,</span> <span class=\"o\">!</span><span class=\"n\">changed</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span> \n            <span class=\"p\">{</span>\n                <span class=\"n\">collectionView</span><span class=\"o\">.</span><span class=\"nf\">reloadItems</span><span class=\"p\">(</span><span class=\"nv\">at</span><span class=\"p\">:</span> <span class=\"n\">changed</span><span class=\"o\">.</span><span class=\"nf\">map</span><span class=\"p\">({</span> <span class=\"kt\">IndexPath</span><span class=\"p\">(</span><span class=\"nv\">item</span><span class=\"p\">:</span> <span class=\"nv\">$0</span><span class=\"p\">,</span> <span class=\"nv\">section</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">}))</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span> \n        <span class=\"k\">else</span> \n        <span class=\"p\">{</span>\n            <span class=\"c1\">// Reload the collection view if incremental changes are not available.</span>\n            <span class=\"n\">collectionView</span><span class=\"o\">.</span><span class=\"nf\">reloadData</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>With this tweak in place - you’ll find that when an asset is fetched from iCloud, a change notification spins up and a fetch result reports a change (or possibly no change). Using batch updates, your collection or table view will reload and have the asset ready to go.</p>\n\n<p>To recap - here’s the recipe to make this all tick:</p>\n\n<ol>\n  <li>Register for changes before you fetch anything.</li>\n  <li>Conform to <code class=\"highlighter-rouge\">PHPhotoLibraryChangeObserver</code></li>\n  <li>Refresh your datasource, look for changes and load those up within <code class=\"highlighter-rouge\">func photoLibraryDidChange(_ changeInstance: PHChange)</code></li>\n  <li>Using <code class=\"highlighter-rouge\">PHImageRequestOptions</code>, specify that you’ll opt into network downloads for fetches.</li>\n  <li>Check if the image is in iCloud during the fetch, if it is - indicate as much in the user interface. Optional, but I think it’s necessary.</li>\n  <li>Unregister yourself when your object should be freed from memory.</li>\n</ol>\n\n<h3 id=\"wrapping-up\">Wrapping Up</h3>\n<p>Ten years ago, the future was the cloud. Five years ago, it became a mature, saturated market. Today, it’s not uncommon for the most vanilla of our user base to use it in some capacity. As such - a lot of media can be found hanging out up there in 2019.</p>\n\n<p>Ensuring that our own home rolled solutions outside of <code class=\"highlighter-rouge\">UIImagePickerController</code> can retrieve them, communicate its progress of doing so and then displaying the end result is a baseline expectation at this point. Though it requires a bit of know-how, the code doesn’t yield a massive time commitment when weighed against its payoff.</p>\n\n<p>Until next time ✌️.</p>",
            "summary": "There is a reason Cupertino &amp; Friends© encourage us to leverage UIKit and its components in our own apps.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2019-03-27T00:00:00-05:00",
            "date_modified": "2019-03-27T00:00:00-05:00",
            "author": {
              "name": {"twitter":"jordanmorgan10","picture":"/assets/images/about/headshot.jpeg"}},
            "tags": ["Photos"]},{
            "id": "http://localhost:4000/A-Best-in-Class-App",
            "url": "http://localhost:4000/A-Best-in-Class-App/",
            "title": "A Best in Class iOS App",
            "content_html": "<p>For as long as I’ve been a part of this industry, I’ve watched incredible, well-deserving apps take home an Apple Design Award. And <em>that’s</em> my endgame.</p>\n\n<p>So, years ago, I set out to create a list that succinctly answers only one question:</p>\n\n<p><strong>What things can I quantify that help make an app great?</strong></p>\n\n<p>I believe I’ve created such a list that helps answer that question. Yours might look different, but this one is mine. It attempts to takes all of the emotion and (mostly) opinions out of it. I want to capture what Apple says is great, not what other people may define it as. Though those opinions can assuredly be of value, they don’t give out A.D.A.s - only Apple does.</p>\n\n<p>Here’s a quick brief on my methodology behind how I created it:</p>\n\n<ul>\n  <li>First, and most importantly, I read iOS’ Human Interface Guidelines annually from top to bottom after the GM releases of the upcoming version of iOS.</li>\n  <li>Where there’s smoke, there’s fire. If Apple has said on record that “This is great” about an app, I include whatever that thing or interaction was. These things aren’t clandestine trade secrets, but rather they are things that Apple or an Apple design evangelist publicly gave their seal of approval to.</li>\n</ul>\n\n<p>That’s it.</p>\n\n<blockquote>\n  <p>As always, if you’ve got an item or two that belongs on this list, by all means create a pull request to get it added in by visiting the link at the bottom of the post.</p>\n</blockquote>\n\n<p>The five sections it covers are:</p>\n\n<ol>\n  <li><strong>Accessibility:</strong> Designing for everyone is the right thing to do, and the best apps do it and they do it exceptionally well.</li>\n  <li><strong>Platform Technology:</strong> Apple loves it when apps utilize their new APIs to great effect, you should too. It’s not about shoehorning features, it’s about looking at your product and seeing how to utilize iOS around it.</li>\n  <li><strong>User Experience:</strong> Don’t make people think. Your app should have a core function that acts a thesis to a paper - and your UX is the body that supports it.</li>\n  <li><strong>Design:</strong> Explaining design is hard, but you know a good one when you see it. This section lists some things those apps which are thoughtfully created do.</li>\n  <li><strong>App Store Presence</strong> This is by far the most nascent category I’ve been tracking, so its list is short. It includes best practices for the App Store.</li>\n</ol>\n\n<h3 id=\"accessibility-is-first-class\">Accessibility is First Class</h3>\n<ul>\n  <li>Voice Over is fully supported and the rotor control is implemented by including the relevant headings. Using Screen Curtain yields an experience that’s not only usable, but up to par with the regular app using only Voice Over.</li>\n  <li><a href=\"https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/SupportingAccessibility.html\" target=\"_blank\">Voice Over gestures</a> are overriden where necessary:\n    <ul>\n      <li><strong><a href=\"https://developer.apple.com/documentation/objectivec/nsobject/1615091-accessibilityperformescape\" target=\"_blank\">Escape</a></strong>: A two-finger Z-shaped gesture that dismisses a modal dialog, or goes back one level in a navigation hierarchy.\n        <ul>\n          <li><code class=\"highlighter-rouge\">func accessibilityPerformEscape() -&gt; Bool</code></li>\n        </ul>\n      </li>\n      <li><strong><a href=\"https://developer.apple.com/documentation/objectivec/nsobject/1615137-accessibilityperformmagictap\" target=\"_blank\">Magic Tap</a></strong>: A two-finger double-tap that performs the most-intended action.\n        <ul>\n          <li><code class=\"highlighter-rouge\">func accessibilityPerformMagicTap() -&gt; Bool</code></li>\n        </ul>\n      </li>\n      <li><strong><a href=\"https://developer.apple.com/documentation/objectivec/nsobject/1615161-accessibilityscroll\" target=\"_blank\">Three-Finger Scroll</a></strong>: A three-finger swipe that scrolls content vertically or horizontally.\n        <ul>\n          <li><code class=\"highlighter-rouge\">func accessibilityScroll(_ direction: UIAccessibilityScrollDirection) -&gt; Bool</code></li>\n        </ul>\n      </li>\n      <li><strong><a href=\"https://developer.apple.com/documentation/objectivec/nsobject/1615076-accessibilityincrement\" target=\"_blank\">Increment</a></strong>: A one-finger swipe up that increments a value in an element.\n        <ul>\n          <li><code class=\"highlighter-rouge\">func accessibilityIncrement()</code></li>\n        </ul>\n      </li>\n      <li><strong><a href=\"https://developer.apple.com/documentation/objectivec/nsobject/1615169-accessibilitydecrement\" target=\"_blank\">Decrement</a></strong>: A one-finger swipe down that decrements a value in an element.\n        <ul>\n          <li><code class=\"highlighter-rouge\">func accessibilityDecrement()</code></li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n  <li>When presenting new controllers, you set the Voice Over Cursor to an <a href=\"https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/SupportingAccessibility.html#//apple_ref/doc/uid/TP40007457-CH12-SW1\" target=\"_blank\">appropriate element</a> if the top-most left element doesn’t make sense:\n  <code class=\"highlighter-rouge\">UIAccessibilityPostNotification(.screenChangedNotification, myHeading);</code></li>\n  <li>Context considering, you use <code class=\"highlighter-rouge\">accessibilityIgnoresInvertColors</code> for images and video.</li>\n  <li>Respects reduced motion and blurring user preferences.</li>\n  <li>Adaptive and supports all devices and multitasking scenarios elegantly.</li>\n  <li>Fully supports dynamic type.</li>\n  <li>Readable text uses <code class=\"highlighter-rouge\">readableContentGuide</code>.</li>\n  <li>Color blind support and a 7:1 color contrast ratio.</li>\n  <li>Smart Invert Color Support and the app responds well to color inversion.</li>\n  <li>All bar buttons have their landscapeImagePhone and largeContentSizeImage properties set.</li>\n  <li>All glyphs have their accessibility images set (i.e. <code class=\"highlighter-rouge\">adjustsImageSizeForAccessibilityContentSizeCategory</code>).</li>\n  <li>Includes closed captions and audio descriptions, all images and icons have alternative text set.</li>\n  <li>Leading and trailing margins are used for constraints to support left to right languages.</li>\n  <li>The User Interface appears flawlessly when tested using Double Length Pseudo-languages.</li>\n  <li>Using <code class=\"highlighter-rouge\">NSShowNonLocalizedStrings</code> yields no results.</li>\n  <li>If you support drag and drop, <a href=\"https://developer.apple.com/videos/play/wwdc2018/241/\">UIAccessibilityLocationDescriptors</a> are all set.</li>\n  <li>Magic taps are supported for the app’s most common functionality.</li>\n  <li>It uses <code class=\"highlighter-rouge\">CFBundleSpokenName</code> if the app’s name could potentially be mispronounced by the system (i..e CoolApp23 would be “CoolApp Twenty Three”).</li>\n  <li>Lastly, running the entire app through Accessibility Inspector produced no warnings and turning on Screen Curtain to navigate the app works flawlessly.</li>\n</ul>\n\n<h3 id=\"ios-technology-is-tightly-integrated\">iOS Technology is Tightly Integrated</h3>\n<ul>\n  <li>3D Touch is integrated (Peeks, home shortcuts, quick actions and interaction delegate for unique experiences).</li>\n  <li>Spotlight search and indexing support.</li>\n  <li>Effective energy management (i.e. supports low power mode and reacts to it)</li>\n  <li>Keyboard shortcuts have been added. The app could be used almost, or completely, with solely the use of a keyboard.</li>\n  <li>It supports handoff on Mac (if applicable).</li>\n  <li>Meaningful extensions are included with the app, whether it’s via a share extension, action extension, etc.</li>\n  <li>Callback urls are supplied and documented so other apps may integrate with it (x-callback-url)/.</li>\n  <li>Siri Intent support, when plausible:\n    <ul>\n      <li>Also include intent phrases to help coach users</li>\n      <li>Alternate app names are included when appropriate</li>\n      <li>Watchface support</li>\n    </ul>\n  </li>\n  <li>If it makes sense, document sharing is supported via the file provider.</li>\n  <li>Drag and drop has first class support:\n    <ul>\n      <li>A fully fleshed out <code class=\"highlighter-rouge\">NSItemProvider</code> exists for custom objects.</li>\n      <li>Purposeful external and internal app drag support.</li>\n      <li>This is used for reordering, should the app support it.</li>\n    </ul>\n  </li>\n  <li>If it makes sense, data can be shared via AirDrop.</li>\n  <li>Natural language processing support if necessary.</li>\n  <li>All tab bar images are vector .pdf images or have each corresponding size included to ensure they adapt correctly and are vended to accessibility modals properly.</li>\n  <li>Any displayed Live Photo will animate when force touched and utilize <code class=\"highlighter-rouge\">PHLivePhotoImageView</code> for playback.</li>\n  <li>Each image also shows their system badge if available (i.e. live photo badges).</li>\n  <li>If it makes sense, it supports printing via <code class=\"highlighter-rouge\">UIPrintInteractionController</code>.</li>\n  <li>Has Siri Shortcuts supported or donated.</li>\n  <li>Running the Analyze function in Xcode yields no errors, warnings or suggestions.</li>\n  <li>There are no calls to <code class=\"highlighter-rouge\">UIGraphicsBeginImageContextWithOptions</code>, and <code class=\"highlighter-rouge\">UIGraphicsImageRenderer</code> is used instead.</li>\n  <li><a href=\"https://developer.apple.com/library/archive/documentation/General/Conceptual/AppSearch/WebContent.html#//apple_ref/doc/uid/TP40016308-CH8-SW1\">Universal Links</a> are supported, especially if your app’s content is available online.</li>\n</ul>\n\n<h3 id=\"the-user-experience-is-top-of-mind\">The User Experience is Top of Mind</h3>\n<ul>\n  <li>Supports <a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/UndoArchitecture/UndoArchitecture.html\">native</a> “undo” and “redo” actions, typically from shaking.</li>\n  <li>The content type of all text views and text fields is included, and the correct keyboard type is used for the current context. The keyboard’s language identifier is integrated correctly.</li>\n  <li>Handles the keyboard being undocked on the iPad, if views are constrained to it via an <code class=\"highlighter-rouge\">inputAccessoryView</code>.</li>\n  <li>If data is quantifiable while data transfer is occurring, a progress indicator is used over an activity indicator.</li>\n  <li>It’s localized for all territories it’s released in.</li>\n  <li>Text tends to not truncate and it <em>never</em> clips but rather it’s always readable.</li>\n  <li>All tappable interface elements are at least 44 by 44 points.</li>\n  <li>The entire app binary is under 30 megabytes. (<em>No source here, this is based off a multitude of data points.</em>)</li>\n  <li>Delete actions always are followed by a confirmation prompt.</li>\n  <li>If your app stores rich information files like a Keynote presentation, it uses the Quick Look API to preview it.</li>\n  <li><a href=\"https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/StrategiesforImplementingYourApp/StrategiesforImplementingYourApp.html#//apple_ref/doc/uid/TP40007072-CH5-SW2\">State restoration</a> is implemented (UIStateRestoration).</li>\n  <li>It uses the correct audio settings, if audio can be played at all within it.</li>\n  <li>Custom edit options are supported when text or an image is selected, if appropriate.</li>\n  <li>The user is provided ample time to form an opinion about your app before you request a rating for it.</li>\n  <li>The launch screen is branding free and closely resembles the first screen of the app.</li>\n  <li>Before opening a link that could lead to another app in a web view or <code class=\"highlighter-rouge\">SFSafariViewController</code>, try calling <code class=\"highlighter-rouge\">UIApplication</code>’s <code class=\"highlighter-rouge\">openURL:</code> with the <a href=\"https://recoursive.com/2019/02/22/preflight_universal_links/\" target=\"_blank\"><code class=\"highlighter-rouge\">UIApplicationOpenURLOptionUniversalLinksOnly</code></a>option first.</li>\n  <li>Table views deselect selected rows in <a href=\"https://gist.github.com/smileyborg/ec4812c146f575cd006d98d681108ba8\">viewDidAppear</a> when popping back to them.</li>\n  <li>Notifications supply a value for <a href=\"https://developer.apple.com/documentation/usernotifications/unnotificationcategory/2873736-hiddenpreviewsbodyplaceholder\">hiddenPreviewsBodyPlaceholder</a> and a detail view.</li>\n  <li><code class=\"highlighter-rouge\">UITextInputAssistantItem</code> items are used to support common tasks on iPad that are at home within the shortcuts bar.</li>\n  <li>When performing CRUD operations on a table or collection view, you opt to use <code class=\"highlighter-rouge\">performBatchUpdates:</code> instead of <code class=\"highlighter-rouge\">reloadData</code>.</li>\n  <li>Testing for leaks and freed memory is part of your workflow, as consuming an unnecessary amount of memory and power hampers everyone.</li>\n  <li>Navigation is clear and foolproof:\n    <ul>\n      <li>Modality is used sparingly, and clearly brings them back to where they were when dismissed.</li>\n    </ul>\n  </li>\n</ul>\n\n<h2 id=\"the-design-drips-with-polish\">The Design Drips with Polish</h2>\n<ul>\n  <li>Correct system margins are used throughout the app, and no hard coded ones are used (i.e. layoutMarginsGuide, safeAreaLayoutGuide, etc.)</li>\n  <li>Haptic feedback is used throughout the system to complement user interactions, and they are not overdone.</li>\n  <li>Controller transitions feel natural and fluid. Great examples are Calendar and Photos.</li>\n  <li>You opt for vector assets to combat the differing resolutions and avoid any blurry assets.</li>\n  <li>Your content is always the focus, and you constantly challenge if that’s true throughout the development cycles.</li>\n  <li>Particular and specific user experience guidelines are followed:\n    <ul>\n      <li>No segment controls are used in toolbars.</li>\n      <li>There are no toolbars and tab bars in the same screen.</li>\n      <li>Destructive actions are the top choice in action sheets.</li>\n      <li>Alerts, if used, ideally have to two choices and titles have no punctuation. They avoid using Yes and No as choices.</li>\n      <li>Any picker’s height is equal to about 5 list values.</li>\n      <li>If a progress indicator is in a bar, it should have the unfolded portion of the track clear. Otherwise, it is colored to denote the amount of work left to do.</li>\n      <li>Network activity indicators are only shown if the network requests lasts a few seconds or more.</li>\n      <li>Switches are exclusively used within a table row.</li>\n    </ul>\n  </li>\n  <li>You aspire to ship on all of Apple’s platforms (iOS iPhone + iPad, watchOS, tvOS and macOS).</li>\n  <li>Lastly, your app is “jank” free. You know what this means for you.</li>\n</ul>\n\n<h2 id=\"app-store-page-and-logistical-assets-are-thoughtfully-crafted\">App Store Page and Logistical Assets are Thoughtfully Crafted</h2>\n<ul>\n  <li>An App Store preview video is used.</li>\n  <li>Its keywords and category were carefully researched.</li>\n  <li>The app icon follows the golden grid:\n    <ul>\n      <li>It likely should include your brand’s primary color as well.</li>\n    </ul>\n  </li>\n</ul>\n\n<h3 id=\"wrapping-up\">Wrapping Up</h3>\n<p>I love checklists. And this is my quality checklist that’s constantly evolving. My side project will ship in a state where it meets or exceeds almost every single bullet point.</p>\n\n<p>Certainly, quality takes time. If you nailed everything on this list, it’s because you’ve been working towards them for years. If you aren’t close to meeting the items listed here, no stress (it also means you probably shipped!). Take it piece by piece and work your way down.</p>\n\n<p>And, as a wise honey-loving bear once said, “I get to where I’m going by walking away from where I’ve been.” If your app might lack some polish, better now more than ever to spend some time giving it some.</p>\n\n<p>Until next time ✌️.</p>",
            "summary": "For as long as I’ve been a part of this industry, I’ve watched incredible, well-deserving apps take home an Apple Design Award. And that’s my endgame.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2019-02-25T00:00:00-06:00",
            "date_modified": "2019-02-25T00:00:00-06:00",
            "author": {
              "name": {"twitter":"jordanmorgan10","picture":"/assets/images/about/headshot.jpeg"}},
            "tags": ["The Indie Dev Diaries"]},{
            "id": "http://localhost:4000/NS_CLOSED_ENUM",
            "url": "http://localhost:4000/NS_CLOSED_ENUM/",
            "title": "NS_CLOSED_ENUM",
            "content_html": "<p>There is but one constant in software engineering: change.</p>\n\n<p>New versions. Additional frameworks. Mutating requirements. Indecisive clients. Nascent patterns for emerging platforms.</p>\n\n<p>The outside factors will always pile in, and yet sitting within stark juxtaposition of this notion is that some code might not <em>ever</em> change. A prime candidate for such immutability? Enumerations.</p>\n\n<p>And now, thanks to the Swift compiler and Xcode 10.2, we can broadcast the future of any Objective-C enumeration with a higher degree of clarity.</p>\n\n<h3 id=\"frozen-and-unfrozen\">Frozen and Unfrozen</h3>\n<p>Far from moribund, Objective-C appears to gain new gadgets on an annual basis. However, a closer inspection reveals that all good things happening to the thirty-plus year old language are a direct result of bettering the Swift programming experience. So, it should come as no surprise that this macro was born primarily from <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0192-non-exhaustive-enums.md\" target=\"_blank\">Swift evolution proposal 0192</a>.</p>\n\n<p>The TL;DR is that the Swift community were considering how to effectively handle enumerations that would change, and those that wouldn’t. In programming parlance we consider this distinction as <em>frozen</em> and <em>unfrozen</em> enumerations.</p>\n\n<p>For an unfrozen enumeration (likely the lot of them), additional cases are likely coming in future API changes:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">typedef</span> <span class=\"kt\">NS_ENUM</span><span class=\"p\">(</span><span class=\"kt\">NSUInteger</span><span class=\"p\">,</span> <span class=\"kt\">AccountType</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">AccountTypeNew</span><span class=\"p\">,</span>\n    <span class=\"kt\">AccountTypeExisting</span><span class=\"p\">,</span>\n    <span class=\"kt\">AccountTypeUnknown</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// Later on, another case could be added</span>\n<span class=\"n\">typedef</span> <span class=\"kt\">NS_ENUM</span><span class=\"p\">(</span><span class=\"kt\">NSUInteger</span><span class=\"p\">,</span> <span class=\"kt\">AccountType</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">AccountTypeNew</span><span class=\"p\">,</span>\n    <span class=\"kt\">AccountTypeExisting</span><span class=\"p\">,</span>\n    <span class=\"kt\">AccountTypeMigrated</span><span class=\"p\">,</span>\n    <span class=\"kt\">AccountTypeUnknown</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>Whereas other situations call for a certain degree of finality, such as <code class=\"highlighter-rouge\">FloatingPointSign</code> from within the Swift Standard Library:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">sign</span><span class=\"p\">:</span><span class=\"kt\">FloatingPointSign</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">minus</span>\n\n<span class=\"k\">switch</span> <span class=\"n\">sign</span>\n<span class=\"p\">{</span>\n<span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">minus</span><span class=\"p\">:</span><span class=\"k\">break</span>\n<span class=\"k\">case</span><span class=\"o\">.</span><span class=\"nv\">plus</span><span class=\"p\">:</span><span class=\"k\">break</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"swiftly-business\">Swiftly Business</h3>\n<p>The differences in approach between the two languages are vast and wide when dealing with enumerations. Recall that Objective-C supports storing any value in an enumeration, so as long as it matches the underlying type:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">typedef</span> <span class=\"kt\">NS_ENUM</span><span class=\"p\">(</span><span class=\"kt\">NSUInteger</span><span class=\"p\">,</span> <span class=\"kt\">AccountType</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">AccountTypeNew</span><span class=\"p\">,</span>\n    <span class=\"kt\">AccountTypeExisting</span><span class=\"p\">,</span>\n    <span class=\"kt\">AccountTypeUnknown</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// Later on, assignment...</span>\n<span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">accountType</span> <span class=\"o\">=</span> <span class=\"mi\">934</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Or control flow...</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">accountType</span> <span class=\"o\">==</span> <span class=\"mi\">243</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">// It's all totally legal</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In Swift, that’s no fly zone territory:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Cannot assign value of type 'Int' to type 'AccountType'</span>\n<span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">accountType</span> <span class=\"o\">=</span> <span class=\"mi\">934</span>\n\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">accountType</span> <span class=\"o\">==</span> <span class=\"mi\">34</span><span class=\"p\">)</span> \n<span class=\"p\">{</span>\n        <span class=\"c1\">// This errs as well, unless one initializes an Int with the enum's rawValue.    </span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>But where things really become tightened up in Swift is within a <code class=\"highlighter-rouge\">switch</code>:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// If we omit default, we'll err since the switch isn't exhaustive. Or leave out a break.</span>\n<span class=\"k\">switch</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">accountType</span>\n<span class=\"p\">{</span>\n<span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">existing</span><span class=\"p\">:</span> <span class=\"k\">break</span>\n<span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">new</span><span class=\"p\">:</span> <span class=\"k\">break</span>\n<span class=\"k\">default</span><span class=\"p\">:</span> <span class=\"k\">break</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Here, Swift is the straight A student who buckles their seat belt before starting their engine. Objective-C wouldn’t mind driving blindfolded:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Really anything goes. Leave out a break. Don't use all the cases. Just whatever with a side of YOLO.</span>\n<span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">accountType</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"kt\">AccountTypeNew</span><span class=\"p\">:</span>\n    <span class=\"k\">default</span><span class=\"p\">:</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>And you can see where the issues come into play. Though we can’t do much in terms of safety with Objective-C, we can vend more intent to Swift consumers of their enumerations by marking them as either frozen or unfrozen. Doing so yields a subtle but welcome change for Swift API consumers.</p>\n\n<p>Enter NS_CLOSED_ENUM.</p>\n\n<h3 id=\"freezing-enumerations\">Freezing Enumerations</h3>\n<p>Though our account type example enumeration is ripe for future mutations, let’s consider one that isn’t:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">typedef</span> <span class=\"kt\">NS_CLOSED_ENUM</span><span class=\"p\">(</span><span class=\"kt\">NSUInteger</span><span class=\"p\">,</span> <span class=\"kt\">AccountStandingStatus</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">AccountStandingStatusFreeTrial</span><span class=\"p\">,</span>\n    <span class=\"kt\">AccountStandingStatusPaid</span><span class=\"p\">,</span>\n    <span class=\"kt\">AccountStandingStatusOwes</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n<p>Here, our business needs dictated that an account will ever only be in one of three states. Forever. When bridged over to Swift, usage might look like so:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">switch</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">accountStanding</span>\n<span class=\"p\">{</span>\n<span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">freeTrial</span><span class=\"p\">:</span><span class=\"k\">break</span>\n<span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">owes</span><span class=\"p\">:</span><span class=\"k\">break</span>\n<span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">paid</span><span class=\"p\">:</span><span class=\"k\">break</span>\n<span class=\"kd\">@unknown</span> <span class=\"k\">default</span><span class=\"p\">:</span><span class=\"k\">break</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>Note that a default case can’t alert the compiler that a particular enumeration has elements that aren’t explicitly handled in the switch. For this reason, Swift added a new attribute in Swift 4 for switches, @unknown. Using it will act as a huge safety net, a catch-all. A key difference is that a warning will still be produced to let developers know they’ve missed a case.</p>\n\n<p>That being said, intent is the most valued prize to engineers both from a maintainer’s perspective as well as a consumer’s one. Though @unknown is useful for letting one know they’ve missed a case; even better is to communicate that they don’t need a default case at all. YAGNI.</p>\n\n<p>We can use NS_CLOSED_ENUM here to signify things will, and forever more, stay the same:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">typedef</span> <span class=\"kt\">NS_CLOSED_ENUM</span><span class=\"p\">(</span><span class=\"kt\">NSUInteger</span><span class=\"p\">,</span> <span class=\"kt\">AccountStandingStatus</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">AccountStandingStatusFreeTrial</span><span class=\"p\">,</span>\n    <span class=\"kt\">AccountStandingStatusPaid</span><span class=\"p\">,</span>\n    <span class=\"kt\">AccountStandingStatusOwes</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>Now Swift can guarantee that the additional <code class=\"highlighter-rouge\">default</code> is unnecessary, but notice how no warning is generated for our unfrozen enumeration, <code class=\"highlighter-rouge\">AccountType</code>:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">account</span> <span class=\"o\">=</span> <span class=\"kt\">Account</span><span class=\"p\">()</span>\n<span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">accountType</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">existing</span>\n<span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">accountStanding</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">paid</span>\n\n<span class=\"k\">switch</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">accountType</span>\n<span class=\"p\">{</span>\n<span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">existing</span><span class=\"p\">:</span> <span class=\"k\">break</span>\n<span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">new</span><span class=\"p\">:</span> <span class=\"k\">break</span>\n<span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">unknown</span><span class=\"p\">:</span> <span class=\"k\">break</span>\n<span class=\"kd\">@unknown</span> <span class=\"k\">default</span><span class=\"p\">:</span><span class=\"k\">break</span> <span class=\"c1\">// Still useful, because new types could later be added</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">switch</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">accountStanding</span>\n<span class=\"p\">{</span>\n<span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">freeTrial</span><span class=\"p\">:</span><span class=\"k\">break</span>\n<span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">owes</span><span class=\"p\">:</span><span class=\"k\">break</span>\n<span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">paid</span><span class=\"p\">:</span><span class=\"k\">break</span>\n<span class=\"kd\">@unknown</span> <span class=\"k\">default</span><span class=\"p\">:</span><span class=\"k\">break</span> <span class=\"c1\">// Case is already handled by previous patterns; consider removing it</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Though this clearly enhances life with Swift, I’d argue this can be a valuable addition to any Objective-C exclusive code base. If you’re browsing a header, the intent of the enumeration’s status (both current and future) are clear by either the use of <code class=\"highlighter-rouge\">NS_ENUM</code> versus <code class=\"highlighter-rouge\">NS_CLOSED_ENUM</code>.</p>\n\n<h3 id=\"choices\">Choices</h3>\n<p>It’s worth considering which type of enumeration to use with Objective-C at this point. We’ve got enum, NS_ENUM or NS_CLOSED_ENUM. Fortunately, the answer is much simpler than you  might think.</p>\n\n<blockquote>\n  <p>NS_OPTIONS is also a choice, but is more suited towards bitmasks.</p>\n</blockquote>\n\n<p>The old C way of defining an enumeration, which by proxy Objective-C gained by virtue of being a superset, could lead to confusion. Look to <a href=\"https://nshipster.com/ns_enum-ns_options/\" target=\"_blank\">NSHipster’s</a> excellent post over the topic, but to jog your memory:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// There's no type. Only Integer values</span>\n<span class=\"kd\">enum</span> <span class=\"p\">{</span>\n    <span class=\"kt\">AccountTypeNew</span><span class=\"p\">,</span>\n    <span class=\"kt\">AccountTypeExisting</span><span class=\"p\">,</span>\n    <span class=\"kt\">AccountTypeUnknown</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// or a specified type</span>\n<span class=\"n\">typedef</span> <span class=\"kd\">enum</span> <span class=\"p\">{</span>\n    <span class=\"kt\">AccountTypeNew</span><span class=\"p\">,</span>\n    <span class=\"kt\">AccountTypeExisting</span><span class=\"p\">,</span>\n    <span class=\"kt\">AccountTypeUnknown</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// or Apple's old way of doing things,</span>\n<span class=\"n\">typedef</span> <span class=\"kd\">enum</span> <span class=\"p\">{</span>\n    <span class=\"kt\">AccountTypeNew</span><span class=\"p\">,</span>\n    <span class=\"kt\">AccountTypeExisting</span><span class=\"p\">,</span>\n    <span class=\"kt\">AccountTypeUnknown</span>\n<span class=\"p\">};</span>\n\n<span class=\"n\">typedef</span> <span class=\"kt\">NSInteger</span> <span class=\"kt\">AccountType</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>To provide explicit hints to the compiler, one should always opt for NS_ENUM as we’ve done in the previous examples. We’ll get switch case completeness along with our type checking.</p>\n\n<p>Now, with NS_CLOSED_ENUM, the only <em>additional</em> question you’ve got ask yourself is if this enumeration is frozen or not. That’s it:</p>\n\n<ol>\n  <li>Don’t use enum</li>\n  <li>If it’s unfrozen, opt for NS_ENUM</li>\n  <li>If it’s frozen, use NS_CLOSED_ENUM</li>\n</ol>\n\n<p>It should be noted that the choice to use a frozen enumeration is final. The header for a closed enumeration communicates this plainly:</p>\n\n<blockquote>\n  <p>Once an enum is marked as closed, it is a binary and source incompatible change to add a new value. If there is any doubt about an enum gaining a private or additional public case in the future, use NS_ENUM instead.</p>\n</blockquote>\n\n<h3 id=\"wrapping-up\">Wrapping Up</h3>\n<p>If Objective-C was “deprecated” tomorrow, the traveled software developer knows that in programming there is but one truth: what is dead never truly dies.</p>\n\n<p>Interop with old faithful (Objective-C) isn’t going away anytime soon, as much as the prevailing narrative may have you believe. Sure, the Swift only frameworks are en route, no doubt, but so long as Foundation holds its firm grip in the iOS ecosystem - we can bet the dinosaur will still roam its plains.</p>\n\n<p>As such, we should take care to integrate the changing of the guard in delightful ways, and NS_CLOSED_ENUM is an indefectible definition in that regard.</p>\n\n<p>Until next time ✌️.</p>",
            "summary": "There is but one constant in software engineering: change.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2019-02-14T00:00:00-06:00",
            "date_modified": "2019-02-14T00:00:00-06:00",
            "author": {
              "name": {"twitter":"jordanmorgan10","picture":"/assets/images/about/headshot.jpeg"}},
            "tags": ["Swift"]}]
}