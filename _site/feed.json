{
    "version": "https://jsonfeed.org/version/1",
    "title": "Swiftjective-C",
    "description": "Swiftjective-C is a periodical over modern iOS software engineering. It houses tactful discussions over Swift, Objective-C and developing high quality apps while peering into various frameworks to see what makes them tick.\n",
    "home_page_url": "http://localhost:4000/",
    "feed_url": "http://localhost:4000/feed.json",
    "items": [
      {
            "id": "http://localhost:4000/uigraphicsimagerenderer",
            "url": "http://localhost:4000/uigraphicsimagerenderer/",
            "title": "UIGraphicsImageRenderer",
            "content_html": "<p>The history of photography is rife with interesting stories of how the medium developed. Among them, digital photography is one of the more exciting bits of its history. It’s still quite a nascent craft, with its history tracing back to as recently as 1957 when the fine folks at the National Institute of Standards and Technology slapped a photo into computer memory.</p>\n\n<blockquote>\n  <p>Now here’s something next.</p>\n</blockquote>\n\n<p>The translation from the analog to the digital was an inflection point. We’ve experienced a similar shift on iOS starting with iOS 10, though many engineers have yet to discover or adopt the latest innovation for drawing images — <code class=\"highlighter-rouge\">UIGraphicsImageRenderer</code>.</p>\n\n<h3 id=\"setting-the-cgcontext\">Setting the (CG)Context</h3>\n<p>Core Graphics, based on the Quartz drawing engine, has provided iOS developers with lightweight 2D rendering capabilities since iOS 2. Its utility knows almost no bounds, as image masking, PDF document creation, parsing, and other similar functions are baked right in making it a no nonsense choice for any sort of drawing task.</p>\n\n<p>For that and many other reasons, if one hits the Googles on how to create an image from something on screen they’ll likely end up with something like this:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">drawSize</span> <span class=\"o\">=</span> <span class=\"kt\">CGSize</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n\n<span class=\"kt\">UIGraphicsBeginImageContext</span><span class=\"p\">(</span><span class=\"n\">drawSize</span><span class=\"p\">)</span>  \n<span class=\"k\">let</span> <span class=\"nv\">ctx</span> <span class=\"o\">=</span> <span class=\"kt\">UIGraphicsGetCurrentContext</span><span class=\"p\">()</span><span class=\"o\">!</span>\n\n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"nf\">setFillColor</span><span class=\"p\">(</span><span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"o\">.</span><span class=\"n\">cgColor</span><span class=\"p\">)</span>  \n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"nf\">fill</span><span class=\"p\">(</span><span class=\"kt\">CGRect</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"n\">drawSize</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"n\">drawSize</span><span class=\"o\">.</span><span class=\"n\">height</span><span class=\"p\">))</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">img</span> <span class=\"o\">=</span> <span class=\"kt\">UIGraphicsGetImageFromCurrentImageContext</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<p>And it works, so we move on. Though, there are several valid reasons to pump the breaks:</p>\n\n<ul>\n  <li>UIGraphicsBegin/EndImageContext are sRGB only (sorry p3 color gamut).</li>\n  <li>It was before the age of blocks, which are common throughout Foundation, UIKit and virtually every framework on iOS.</li>\n  <li>Extensibility is possible, though sometimes a non trivial task.</li>\n</ul>\n\n<p>Given its age, it’s not a shocker to say Core Graphics provides an API that’s less than ideal too many of today’s standards. Though Swift’s syntactical sugar prowess has softened the call sites to Core Graphics code over many projects, it still is what it is — a C based API built for simpler times.</p>\n\n<p>In contrast, <code class=\"highlighter-rouge\">UIGraphicsImageRenderer</code> is built for tomorrow in mind:</p>\n\n<ul>\n  <li>It’s automagically fully color managed. For example, on the beautiful 9.7 inch iPad pro you’ll get a wide color context.</li>\n  <li>It’s a first class object.</li>\n  <li>It manages its context lifetime, unlocking some memory optimizations on the house from Cupertino &amp; Friends©.</li>\n  <li>The former implicitly means that it caches its context, meaning reuse is an efficient operation as opposed to using new renderers.</li>\n</ul>\n\n<h3 id=\"gaining-more-cgcontext\">Gaining More (CG)Context</h3>\n\n<p>Initializing and keeping a reference to a renderer is a solid start:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">renderer</span> <span class=\"o\">=</span> <span class=\"kt\">UIGraphicsImageRenderer</span><span class=\"p\">(</span><span class=\"nv\">size</span><span class=\"p\">:</span> <span class=\"kt\">CGSize</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>From there, the relevant parallel from the old way of doing things to the preferred, Apple approved way would be image renderer’s closure based functions for creating an image:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">image</span><span class=\"p\">(</span><span class=\"nv\">actions</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"kt\">UIGraphicsImageRendererContext</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">UIImage</span>\n</code></pre></div></div>\n\n<p>To compare apples to image renderers, one could create the same image as mentioned above from the legacy Core Graphics method by doing this:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">img</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">image</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">)</span> <span class=\"k\">in</span>  \n    <span class=\"k\">let</span> <span class=\"nv\">size</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"o\">.</span><span class=\"n\">bounds</span><span class=\"o\">.</span><span class=\"n\">size</span>  \n    <span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"o\">.</span><span class=\"nf\">setFill</span><span class=\"p\">()</span>  \n    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"nf\">fill</span><span class=\"p\">(</span><span class=\"kt\">CGRect</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">height</span><span class=\"p\">))</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The hard work of what’s happening here has always been abstracted away by Core Graphics since day one, but now it’s more honed in to the point where we simply spit out some drawing instructions within a block.</p>\n\n<p>The renderer also exposes convenient access to getting a hold of <code class=\"highlighter-rouge\">NSData</code> of resulting images as well:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">actions</span><span class=\"p\">:(</span><span class=\"kt\">UIGraphicsImageRendererContext</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">)</span> <span class=\"k\">in</span>  \n<span class=\"k\">let</span> <span class=\"nv\">size</span> <span class=\"o\">=</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"o\">.</span><span class=\"n\">bounds</span><span class=\"o\">.</span><span class=\"n\">size</span>  \n<span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"n\">blue</span><span class=\"o\">.</span><span class=\"nf\">setFill</span><span class=\"p\">()</span>  \n    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"nf\">fill</span><span class=\"p\">(</span><span class=\"kt\">CGRect</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">width</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">height</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">))</span>  \n<span class=\"p\">}</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">imageJPEGData</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"nf\">jpegData</span><span class=\"p\">(</span><span class=\"nv\">withCompressionQuality</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">actions</span><span class=\"p\">:</span> <span class=\"n\">actions</span><span class=\"p\">)</span>\n<span class=\"k\">let</span> <span class=\"nv\">imagePNGData</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"nf\">pngData</span><span class=\"p\">(</span><span class=\"nv\">actions</span><span class=\"p\">:</span> <span class=\"n\">actions</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>In each code sample, the typealiased <code class=\"highlighter-rouge\">DrawingActions</code> closure returns to us an instance of <code class=\"highlighter-rouge\">UIGraphicsImageRendererContext</code>. Using it we gain access high-level drawing functions. Though Apple clearly states “higher level” drawing functions, don’t think of it as a crutch. There is support for most drawing tasks, such as utilizing blend modes by leveraging <code class=\"highlighter-rouge\">CGBlendValue</code>:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">image</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">image</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">)</span> <span class=\"k\">in</span>  \n    <span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"n\">blue</span><span class=\"o\">.</span><span class=\"nf\">setFill</span><span class=\"p\">()</span>  \n    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"nf\">fill</span><span class=\"p\">(</span><span class=\"kt\">CGRect</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">140</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">140</span><span class=\"p\">))</span>\n\n    <span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"n\">yellow</span><span class=\"o\">.</span><span class=\"nf\">setFill</span><span class=\"p\">()</span>  \n    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"nf\">fill</span><span class=\"p\">(</span><span class=\"kt\">CGRect</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">140</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">140</span><span class=\"p\">),</span> <span class=\"nv\">blendMode</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">luminosity</span><span class=\"p\">)</span>  \n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>That said, you may be left missing the drawing functionality you might’ve thought left behind from the traditional context.</p>\n\n<p>For example, filling in an ellipses still requires a R.O.C.G.C. (regular old Core Graphics Context, obviously). To fill out the drawing functionality (pun somewhat intended), an image renderer context has one available.</p>\n\n<p>Take note of the last two lines, where the <code class=\"highlighter-rouge\">cgContext</code> allows us to fill out the circle:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">img</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">image</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">)</span> <span class=\"k\">in</span>  \n    <span class=\"k\">let</span> <span class=\"nv\">size</span> <span class=\"o\">=</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"o\">.</span><span class=\"n\">bounds</span><span class=\"o\">.</span><span class=\"n\">size</span>\n\n    <span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"n\">darkGray</span><span class=\"o\">.</span><span class=\"nf\">setStroke</span><span class=\"p\">()</span>  \n    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"nf\">stroke</span><span class=\"p\">(</span><span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"o\">.</span><span class=\"n\">bounds</span><span class=\"p\">)</span>\n\n    <span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"n\">blue</span><span class=\"o\">.</span><span class=\"nf\">setFill</span><span class=\"p\">()</span>  \n    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"nf\">fill</span><span class=\"p\">(</span><span class=\"kt\">CGRect</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">width</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">height</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n    <span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"n\">yellow</span><span class=\"o\">.</span><span class=\"nf\">setFill</span><span class=\"p\">()</span>  \n    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">cgContext</span><span class=\"o\">.</span><span class=\"nf\">fillEllipse</span><span class=\"p\">(</span><span class=\"nv\">in</span><span class=\"p\">:</span> <span class=\"kt\">CGRect</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">51</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"mi\">51</span><span class=\"p\">,</span> <span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">))</span>  \n    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">cgContext</span><span class=\"o\">.</span><span class=\"nf\">rotate</span><span class=\"p\">(</span><span class=\"nv\">by</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">)</span>  \n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"giving-a-renderer-more-cgcontext\">Giving a Renderer More (CG)Context</h3>\n<p>I really need to stop with the (CG)Context bit, but I feel too invested at this point so please just excuse me 🤠.</p>\n\n<p>You have noticed that a graphics renderer will also accept a <code class=\"highlighter-rouge\">UIGraphicsImageRendererFormat</code>object into two of its four available initializers:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">size</span><span class=\"p\">:</span> <span class=\"kt\">CGSize</span><span class=\"p\">,</span> <span class=\"nv\">format</span><span class=\"p\">:</span> <span class=\"kt\">UIGraphicsImageRendererFormat</span><span class=\"p\">)</span>  \n<span class=\"kd\">public</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">bounds</span><span class=\"p\">:</span> <span class=\"kt\">CGRect</span><span class=\"p\">,</span> <span class=\"nv\">format</span><span class=\"p\">:</span> <span class=\"kt\">UIGraphicsImageRendererFormat</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>This rendering format has a few options to aid in further specifying the intent of your resulting drawing operations. It also has a useful <code class=\"highlighter-rouge\">bounds </code>property we’ve been using in the previous code samples that’s derived from its associated graphics context. Using this formatter one can tweak opaque or scale preferences, among other things.</p>\n\n<p>For example, <code class=\"highlighter-rouge\">CALayer</code> and its A8 backing store format was introduced in iOS 12 and provides developers with free memory optimizations. If you’re certain, for example, that you’re drawing wide color content <em>using</em> sRGB colors, you can have the renderer optimize for that since the backing store would otherwise be larger to accommodate a larger color range rather than just 0 to 1:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// iOS 10/11</span>\n<span class=\"k\">let</span> <span class=\"nv\">format</span> <span class=\"o\">=</span> <span class=\"kt\">UIGraphicsImageRendererFormat</span><span class=\"p\">()</span>  \n<span class=\"n\">format</span><span class=\"o\">.</span><span class=\"n\">prefersExtendedRange</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n\n<span class=\"c1\">// iOS 12</span>\n<span class=\"k\">let</span> <span class=\"nv\">format</span> <span class=\"o\">=</span> <span class=\"kt\">UIGraphicsImageRendererFormat</span><span class=\"p\">()</span>  \n<span class=\"n\">format</span><span class=\"o\">.</span><span class=\"n\">preferredRange</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">standard</span> <span class=\"c1\">// Turn off iOS 12 optimization</span>\n</code></pre></div></div>\n\n<p>Many of these decisions will likely be tied to the current trait collection, so it stands to reason that the renderer format can also be fetched on a per trait collection basis as well.</p>\n\n<p>No need to mince in my own words here, Apple’s documentation explains this very well:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Returns a format optimized for the specified trait collection, taking into account properties such as displayScale and displayGamut.</span>\n<span class=\"c1\">// Traits that are not specified will be ignored, with their corresponding format properties defaulting to the values in preferredFormat.  </span>\n<span class=\"kd\">public</span> <span class=\"kd\">convenience</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"k\">for</span> <span class=\"nv\">traitCollection</span><span class=\"p\">:</span> <span class=\"kt\">UITraitCollection</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>No worries if you opt to forgo any of this, as UIKit provides sensible default values for you should you not provide explicit ones. As such, if you do nothing, UIKit gives you the resulting format from its factory method, <code class=\"highlighter-rouge\">defaultFormat</code> — which provides a format configured for the highest fidelity possible as supported by the device it’s executed on.</p>\n\n<p>Take care to make this choice upfront, however. If you want to configure things, do it at your renderer’s initialization point as the formatter itself holistically represents immutable configurations that it will always use during drawing operations.</p>\n\n<p>All of this hopefully should remind you how extensible and flexible an image renderer can be. For example, hanging a quick extension off of any view to create a circle avatar would be painless and performant (as performant as using <code class=\"highlighter-rouge\">cornerRadius</code> can really be, that is) since one could reuse the same renderer and its context:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">rendererKey</span><span class=\"p\">:</span> <span class=\"kt\">UInt8</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">extension</span> <span class=\"kt\">UIView</span> <span class=\"p\">{</span>\n<span class=\"k\">var</span> <span class=\"nv\">renderer</span><span class=\"p\">:</span> <span class=\"kt\">UIGraphicsImageRenderer</span><span class=\"o\">!</span> <span class=\"p\">{</span>  \n    <span class=\"k\">get</span> <span class=\"p\">{</span>  \n        <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">rendererInstance</span> <span class=\"o\">=</span> <span class=\"nf\">objc_getAssociatedObject</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">rendererKey</span><span class=\"p\">)</span> <span class=\"k\">as?</span> <span class=\"kt\">UIGraphicsImageRenderer</span> <span class=\"k\">else</span> <span class=\"p\">{</span>  \n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">renderer</span> <span class=\"o\">=</span> <span class=\"kt\">UIGraphicsImageRenderer</span><span class=\"p\">(</span><span class=\"nv\">bounds</span><span class=\"p\">:</span> <span class=\"n\">bounds</span><span class=\"p\">)</span>  \n            <span class=\"k\">return</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">renderer</span>  \n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">rendererInstance</span>\n    <span class=\"p\">}</span>  \n    <span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"n\">newValue</span><span class=\"p\">)</span> <span class=\"p\">{</span>  \n        <span class=\"nf\">objc_setAssociatedObject</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">rendererKey</span><span class=\"p\">,</span> <span class=\"n\">newValue</span><span class=\"p\">,</span> <span class=\"n\">objc_AssociationPolicy</span><span class=\"o\">.</span><span class=\"kt\">OBJC_ASSOCIATION_RETAIN</span><span class=\"p\">)</span>  \n    <span class=\"p\">}</span>  \n<span class=\"p\">}</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">circleImageView</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">UIImageView</span> <span class=\"p\">{</span>  \n        <span class=\"k\">let</span> <span class=\"nv\">img</span><span class=\"p\">:</span><span class=\"kt\">UIImage</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">image</span> <span class=\"p\">{</span> <span class=\"n\">ctx</span> <span class=\"k\">in</span>  \n            <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"nv\">in</span><span class=\"p\">:</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">cgContext</span><span class=\"p\">)</span>  \n        <span class=\"p\">}</span>\n\n        <span class=\"k\">let</span> <span class=\"nv\">imageView</span><span class=\"p\">:</span><span class=\"kt\">UIImageView</span> <span class=\"o\">=</span> <span class=\"kt\">UIImageView</span><span class=\"p\">(</span><span class=\"nv\">image</span><span class=\"p\">:</span> <span class=\"n\">img</span><span class=\"p\">)</span>  \n        <span class=\"n\">imageView</span><span class=\"o\">.</span><span class=\"n\">frame</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"o\">.</span><span class=\"n\">bounds</span>  \n        <span class=\"n\">imageView</span><span class=\"o\">.</span><span class=\"n\">clipsToBounds</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>  \n        <span class=\"n\">imageView</span><span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">cornerRadius</span> <span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"o\">.</span><span class=\"n\">bounds</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nf\">rounded</span><span class=\"p\">()</span>  \n        <span class=\"k\">return</span> <span class=\"n\">imageView</span>  \n    <span class=\"p\">}</span>  \n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Generate a circle image and image view of any view instance  </span>\n<span class=\"k\">let</span> <span class=\"nv\">anImageView</span> <span class=\"o\">=</span> <span class=\"n\">myExistingView</span><span class=\"o\">.</span><span class=\"nf\">circleImageView</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<h3 id=\"pdfs-ftw\">PDFs FTW</h3>\n<p>A quick sidebar to mention that the PDF variant of the abstract <code class=\"highlighter-rouge\">UIGraphicsRenderer</code> class is very similar to its image rendering sibling. In fact, their method declarations are almost interchangeable, save <code class=\"highlighter-rouge\">UIImage</code> vs <code class=\"highlighter-rouge\">Data</code>:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">renderer</span> <span class=\"o\">=</span> <span class=\"kt\">UIGraphicsPDFRenderer</span><span class=\"p\">(</span><span class=\"nv\">bounds</span><span class=\"p\">:</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">bounds</span><span class=\"p\">)</span>  \n<span class=\"k\">let</span> <span class=\"nv\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">pdfData</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">)</span> <span class=\"k\">in</span>  \n<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"nf\">beginPage</span><span class=\"p\">()</span>\n    <span class=\"k\">let</span> <span class=\"nv\">header</span> <span class=\"o\">=</span> <span class=\"s\">\"Welcome to TTIDG!\"</span> <span class=\"k\">as</span> <span class=\"kt\">NSString</span>  \n    <span class=\"k\">let</span> <span class=\"nv\">attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span>  \n        <span class=\"kt\">NSAttributedStringKey</span><span class=\"o\">.</span><span class=\"nv\">font</span> <span class=\"p\">:</span> <span class=\"kt\">UIFont</span><span class=\"o\">.</span><span class=\"nf\">preferredFont</span><span class=\"p\">(</span><span class=\"nv\">forTextStyle</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">),</span>  \n        <span class=\"kt\">NSAttributedStringKey</span><span class=\"o\">.</span><span class=\"nv\">foregroundColor</span> <span class=\"p\">:</span> <span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"n\">blue</span>  \n    <span class=\"p\">]</span>\n\n    <span class=\"n\">header</span><span class=\"o\">.</span><span class=\"nf\">draw</span><span class=\"p\">(</span><span class=\"nv\">in</span><span class=\"p\">:</span> <span class=\"kt\">CGRect</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">pdfContextBounds</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">pdfContextBounds</span><span class=\"o\">.</span><span class=\"n\">height</span><span class=\"p\">),</span> <span class=\"nv\">withAttributes</span><span class=\"p\">:</span> <span class=\"n\">attributes</span><span class=\"p\">)</span>  \n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"wrapping-up\">Wrapping Up</h3>\n<p>Replacing the code that kinda just works with the code that’s more recent and supports more relevant formats is typically not high on the proverbial list.</p>\n\n<p>Maybe it should be, as is the case with <code class=\"highlighter-rouge\">UIGraphicsImageRenderer</code>. You likely won’t have to twist many arms to persuade iOS engineers to make the switch, “No ✋ — I don’t want block based, automatically color managed, extensible drawing code that already manages its context lifetime — that’s awful” said…..nobody?</p>\n\n<p>Until next time, may your drawing exploits with <code class=\"highlighter-rouge\">UIGraphicsImageRenderer</code> be many and productive 📸.</p>",
            "summary": "The history of photography is rife with interesting stories of how the medium developed. Among them, digital photography is one of the more exciting bits of its history. It’s still quite a nascent craft, with its history tracing back to as recently as 1957 when the fine folks at the National Institute of Standards and Technology slapped a photo into computer memory.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2018-08-01T00:00:00-05:00",
            "date_modified": "2018-08-01T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["UIKit"]},{
            "id": "http://localhost:4000/iOS-12-Notable-UIKit-Additions",
            "url": "http://localhost:4000/iOS-12-Notable-UIKit-Additions/",
            "title": "iOS 12: Notable UIKit Additions",
            "content_html": "<p>And here we are. We’ve finally got a good look at iOS 12 and all it has on offer. Though some chose to view it as a tame maintenance release, tagging it as such is a disservice and there was plenty to digest during the WWDC keynote.</p>\n\n<p>Each year, I dive in on the latest version of iOS and try to bring up some of the new APIs that our favorite framework, UIKit, has brought to the table. In no particular order, let’s dig in on some of the enhancements that caught my eye.</p>\n\n<h3 id=\"uitextinputtraits\">UITextInputTraits</h3>\n\n<p>Apple continues its push towards keeping its user’s data private and secure, so it’s no surprise to see Cupertino &amp; Friends© extend the password autofill APIs.</p>\n\n<p>New this year is the ability to suggest a new password for your users, <em>and</em> supply your password parameters dictated by business requirements to iOS when suggesting such a password. This is done via the <code class=\"highlighter-rouge\">UITextInputPasswordRules</code> class:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">createNewPasswordTextField</span> <span class=\"o\">=</span> <span class=\"kt\">UITextField</span><span class=\"p\">()</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">newPasswordReqs</span> <span class=\"o\">=</span> <span class=\"kt\">UITextInputPasswordRules</span><span class=\"p\">(</span><span class=\"nv\">descriptor</span><span class=\"p\">:</span> <span class=\"s\">\"required: lower; required: digit; max-consecutive: 3; minlength: 12;\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">createNewPasswordTextField</span><span class=\"o\">.</span><span class=\"n\">passwordRules</span> <span class=\"o\">=</span> <span class=\"n\">newPasswordReqs</span>\n\n<span class=\"c1\">// Now, when iOS suggests a new password - these rules will be used to generate it</span>\n</code></pre></div></div>\n<p>The pertinent information here is the descriptor parameter, which is a plain string that follows a certain syntax, à la the visual format language:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"s\">\"key: value;\"</span>\n</code></pre></div></div>\n\n<p>Think of it a dictionary entry that always is followed by semicolon. It’s quite close to CSS declarations. With it, you can specify the following items:</p>\n\n<ul>\n  <li>required : Self explanatory</li>\n  <li>allowed : Allow a subset of allowed characters</li>\n  <li>max-consecutive : Restrict the number of successive characters</li>\n</ul>\n\n<p>And character classes to match against those rules:</p>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">upper</code> : A-Z</li>\n  <li><code class=\"highlighter-rouge\">lower</code> : a-z</li>\n  <li>\n    <table>\n      <tbody>\n        <tr>\n          <td><code class=\"highlighter-rouge\">special</code> : -~!@#$%^&amp;*_+=`</td>\n          <td>(){}[:;”’&lt;&gt;,.? ] and space</td>\n        </tr>\n      </tbody>\n    </table>\n  </li>\n  <li><code class=\"highlighter-rouge\">ascii-printable</code> : All ACII printable</li>\n  <li><code class=\"highlighter-rouge\">unicode</code> : All unicode</li>\n</ul>\n\n<p>To further things a little, suppose you only wanted to allow the letters “j,o,r,d,a,n” because you want the strongest password that I’ll never, ever most definitely guess, then you could do this:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">UITextInputPasswordRules</span><span class=\"p\">(</span><span class=\"nv\">descriptor</span><span class=\"p\">:</span> <span class=\"s\">\"required: [j,o,r,d,a,n]; max-consecutive: 2; minlength: 12;\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Be aware that the framework has some validation against your supplied validation, resulting in some form of validationception.</p>\n\n<p>Your parameters have to <em>at least</em> use two instances of the ASCII uppercase letters, digits and ASDII lowercase letters classes. Other than that, it also must be longer than 12 characters.</p>\n\n<p>If you don’t meet this criteria, do you get some sort of runtime error or exception? Nope — the user agent just throws out your insecure, primitive suggestion and uses the default. Which is probably a good thing.</p>\n\n<p>As a bonus, you can do the same thing in HTML by using the <code class=\"highlighter-rouge\">passwordrules</code> attribute in your input element.</p>\n\n<h3 id=\"one-time-tfa-codes\">One Time TFA Codes</h3>\n\n<p>In one of my favorite “It just works” APIs that Apple supplies to developers, it’s hard to argue that there’s something more trivial to implement in iOS development that simultaneously brings real value to users than setting a text content type.</p>\n\n<p>The powerful heuristics of iOS sucks in passwords and phone numbers, can suggest a relevant address and more. And now, that more is TFA codes, accomplished by doing nothing more than choosing <code class=\"highlighter-rouge\">oneTimeCode</code>:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">aTFAtextField</span><span class=\"o\">.</span><span class=\"n\">textContentType</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">oneTimeCode</span>\n</code></pre></div></div>\n\n<p>This also joins the new value, <code class=\"highlighter-rouge\">newPassword</code>, which would enable the password creation prompts touched on above. The usual restrictions (if you can even call them that) is that the element accepting the password must be a text field, text view or a view that adopts the <code class=\"highlighter-rouge\">UITextInput</code> protocol.</p>\n\n<p>Of note, tvOS apps are also granted the same affordances when using the control center keyboard, the continuity keyboard or even Cupertino’s Remote App. And let’s face it, nobody wants to type on that platform so any shortcuts we can provide just promotes engagement that much more.</p>\n\n<p>Text content type is powerful, but also the definition of lightweight, simple and WYSIWYG. Sometimes what you aren’t is just as important as what you are. That’s also true with framework design.</p>\n\n<h3 id=\"graphics-rendering\">Graphics Rendering</h3>\n\n<p>As we’ll briefly discuss later on, iOS 12 has automatic backing store support for views. The depth of their content drives this. So, for example, if you are rendering a grey scale image on the screen iOS will employ an 8 bit per pixel backing store instead of the usual 64 bit per pixel backing store a portrait image would incur.</p>\n\n<p>The cost savings is significant, in the <a href=\"https://developer.apple.com/videos/play/wwdc2018/202/\">What’s New in Cocoa Touch</a> session, Apple engineer Josh Shaffer notes that the previous example goes from 2.2 megabytes of real estate down to <em>275 kilobytes</em>.</p>\n\n<p>As aforementioned, views get this out of the box. If you draw into offscreen bitmaps using <code class=\"highlighter-rouge\">UIGraphicsImageRenderer</code>, though, iOS won’t be able to predict the developer’s intentions with the resulting image. As such, a configurable buffer backing store style has been introduced so one can take part in the memory savings:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">rendererFormat</span> <span class=\"o\">=</span> <span class=\"kt\">UIGraphicsImageRendererFormat</span><span class=\"o\">.</span><span class=\"nf\">default</span><span class=\"p\">()</span>  \n<span class=\"n\">rendererFormat</span><span class=\"o\">.</span><span class=\"n\">preferredRange</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">extended</span> <span class=\"c1\">// For an extended range image</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">renderer</span> <span class=\"o\">=</span> <span class=\"kt\">UIGraphicsImageRenderer</span><span class=\"p\">(</span><span class=\"nv\">size</span><span class=\"p\">:</span> <span class=\"kt\">CGSize</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">),</span> <span class=\"nv\">format</span><span class=\"p\">:</span> <span class=\"n\">rendererFormat</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Above, we indicated our intention to utilize an extended range image. Though, we can also indicate that its unspecified, automatic or standard.</p>\n\n<h3 id=\"the-small-quick-win\">The Small Quick Win</h3>\n\n<p>Detecting user interface orientations is traditionally frowned upon via Apple’s official stance. And though trait collections offer us most of what we need, it’s still refreshing to see Apple come full circle on all the edge cases with two new additions here:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">device</span> <span class=\"o\">=</span> <span class=\"kt\">UIDevice</span><span class=\"o\">.</span><span class=\"n\">current</span>  \n<span class=\"k\">let</span> <span class=\"nv\">isFlat</span> <span class=\"o\">=</span> <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">orientation</span><span class=\"o\">.</span><span class=\"n\">isFlat</span>  \n<span class=\"k\">let</span> <span class=\"nv\">isValid</span> <span class=\"o\">=</span> <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">orientation</span><span class=\"o\">.</span><span class=\"n\">isValidInterfaceOrientation</span>\n</code></pre></div></div>\n\n<h3 id=\"darkness-for-days\">Darkness for Days</h3>\n\n<p>Also, we have dark mode on iOS, finally! Mojave doesn’t get all the fun!</p>\n\n<p>Err…shoot, no wait — we just have API support for it. But it doesn’t officially exist. But it also kinda does too, because the code is there. It’s shipped with Xcode.</p>\n\n<p>I don’t know. I’m just telling you that trait collections now know about it:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">darkTraitCollection</span> <span class=\"o\">=</span> <span class=\"kt\">UITraitCollection</span><span class=\"p\">(</span><span class=\"nv\">userInterfaceStyle</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">dark</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>…there’s obviously enumerations for it:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">@available(iOS 12.0, *)</span> <span class=\"kd\">public</span> <span class=\"kd\">enum</span> <span class=\"kt\">UIUserInterfaceStyle</span> <span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span>  \n    <span class=\"k\">case</span> <span class=\"n\">unspecified</span>  \n    <span class=\"k\">case</span> <span class=\"n\">light</span>  \n    <span class=\"k\">case</span> <span class=\"n\">dark</span>  \n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>…but they only apply to CarPlay on iOS 12 beta 1.</p>\n\n<p>So there you go 🤷🏻‍♂️.</p>\n\n<h3 id=\"notifications\">Notifications</h3>\n\n<p>Technically not part of UIKit, but I did have to highlight one welcome change aside from the new grouping capabilities. Look, dealing with notifications is often a pain from a developer perspective. While not a forgone conclusion, the more notification offerings we have to support, generally the issues that could arise grow exponentially.</p>\n\n<p>You have the system notification view to toggle app permissions within iOS’ settings, possibly your own user interface to allow for granular choices, APNS to go through and oh, let’s not forget the network to contend with too.</p>\n\n<p>So, the fact that you can deep link directly into your app’s notification settings from an incoming one is not a small improvement (via <code class=\"highlighter-rouge\">providesAppNotificationSettings</code>), but a very welcome change as developers continue their journey towards simplifying notification issues for them, the end user and customer support.</p>\n\n<p>🕺!</p>\n\n<h3 id=\"-and-the-free-ones-\">… And The Free Ones 🙌</h3>\n\n<p><a href=\"https://twitter.com/_inside/status/1003831980025372673\">iOS 12 is fast</a>. A lot of the improvements we’ll enjoy come from deep within the framework itself. Here, I’ve chosen to highlight API changes you’ll need to put some time into to reap benefits.</p>\n\n<p>But that’s the thing — our apps will feel a bit smoother, faster and coherent without us having done anything at all.</p>\n\n<p>The reasons why range from smarter cell prefetching via the API scheduling things serially, smarter CPU diversification, more intelligent backing stores for <code class=\"highlighter-rouge\">UIView</code> and Auto Layout (quite impressively) hitting O(n) instead of O(n²) for multiple common layout scenarios, to name a few.</p>\n\n<h3 id=\"wrapping-up\">Wrapping Up</h3>\n\n<p>Personally, I came away more impressed than I thought I would be with iOS 12. Initially, it appeared that a lot of the chatter preemptively declared that iOS 12 would be a day late and dollar short. Last year, we were treated to some marquee features within UIKit like drag and drop — so what could they throw down for us this year?</p>\n\n<p>But, as is typical, W.W.D.C. brought some new stuff we weren’t expecting, hardening updates and most importantly the new APIs. Exciting times, plus — our apps are just better by virtue of simply running on the new OS. UIKit will always be at the forefront, and this year was no exception as there’s still plenty of discussions left to be had around this year’s improvements.</p>\n\n<p>Saddle up 📱</p>",
            "summary": "And here we are. We’ve finally got a good look at iOS 12 and all it has on offer. Though some chose to view it as a tame maintenance release, tagging it as such is a disservice and there was plenty to digest during the WWDC keynote.",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2018-06-08T00:00:00-05:00",
            "date_modified": "2018-06-08T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["UIKit"]},{
            "id": "http://localhost:4000/WWDC-18-The-Pregame-Quiz",
            "url": "http://localhost:4000/WWDC-18-The-Pregame-Quiz/",
            "title": "WWDC 2018: The Pregame Quiz",
            "content_html": "",
            "summary": "",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2018-05-30T00:00:00-05:00",
            "date_modified": "2018-05-30T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["Trivia"]},{
            "id": "http://localhost:4000/NSPredicate-Objective-C",
            "url": "http://localhost:4000/NSPredicate-Objective-C/",
            "title": "NSPredicate",
            "content_html": "",
            "summary": "",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2018-05-18T00:00:00-05:00",
            "date_modified": "2018-05-18T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["Foundation"]},{
            "id": "http://localhost:4000/UILayoutGuide",
            "url": "http://localhost:4000/UILayoutGuide/",
            "title": "UILayoutGuide",
            "content_html": "",
            "summary": "",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2018-04-15T00:00:00-05:00",
            "date_modified": "2018-04-15T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["UIKit"]},{
            "id": "http://localhost:4000/Techniques-to-Connect-Websites-to-iOS-Apps",
            "url": "http://localhost:4000/Techniques-to-Connect-Websites-to-iOS-Apps/",
            "title": "Connecting iOS Apps with their Websites.",
            "content_html": "",
            "summary": "",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2018-02-03T00:00:00-06:00",
            "date_modified": "2018-02-03T00:00:00-06:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["Misc"]},{
            "id": "http://localhost:4000/NSMeasurement",
            "url": "http://localhost:4000/NSMeasurement/",
            "title": "NSMeasurement",
            "content_html": "",
            "summary": "",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2017-12-17T00:00:00-06:00",
            "date_modified": "2017-12-17T00:00:00-06:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["Foundation"]},{
            "id": "http://localhost:4000/Copy-on-Write-in-iOS-11",
            "url": "http://localhost:4000/Copy-on-Write-in-iOS-11/",
            "title": "Copy on Write",
            "content_html": "",
            "summary": "",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2017-11-07T00:00:00-06:00",
            "date_modified": "2017-11-07T00:00:00-06:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["Foundation"]},{
            "id": "http://localhost:4000/The-DeviceCheck-API",
            "url": "http://localhost:4000/The-DeviceCheck-API/",
            "title": "Device Check Overview",
            "content_html": "",
            "summary": "",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2017-10-06T00:00:00-05:00",
            "date_modified": "2017-10-06T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["Device Check"]},{
            "id": "http://localhost:4000/iPhone-X-Dealing-with-Home-Indicator",
            "url": "http://localhost:4000/iPhone-X-Dealing-with-Home-Indicator/",
            "title": "Dealing with Home Indicator",
            "content_html": "",
            "summary": "",
            "image": "http://localhost:4000/assets/images/logo.png",
            "date_published": "2017-09-13T00:00:00-05:00",
            "date_modified": "2017-09-13T00:00:00-05:00",
            "author": {
              "name": "Jordan Morgan"},
            "tags": ["Misc"]}]
}